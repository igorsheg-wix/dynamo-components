!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}([function(e,t,n){"use strict";n.r(t),n.d(t,"render",(function(){return $})),n.d(t,"hydrate",(function(){return U})),n.d(t,"createElement",(function(){return h})),n.d(t,"h",(function(){return h})),n.d(t,"Fragment",(function(){return y})),n.d(t,"createRef",(function(){return m})),n.d(t,"isValidElement",(function(){return r})),n.d(t,"Component",(function(){return b})),n.d(t,"cloneElement",(function(){return B})),n.d(t,"createContext",(function(){return H})),n.d(t,"toChildArray",(function(){return E})),n.d(t,"_unmount",(function(){return P})),n.d(t,"options",(function(){return o}));var o,r,i,u,l,c,a,s={},f=[],_=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function p(e,t){for(var n in t)e[n]=t[n];return e}function d(e){var t=e.parentNode;t&&t.removeChild(e)}function h(e,t,n){var o,r=arguments,i={};for(o in t)"key"!==o&&"ref"!==o&&(i[o]=t[o]);if(arguments.length>3)for(n=[n],o=3;o<arguments.length;o++)n.push(r[o]);if(null!=n&&(i.children=n),"function"==typeof e&&null!=e.defaultProps)for(o in e.defaultProps)void 0===i[o]&&(i[o]=e.defaultProps[o]);return v(e,i,t&&t.key,t&&t.ref)}function v(e,t,n,r){var i={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:null,__c:null,constructor:void 0};return o.vnode&&o.vnode(i),i}function m(){return{}}function y(e){return e.children}function b(e,t){this.props=e,this.context=t}function g(e,t){if(null==t)return e.__?g(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?g(e):null}function k(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return k(e)}}function C(e){(!e.__d&&(e.__d=!0)&&1===i.push(e)||l!==o.debounceRendering)&&((l=o.debounceRendering)||u)(x)}function x(){var e,t,n,o,r,u,l;for(i.sort((function(e,t){return t.__v.__b-e.__v.__b}));e=i.pop();)e.__d&&(n=void 0,o=void 0,u=(r=(t=e).__v).__e,(l=t.__P)&&(n=[],o=D(l,r,p({},r),t.__n,void 0!==l.ownerSVGElement,null,n,null==u?g(r):u),F(n,r),o!=u&&k(r)))}function w(e,t,n,o,r,i,u,l,c){var a,_,p,h,v,m,y,b=n&&n.__k||f,k=b.length;if(l==s&&(l=null!=i?i[0]:k?g(n,0):null),a=0,t.__k=E(t.__k,(function(n){if(null!=n){if(n.__=t,n.__b=t.__b+1,null===(p=b[a])||p&&n.key==p.key&&n.type===p.type)b[a]=void 0;else for(_=0;_<k;_++){if((p=b[_])&&n.key==p.key&&n.type===p.type){b[_]=void 0;break}p=null}if(h=D(e,n,p=p||s,o,r,i,u,l,c),(_=n.ref)&&p.ref!=_&&(y||(y=[]),p.ref&&y.push(p.ref,null,n),y.push(_,n.__c||h,n)),null!=h){if(null==m&&(m=h),null!=n.__d)h=n.__d,n.__d=null;else if(i==p||h!=l||null==h.parentNode){e:if(null==l||l.parentNode!==e)e.appendChild(h);else{for(v=l,_=0;(v=v.nextSibling)&&_<k;_+=2)if(v==h)break e;e.insertBefore(h,l)}"option"==t.type&&(e.value="")}l=h.nextSibling,"function"==typeof t.type&&(t.__d=h)}}return a++,n})),t.__e=m,null!=i&&"function"!=typeof t.type)for(a=i.length;a--;)null!=i[a]&&d(i[a]);for(a=k;a--;)null!=b[a]&&P(b[a],b[a]);if(y)for(a=0;a<y.length;a++)j(y[a],y[++a],y[++a])}function E(e,t,n){if(null==n&&(n=[]),null==e||"boolean"==typeof e)t&&n.push(t(null));else if(Array.isArray(e))for(var o=0;o<e.length;o++)E(e[o],t,n);else n.push(t?t("string"==typeof e||"number"==typeof e?v(null,e,null,null):null!=e.__e||null!=e.__c?v(e.type,e.props,e.key,null):e):e);return n}function N(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]="number"==typeof n&&!1===_.test(t)?n+"px":null==n?"":n}function O(e,t,n,o,r){var i,u,l,c,a;if(r?"className"===t&&(t="class"):"class"===t&&(t="className"),"key"===t||"children"===t);else if("style"===t)if(i=e.style,"string"==typeof n)i.cssText=n;else{if("string"==typeof o&&(i.cssText="",o=null),o)for(u in o)n&&u in n||N(i,u,"");if(n)for(l in n)o&&n[l]===o[l]||N(i,l,n[l])}else"o"===t[0]&&"n"===t[1]?(c=t!==(t=t.replace(/Capture$/,"")),a=t.toLowerCase(),t=(a in e?a:t).slice(2),n?(o||e.addEventListener(t,S,c),(e.l||(e.l={}))[t]=n):e.removeEventListener(t,S,c)):"list"!==t&&"tagName"!==t&&"form"!==t&&"type"!==t&&!r&&t in e?e[t]=null==n?"":n:"function"!=typeof n&&"dangerouslySetInnerHTML"!==t&&(t!==(t=t.replace(/^xlink:?/,""))?null==n||!1===n?e.removeAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase()):e.setAttributeNS("http://www.w3.org/1999/xlink",t.toLowerCase(),n):null==n||!1===n?e.removeAttribute(t):e.setAttribute(t,n))}function S(e){this.l[e.type](o.event?o.event(e):e)}function D(e,t,n,r,i,u,l,c,a){var s,f,_,d,h,v,m,g,k,C,x=t.type;if(void 0!==t.constructor)return null;(s=o.__b)&&s(t);try{e:if("function"==typeof x){if(g=t.props,k=(s=x.contextType)&&r[s.__c],C=s?k?k.props.value:s.__:r,n.__c?m=(f=t.__c=n.__c).__=f.__E:("prototype"in x&&x.prototype.render?t.__c=f=new x(g,C):(t.__c=f=new b(g,C),f.constructor=x,f.render=T),k&&k.sub(f),f.props=g,f.state||(f.state={}),f.context=C,f.__n=r,_=f.__d=!0,f.__h=[]),null==f.__s&&(f.__s=f.state),null!=x.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=p({},f.__s)),p(f.__s,x.getDerivedStateFromProps(g,f.__s))),d=f.props,h=f.state,_)null==x.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==x.getDerivedStateFromProps&&g!==d&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(g,C),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(g,f.__s,C)){for(f.props=g,f.state=f.__s,f.__d=!1,f.__v=t,t.__e=n.__e,t.__k=n.__k,f.__h.length&&l.push(f),s=0;s<t.__k.length;s++)t.__k[s]&&(t.__k[s].__=t);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(g,f.__s,C),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(d,h,v)}))}f.context=C,f.props=g,f.state=f.__s,(s=o.__r)&&s(t),f.__d=!1,f.__v=t,f.__P=e,s=f.render(f.props,f.state,f.context),t.__k=E(null!=s&&s.type==y&&null==s.key?s.props.children:s),null!=f.getChildContext&&(r=p(p({},r),f.getChildContext())),_||null==f.getSnapshotBeforeUpdate||(v=f.getSnapshotBeforeUpdate(d,h)),w(e,t,n,r,i,u,l,c,a),f.base=t.__e,f.__h.length&&l.push(f),m&&(f.__E=f.__=null),f.__e=null}else t.__e=A(n.__e,t,n,r,i,u,l,a);(s=o.diffed)&&s(t)}catch(e){o.__e(e,t,n)}return t.__e}function F(e,t){o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function A(e,t,n,o,r,i,u,l){var c,a,_,p,d,h=n.props,v=t.props;if(r="svg"===t.type||r,null==e&&null!=i)for(c=0;c<i.length;c++)if(null!=(a=i[c])&&(null===t.type?3===a.nodeType:a.localName===t.type)){e=a,i[c]=null;break}if(null==e){if(null===t.type)return document.createTextNode(v);e=r?document.createElementNS("http://www.w3.org/2000/svg",t.type):document.createElement(t.type),i=null}if(null===t.type)null!=i&&(i[i.indexOf(e)]=null),h!==v&&e.data!=v&&(e.data=v);else if(t!==n){if(null!=i&&(i=f.slice.call(e.childNodes)),_=(h=n.props||s).dangerouslySetInnerHTML,p=v.dangerouslySetInnerHTML,!l){if(h===s)for(h={},d=0;d<e.attributes.length;d++)h[e.attributes[d].name]=e.attributes[d].value;(p||_)&&(p&&_&&p.__html==_.__html||(e.innerHTML=p&&p.__html||""))}(function(e,t,n,o,r){var i;for(i in n)i in t||O(e,i,null,n[i],o);for(i in t)r&&"function"!=typeof t[i]||"value"===i||"checked"===i||n[i]===t[i]||O(e,i,t[i],n[i],o)})(e,v,h,r,l),t.__k=t.props.children,p||w(e,t,n,o,"foreignObject"!==t.type&&r,i,u,s,l),l||("value"in v&&void 0!==v.value&&v.value!==e.value&&(e.value=null==v.value?"":v.value),"checked"in v&&void 0!==v.checked&&v.checked!==e.checked&&(e.checked=v.checked))}return e}function j(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function P(e,t,n){var r,i,u;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||j(r,null,t)),n||"function"==typeof e.type||(n=null!=(i=e.__e)),e.__e=e.__d=null,null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,t)}r.base=r.__P=null}if(r=e.__k)for(u=0;u<r.length;u++)r[u]&&P(r[u],t,n);null!=i&&d(i)}function T(e,t,n){return this.constructor(e,n)}function $(e,t,n){var r,i,u;o.__&&o.__(e,t),i=(r=n===c)?null:n&&n.__k||t.__k,e=h(y,null,[e]),u=[],D(t,(r?t:n||t).__k=e,i||s,s,void 0!==t.ownerSVGElement,n&&!r?[n]:i?null:f.slice.call(t.childNodes),u,n||s,r),F(u,e)}function U(e,t){$(e,t,c)}function B(e,t){return t=p(p({},e.props),t),arguments.length>2&&(t.children=f.slice.call(arguments,2)),v(e.type,t,t.key||e.key,t.ref||e.ref)}function H(e){var t={},n={__c:"__cC"+a++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var o,r=this;return this.getChildContext||(o=[],this.getChildContext=function(){return t[n.__c]=r,t},this.shouldComponentUpdate=function(t){e.value!==t.value&&o.some((function(e){e.context=t.value,C(e)}))},this.sub=function(e){o.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){o.splice(o.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Consumer.contextType=n,n}o={__e:function(e,t){for(var n,o;t=t.__;)if((n=t.__c)&&!n.__)try{if(n.constructor&&null!=n.constructor.getDerivedStateFromError&&(o=!0,n.setState(n.constructor.getDerivedStateFromError(e))),null!=n.componentDidCatch&&(o=!0,n.componentDidCatch(e)),o)return C(n.__E=n)}catch(t){e=t}throw e}},r=function(e){return null!=e&&void 0===e.constructor},b.prototype.setState=function(e,t){var n;n=this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(n,this.props)),e&&p(n,e),null!=e&&this.__v&&(this.__e=!1,t&&this.__h.push(t),C(this))},b.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),C(this))},b.prototype.render=y,i=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=s,a=0},function(e,t,n){"use strict";n.d(t,"j",(function(){return p})),n.d(t,"h",(function(){return d})),n.d(t,"d",(function(){return h})),n.d(t,"f",(function(){return v})),n.d(t,"i",(function(){return m})),n.d(t,"e",(function(){return y})),n.d(t,"g",(function(){return b})),n.d(t,"a",(function(){return g})),n.d(t,"b",(function(){return k})),n.d(t,"c",(function(){return C}));var o,r,i,u=n(0),l=[],c=u.options.__r,a=u.options.diffed,s=u.options.__c,f=u.options.unmount;function _(e){u.options.__h&&u.options.__h(r);var t=r.__H||(r.__H={t:[],u:[]});return e>=t.t.length&&t.t.push({}),t.t[e]}function p(e){return d(O,e)}function d(e,t,n){var i=_(o++);return i.__c||(i.__c=r,i.i=[n?n(t):O(void 0,t),function(t){var n=e(i.i[0],t);i.i[0]!==n&&(i.i[0]=n,i.__c.setState({}))}]),i.i}function h(e,t){var n=_(o++);N(n.o,t)&&(n.i=e,n.o=t,r.__H.u.push(n))}function v(e,t){var n=_(o++);N(n.o,t)&&(n.i=e,n.o=t,r.__h.push(n))}function m(e){return b((function(){return{current:e}}),[])}function y(e,t,n){v((function(){"function"==typeof e?e(t()):e&&(e.current=t())}),null==n?n:n.concat(e))}function b(e,t){var n=_(o++);return N(n.o,t)?(n.o=t,n.v=e,n.i=e()):n.i}function g(e,t){return b((function(){return e}),t)}function k(e){var t=r.context[e.__c];if(!t)return e.__;var n=_(o++);return null==n.i&&(n.i=!0,t.sub(r)),t.props.value}function C(e,t){u.options.useDebugValue&&u.options.useDebugValue(t?t(e):e)}function x(){l.some((function(e){e.__P&&(e.__H.u.forEach(w),e.__H.u.forEach(E),e.__H.u=[])})),l=[]}function w(e){e.m&&e.m()}function E(e){var t=e.i();"function"==typeof t&&(e.m=t)}function N(e,t){return!e||t.some((function(t,n){return t!==e[n]}))}function O(e,t){return"function"==typeof t?t(e):t}u.options.__r=function(e){c&&c(e),o=0,(r=e.__c).__H&&(r.__H.u.forEach(w),r.__H.u.forEach(E),r.__H.u=[])},u.options.diffed=function(e){a&&a(e);var t=e.__c;if(t){var n=t.__H;n&&n.u.length&&(1!==l.push(t)&&i===u.options.requestAnimationFrame||((i=u.options.requestAnimationFrame)||function(e){var t,n=function(){clearTimeout(o),cancelAnimationFrame(t),setTimeout(e)},o=setTimeout(n,100);"undefined"!=typeof window&&(t=requestAnimationFrame(n))})(x))}},u.options.__c=function(e,t){t.some((function(e){e.__h.forEach(w),e.__h=e.__h.filter((function(e){return!e.i||E(e)}))})),s&&s(e,t)},u.options.unmount=function(e){f&&f(e);var t=e.__c;if(t){var n=t.__H;n&&n.t.forEach((function(e){return e.m&&e.m()}))}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return h})),n.d(t,"a",(function(){return d}));var o={data:""},r=function(e){try{var t=e?e.querySelector("#_goober"):self._goober;return t||((t=(e||document.head).appendChild(document.createElement("style"))).innerHTML=" ",t.id="_goober"),t.firstChild}catch(e){}return o},i=/(?:([a-z0-9-%@]+) *:? *([^{;]+?);|([^;}{]*?) +{)|(})/gi,u=/\/\*.*?\*\/|\s{2,}|\n/gm,l={c:0},c=function(e,t,n,o){var r=JSON.stringify(e),c=l[r]||(l[r]=n?"":".go"+r.split("").reduce((function(e,t){return e+t.charCodeAt(0)|8}),4));return function(e,t,n){t.data.indexOf(e)<0&&(t.data=n?e+t.data:t.data+e)}(l[c]||(l[c]=function e(t,n,o){var r="",i="",u="";if(/^@[k|f]/.test(o))return o+JSON.stringify(t).replace(/","/g,";").replace(/"|,"/g,"").replace(/:{/g,"{");for(var l in t){var c=t[l];if("object"==typeof c){var a=n+" "+l;/&/g.test(l)&&(a=l.replace(/&/g,n)),"@"==l[0]&&(a=n),i+=e(c,a,a==n?l:o||"")}else/^@i/.test(l)?u=l+" "+c+";":r+=l.replace(/[A-Z]/g,"-$&").toLowerCase()+":"+c+";"}if(r.charCodeAt(0)){var s=n+"{"+r+"}";return o?i+o+"{"+s+"}":u+s+i}return u+i}(e[0]?function(e){for(var t,n=[{}];t=i.exec(e.replace(u,""));)t[4]&&n.shift(),t[3]?n.unshift(n[0][t[3]]={}):t[4]||(n[0][t[1]]=t[2]);return n[0]}(e):e,c)),t,o),c.slice(1)},a=function(e,t,n){return e.reduce((function(e,o,r){var i=t[r];if(i&&i.call){var u=i(n),l=u&&u.props&&u.props.className||/^go/.test(u)&&u;i=l?"."+l:u&&u.props?"":u}return e+o+(i||"")}),"")};function s(e){var t=this||{},n=e.call?e(t.p):e;return c(n.map?a(n,[].slice.call(arguments,1),t.p):n,r(t.target),t.g,t.o)}s.bind({g:1});var f,_,p,d=function(e,t,n){f=e,_=t,p=n};function h(e){var t=this||{};return function(){var n=arguments;function o(o,r){var i=t.p=Object.assign(p?{theme:p()}:{},o),u=i.className;return t.o=/\s*go[0-9]+/g.test(u),i.className=s.apply(t,n)+(u?" "+u:""),i.ref=r,f(e,i)}return _?_(o):o}}},function(e,t){e.exports=function(e,t){return t||(t=e.slice(0)),e.raw=t,e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var o=n(1);n.d(t,"b",(function(){return o.b})),n.d(t,"c",(function(){return o.d})),n.d(t,"d",(function(){return o.i}));var r=n(0);function i(e,t){for(var n in t)e[n]=t[n];return e}function u(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var o in t)if("__source"!==o&&e[o]!==t[o])return!0;return!1}!function(e){var t,n;function o(t){var n;return(n=e.call(this,t)||this).isPureReactComponent=!0,n}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.shouldComponentUpdate=function(e,t){return u(this.props,e)||u(this.state,t)}}(r.Component);var l=r.options.vnode;function c(e){function t(t){var n=i({},t);return delete n.ref,e(n,t.ref)}return t.prototype.isReactComponent=!0,t.t=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}r.options.vnode=function(e){e.type&&e.type.t&&e.ref&&(e.props.ref=e.ref,e.ref=null),l&&l(e)};var a=function(e,t){return e?Object(r.toChildArray)(e).map(t):null},s=(r.toChildArray,r.options.__e);function f(e){return e&&((e=i({},e)).__c=null,e.__k=e.__k&&e.__k.map(f)),e}function _(e){this.__u=0,this.__b=null}function p(e){var t=e.__.__c;return t&&t.o&&t.o(e)}function d(){this.u=null,this.i=null}r.options.__e=function(e,t,n){if(e.then)for(var o,r=t;r=r.__;)if((o=r.__c)&&o.l)return o.l(e,t.__c);s(e,t,n)},(_.prototype=new r.Component).l=function(e,t){var n=this,o=p(n.__v),r=!1,i=function(){r||(r=!0,o?o(u):u())};t.__c=t.componentWillUnmount,t.componentWillUnmount=function(){i(),t.__c&&t.__c()};var u=function(){--n.__u||(n.__v.__k[0]=n.state.o,n.setState({o:n.__b=null}))};n.__u++||n.setState({o:n.__b=n.__v.__k[0]}),e.then(i,i)},_.prototype.render=function(e,t){return this.__b&&(this.__v.__k[0]=f(this.__b),this.__b=null),[Object(r.createElement)(r.Component,null,t.o?null:e.children),t.o&&e.fallback]};var h=function(e,t,n){if(++n[1]===n[0]&&e.i.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.i.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};(d.prototype=new r.Component).o=function(e){var t=this,n=p(t.__v),o=t.i.get(e);return o[0]++,function(r){var i=function(){t.props.revealOrder?(o.push(r),h(t,e,o)):r()};n?n(i):i()}},d.prototype.render=function(e){this.u=null,this.i=new Map;var t=Object(r.toChildArray)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.i.set(t[n],this.u=[1,0,this.u]);return e.children},d.prototype.componentDidUpdate=d.prototype.componentDidMount=function(){var e=this;e.i.forEach((function(t,n){h(e,n,t)}))};!function(){function e(){}var t=e.prototype;t.getChildContext=function(){return this.props.context},t.render=function(e){return e.children}}();var v=/^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/;r.Component.prototype.isReactComponent={};var m="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;var y=r.options.event;function b(e,t){e["UNSAFE_"+t]&&!e[t]&&Object.defineProperty(e,t,{configurable:!1,get:function(){return this["UNSAFE_"+t]},set:function(e){this["UNSAFE_"+t]=e}})}r.options.event=function(e){return y&&(e=y(e)),e.persist=function(){},e.nativeEvent=e};var g={configurable:!0,get:function(){return this.class}},k=r.options.vnode;r.options.vnode=function(e){e.$$typeof=m;var t=e.type,n=e.props;if("function"!=typeof t){var o,i,u;for(u in n.defaultValue&&(n.value||0===n.value||(n.value=n.defaultValue),delete n.defaultValue),Array.isArray(n.value)&&n.multiple&&"select"===t&&(Object(r.toChildArray)(n.children).forEach((function(e){-1!=n.value.indexOf(e.props.value)&&(e.props.selected=!0)})),delete n.value),n)if(o=v.test(u))break;if(o)for(u in i=e.props={},n)i[v.test(u)?u.replace(/([A-Z0-9])/,"-$1").toLowerCase():u]=n[u]}(n.class||n.className)&&(g.enumerable="className"in n,n.className&&(n.class=n.className),Object.defineProperty(n,"className",g)),function(t){var n=e.type,o=e.props;if(o&&"string"==typeof n){var r={};for(var i in o)/^on(Ani|Tra|Tou)/.test(i)&&(o[i.toLowerCase()]=o[i],delete o[i]),r[i.toLowerCase()]=i;if(r.ondoubleclick&&(o.ondblclick=o[r.ondoubleclick],delete o[r.ondoubleclick]),r.onbeforeinput&&(o.onbeforeinput=o[r.onbeforeinput],delete o[r.onbeforeinput]),r.onchange&&("textarea"===n||"input"===n.toLowerCase()&&!/^fil|che|ra/i.test(o.type))){var u=r.oninput||"oninput";o[u]||(o[u]=o[r.onchange],delete o[r.onchange])}}}(),"function"==typeof t&&!t.m&&t.prototype&&(b(t.prototype,"componentWillMount"),b(t.prototype,"componentWillReceiveProps"),b(t.prototype,"componentWillUpdate"),t.m=!0),k&&k(e)};o.j,o.h,o.d,o.f,o.i,o.e,o.g,o.a,o.b,o.c,r.createElement,r.createContext,r.createRef,r.Fragment,r.Component},function(e,t,n){var o;e.exports=(o=n(0),function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(){this._root=(0,u.render)(function e(t,n){if(3===t.nodeType)return t.nodeValue;if(1!==t.nodeType)return null;var o=[],r={},i=0,l=t.attributes,c=t.childNodes;for(i=l.length;i--;)r[l[i].name]=l[i].value;for(i=c.length;i--;)o[i]=e(c[i]);return(0,u.h)(n||t.nodeName.toLowerCase(),r,o)}(this,this._vdomComponent),this,this._root)}function r(){(0,u.render)((0,u.h)(l),this,this._root)}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e,t,n){var u=function(t){function u(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u);var t=Reflect.construct(HTMLElement,[],u);return t._vdomComponent=e,t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":i(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(u,HTMLElement),c(u,[{key:"connectedCallback",value:function(){o.apply(this)}},{key:"attributeChangedCallback",value:function(){o.apply(this)}},{key:"detachedCallback",value:function(){r.apply(this)}}],[{key:"observedAttributes",get:function(){return n}}]),u}();return window.customElements.define(t||e.displayName||e.name,u)};var u=n(1),l=function(){return null},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}()},function(e,t){e.exports=o}]))},function(e,t,n){"use strict";var o=n(3),r=n.n(o),i=n(0),u=n(4),l=n(2),c={colors:{$D10:"#162D3D",$D20:"#32536A",$D30:"#577083",$D40:"#7A92A5",$D50:"#B6C1CD",$D55:"#CBD3DC",$D60:"#DFE5EB",$D70:"#F0F4F7",$D80:"#FFFFFF",$B00:"#2B81CB",$B05:"#308DDD",$B10:"#3899EC",$B20:"#4EB7F5",$B25:"#A1D7FB",$B27:"#B3E0FB",$B30:"#C1E4FE",$B40:"#DAEFFE",$B50:"#EAF7FF",$B60:"#F4FAFE"},sidebar:{colors:{$bg:"#23263e",$divider:"#434567",$bgHover:"#2e3249",$bgActive:"#393f59"}}};function a(){var e=r()(["\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  box-sizing: border-box;\n"]);return a=function(){return e},e}var s=Object(i.createContext)(c);Object(l.a)(i.h,u.a,(function(){return Object(u.b)(s)}));var f=Object(l.b)("div")(a());t.a=function(e){var t=e.children;return Object(i.h)(f,{__source:{fileName:"/Users/igors/Development/pc-comonents/src/App.tsx",lineNumber:13}},t)}},,,,,,function(e,t,n){"use strict";n.r(t);var o=n(0),r=n(5),i=n.n(r),u=n(4),l=n(6);i()((function(e){var t,n,r,i,c,a,s,f,_=e.state,p=(c={position:"fixed",top:0,left:0,margin:0,padding:0,border:"none",borderRadius:0,backgroundColor:"currentColor",zIndex:1e4,height:"number"==typeof(t=(i=function(e,t){return Object.keys(t||{}).forEach((function(n){e[n]=t[n]})),e})({size:2,color:"#29e",className:"bar-of-progress",delay:80},t={size:2,color:"#3899EC",delay:0})).size?t.size+"px":t.size,color:t.color,opacity:0,width:"0%"},a={opacity:1,width:"99%",transition:"width 10s cubic-bezier(0.1, 0.05, 0, 1)"},s={opacity:0,width:"100%",transition:"width 0.1s ease-out, opacity 0.5s ease 0.2s"},f={opacity:.4,boxShadow:"3px 0 8px",height:"100%"},{finish:function(){null!=r&&(clearTimeout(r),r=null),n&&(n.className=t.className+" finished",i(n.style,s))},start:function(){n&&n.parentNode&&n.parentNode.removeChild(n),(n=document.body.appendChild(document.createElement("div"))).className=t.className+" stopped",i(n.style,c);var e=n.appendChild(document.createElement("div"));e.className="glow",i(e.style,f),null!=r&&clearTimeout(r),r=setTimeout((function(){r=null,n.className=t.className+" started",i(n.style,a)}),t.delay),n.scrollTop=0}}),d=Object(u.d)();return Object(u.c)((function(){"run"===_&&(p.start(),setTimeout((function(){p.finish()}),2e3))}),[_]),Object(o.h)(l.a,{ref:d,__source:{fileName:"/Users/igors/Development/pc-comonents/src/components/ProgressBar/index.tsx",lineNumber:125}})}),"x-progressbar",["state"])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9vcHRpb25zLmpzIiwid2VicGFjazovLy8uLi9zcmMvY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jcmVhdGUtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kaWZmL2NoaWxkcmVuLmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RpZmYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jbG9uZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9jYXRjaC1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbmtzYXJhZi9nb29iZXIvZGlzdC9nb29iZXIubW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlLmpzIiwid2VicGFjazovLy8uLi9zcmMvUHVyZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2ZvcndhcmRSZWYuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9DaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1c3BlbnNlLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3VzcGVuc2UtbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3BvcnRhbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC1jdXN0b20tZWxlbWVudC9kaXN0L2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ2xvYmFsU3R5bGVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Qcm9ncmVzc0Jhci9pbmRleC50c3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJvcHRpb25zIiwiaXNWYWxpZEVsZW1lbnQiLCJxIiwiZGVmZXIiLCJwcmV2RGVib3VuY2UiLCJJU19IWURSQVRFIiwiRU1QVFlfT0JKIiwiRU1QVFlfQVJSIiwiSVNfTk9OX0RJTUVOU0lPTkFMIiwiYXNzaWduIiwib2JqIiwicHJvcHMiLCJyZW1vdmVOb2RlIiwibm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY2hpbGRyZW4iLCJub3JtYWxpemVkUHJvcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwdXNoIiwiZGVmYXVsdFByb3BzIiwiY3JlYXRlVk5vZGUiLCJyZWYiLCJ2bm9kZSIsIl9jaGlsZHJlbiIsIl9wYXJlbnQiLCJfZGVwdGgiLCJfZG9tIiwiX2xhc3REb21DaGlsZCIsIl9jb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInVuZGVmaW5lZCIsImNyZWF0ZVJlZiIsIkZyYWdtZW50IiwiQ29tcG9uZW50IiwiY29udGV4dCIsImdldERvbVNpYmxpbmciLCJjaGlsZEluZGV4IiwiaW5kZXhPZiIsInNpYmxpbmciLCJ1cGRhdGVQYXJlbnREb21Qb2ludGVycyIsImNoaWxkIiwiYmFzZSIsImVucXVldWVSZW5kZXIiLCJfZGlydHkiLCJkZWJvdW5jZVJlbmRlcmluZyIsInByb2Nlc3MiLCJjb21wb25lbnQiLCJjb21taXRRdWV1ZSIsIm5ld0RvbSIsIm9sZERvbSIsInBhcmVudERvbSIsInNvcnQiLCJhIiwiYiIsIl92bm9kZSIsInBvcCIsIl9wYXJlbnREb20iLCJkaWZmIiwiX2NvbnRleHQiLCJvd25lclNWR0VsZW1lbnQiLCJjb21taXRSb290IiwiZGlmZkNoaWxkcmVuIiwibmV3UGFyZW50Vk5vZGUiLCJvbGRQYXJlbnRWTm9kZSIsImlzU3ZnIiwiZXhjZXNzRG9tQ2hpbGRyZW4iLCJpc0h5ZHJhdGluZyIsImoiLCJvbGRWTm9kZSIsInNpYkRvbSIsImZpcnN0Q2hpbGREb20iLCJyZWZzIiwib2xkQ2hpbGRyZW4iLCJvbGRDaGlsZHJlbkxlbmd0aCIsInRvQ2hpbGRBcnJheSIsImNoaWxkVk5vZGUiLCJvdXRlciIsImFwcGVuZENoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJ1bm1vdW50IiwiYXBwbHlSZWYiLCJjYWxsYmFjayIsImZsYXR0ZW5lZCIsIkFycmF5IiwiaXNBcnJheSIsInNldFN0eWxlIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInRlc3QiLCJkb20iLCJvbGRWYWx1ZSIsInVzZUNhcHR1cmUiLCJuYW1lTG93ZXIiLCJjc3NUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnRQcm94eSIsIl9saXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImUiLCJldmVudCIsIm5ld1ZOb2RlIiwidG1wIiwiaXNOZXciLCJvbGRQcm9wcyIsIm9sZFN0YXRlIiwic25hcHNob3QiLCJjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24iLCJuZXdQcm9wcyIsInByb3ZpZGVyIiwiY2N0eCIsIm5ld1R5cGUiLCJfZGlmZiIsImNvbnRleHRUeXBlIiwiX2lkIiwiX2RlZmF1bHRWYWx1ZSIsIl9wcm9jZXNzaW5nRXhjZXB0aW9uIiwiX3BlbmRpbmdFcnJvciIsInJlbmRlciIsImRvUmVuZGVyIiwic3ViIiwic3RhdGUiLCJfcmVuZGVyQ2FsbGJhY2tzIiwiX25leHRTdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIl9mb3JjZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJfcmVuZGVyIiwiZ2V0Q2hpbGRDb250ZXh0IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJkaWZmRWxlbWVudE5vZGVzIiwiZGlmZmVkIiwiX2NhdGNoRXJyb3IiLCJyb290IiwiX2NvbW1pdCIsInNvbWUiLCJjYiIsIm9sZEh0bWwiLCJuZXdIdG1sIiwibm9kZVR5cGUiLCJsb2NhbE5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlRWxlbWVudE5TIiwiZGF0YSIsImNoaWxkTm9kZXMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImF0dHJpYnV0ZXMiLCJfX2h0bWwiLCJpbm5lckhUTUwiLCJoeWRyYXRlIiwiZGlmZlByb3BzIiwiY2hlY2tlZCIsImN1cnJlbnQiLCJwYXJlbnRWTm9kZSIsInNraXBSZW1vdmUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInRoaXMiLCJyZXBsYWNlTm9kZSIsIl9yb290IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsImRlZmF1bHRWYWx1ZSIsImN0eCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJzdWJzIiwiX3RoaXMiLCJfcHJvcHMiLCJvbGQiLCJzcGxpY2UiLCJlcnJvciIsImhhc0NhdWdodCIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInNldFN0YXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIlByb21pc2UiLCJ0aGVuIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50Q29tcG9uZW50IiwicHJldlJhZiIsImFmdGVyUGFpbnRFZmZlY3RzIiwib2xkQmVmb3JlUmVuZGVyIiwib2xkQWZ0ZXJEaWZmIiwib2xkQ29tbWl0Iiwib2xkQmVmb3JlVW5tb3VudCIsImdldEhvb2tTdGF0ZSIsImluZGV4IiwiX2hvb2siLCJob29rcyIsIl9faG9va3MiLCJfbGlzdCIsIl9wZW5kaW5nRWZmZWN0cyIsInVzZVN0YXRlIiwiaW5pdGlhbFN0YXRlIiwidXNlUmVkdWNlciIsImludm9rZU9yUmV0dXJuIiwicmVkdWNlciIsImluaXQiLCJob29rU3RhdGUiLCJfdmFsdWUiLCJuZXh0VmFsdWUiLCJhY3Rpb24iLCJ1c2VFZmZlY3QiLCJhcmdzIiwiYXJnc0NoYW5nZWQiLCJfYXJncyIsInVzZUxheW91dEVmZmVjdCIsInVzZVJlZiIsImluaXRpYWxWYWx1ZSIsInVzZU1lbW8iLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiY3JlYXRlSGFuZGxlIiwiY29uY2F0IiwiZmFjdG9yeSIsIl9mYWN0b3J5IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsImZvcm1hdHRlciIsImZsdXNoQWZ0ZXJQYWludEVmZmVjdHMiLCJmb3JFYWNoIiwiaW52b2tlQ2xlYW51cCIsImludm9rZUVmZmVjdCIsImhvb2siLCJfY2xlYW51cCIsInJlc3VsdCIsIm9sZEFyZ3MiLCJuZXdBcmdzIiwiYXJnIiwiZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZiIsImRvbmUiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3aW5kb3ciLCJmaWx0ZXIiLCJ2IiwicXVlcnlTZWxlY3RvciIsInNlbGYiLCJfZ29vYmVyIiwiaGVhZCIsImlkIiwiZmlyc3RDaGlsZCIsInUiLCJKU09OIiwic3RyaW5naWZ5Iiwic3BsaXQiLCJyZWR1Y2UiLCJjaGFyQ29kZUF0IiwiZXhlYyIsInNoaWZ0IiwidW5zaGlmdCIsImNsYXNzTmFtZSIsIm1hcCIsInRhcmdldCIsImciLCJ0aGVtZSIsImFwcGx5Iiwic3RyaW5ncyIsInJhdyIsInNoYWxsb3dEaWZmZXJzIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJvbGRWTm9kZUhvb2siLCJmb3J3YXJkUmVmIiwiZm4iLCJGb3J3YXJkZWQiLCJjbG9uZSIsImlzUmVhY3RDb21wb25lbnQiLCJfZm9yd2FyZGVkIiwiZGlzcGxheU5hbWUiLCJtYXBGbiIsIm9sZENhdGNoRXJyb3IiLCJkZXRhY2hlZENsb25lIiwiU3VzcGVuc2UiLCJfc3VzcGVuc2lvbnMiLCJfZGV0YWNoT25OZXh0UmVuZGVyIiwic3VzcGVuZGVkIiwiX3N1c3BlbmRlZCIsIlN1c3BlbnNlTGlzdCIsIl9uZXh0IiwiX21hcCIsIl9jaGlsZERpZFN1c3BlbmQiLCJwcm9taXNlIiwic3VzcGVuZGluZ0NvbXBvbmVudCIsInJlc29sdmVkIiwib25SZXNvbHZlZCIsIm9uU3VzcGVuc2lvbkNvbXBsZXRlIiwiX3N1c3BlbmRlZENvbXBvbmVudFdpbGxVbm1vdW50IiwiZmFsbGJhY2siLCJsaXN0IiwiZGVsZXRlIiwicmV2ZWFsT3JkZXIiLCJzaXplIiwiZGVsZWdhdGVkIiwid3JhcHBlZFVuc3VzcGVuZCIsInVuc3VzcGVuZCIsIk1hcCIsInJldmVyc2UiLCJzZXQiLCJDb250ZXh0UHJvdmlkZXIiLCJDQU1FTF9QUk9QUyIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsImZvciIsIm9sZEV2ZW50SG9vayIsInNldFNhZmVEZXNjcmlwdG9yIiwicHJvdG8iLCJjb25maWd1cmFibGUiLCJwZXJzaXN0IiwibmF0aXZlRXZlbnQiLCJjbGFzc05hbWVEZXNjcmlwdG9yIiwiY2xhc3MiLCIkJHR5cGVvZiIsInNob3VsZFNhbml0aXplIiwiYXR0cnMiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwib25kb3VibGVjbGljayIsIm9uZGJsY2xpY2siLCJvbmJlZm9yZWlucHV0Iiwib25jaGFuZ2UiLCJub3JtYWxpemVkIiwib25pbnB1dCIsIl9wYXRjaGVkTGlmZWN5Y2xlcyIsInJlcXVpcmUiLCJsb2FkZWQiLCJub2RlVmFsdWUiLCJoIiwibm9kZU5hbWUiLCJfdmRvbUNvbXBvbmVudCIsIml0ZXJhdG9yIiwiVHlwZUVycm9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIkhUTUxFbGVtZW50Iiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiY29sb3JzIiwiJEQxMCIsIiREMjAiLCIkRDMwIiwiJEQ0MCIsIiRENTAiLCIkRDU1IiwiJEQ2MCIsIiRENzAiLCIkRDgwIiwiJEIwMCIsIiRCMDUiLCIkQjEwIiwiJEIyMCIsIiRCMjUiLCIkQjI3IiwiJEIzMCIsIiRCNDAiLCIkQjUwIiwiJEI2MCIsInNpZGViYXIiLCIkYmciLCIkZGl2aWRlciIsIiRiZ0hvdmVyIiwiJGJnQWN0aXZlIiwiVGhlbWVDb250ZXh0Iiwic2V0dXAiLCJTdHlsZWRCYXNlIiwic3R5bGVkIiwiQXBwIiwicmVnaXN0ZXIiLCJjb25maWciLCJpbml0aWFsU3R5bGUiLCJzdGFydGVkU3R5bGUiLCJmaW5pc2hlZFN0eWxlIiwiZ2xvd1N0eWxlIiwicHJvZ3Jlc3MiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwiekluZGV4IiwiaGVpZ2h0IiwidG8iLCJmcm9tIiwia2V5cyIsImNvbG9yIiwiZGVsYXkiLCJvcGFjaXR5Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiYm94U2hhZG93IiwiZmluaXNoIiwic3RhcnQiLCJib2R5IiwiZ2xvdyIsInNjcm9sbFRvcCIsImNvbXBwb25lbnRSZWYiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVks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T2dLLEVBQVE5RSxNQUFPZ1QsS0FDdkJGLEVBQU9vQixPQUdWcFAsRUFBUTZQLFVBQVksS0FvQmxCQyxFQUFnQm5NLGNBWXRCLE9BVEFMLGFBQVUsV0FDUSxRQUFWM0YsSUFDQTBRLEVBQVNxQixRQUNUOU4sWUFBVyxXQUNQeU0sRUFBU29CLFdBQ1YsUUFFUixDQUFDOVIsSUFHRixZQUFDLElBQUQsQ0FBSzNHLElBQUs4WSxFQUFWLG1CLDZFQUFBLG9CQUtnQixnQkFBaUIsQ0FBQyIsImZpbGUiOiJQcm9ncmVzc0Jhci9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMik7XG4iLCJleHBvcnQgY29uc3QgRU1QVFlfT0JKID0ge307XG5leHBvcnQgY29uc3QgRU1QVFlfQVJSID0gW107XG5leHBvcnQgY29uc3QgSVNfTk9OX0RJTUVOU0lPTkFMID0gL2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmQvaTtcbiIsImltcG9ydCB7IF9jYXRjaEVycm9yIH0gZnJvbSAnLi9kaWZmL2NhdGNoLWVycm9yJztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5PcHRpb25zfSAgKi9cbmNvbnN0IG9wdGlvbnMgPSB7XG5cdF9jYXRjaEVycm9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBvcHRpb25zO1xuIiwiaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gdmlydHVhbCBub2RlICh1c2VkIGZvciBKU1gpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogY29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm9wc10gVGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4nKS5Db21wb25lbnRDaGlsZHJlbj59IFtjaGlsZHJlbl0gVGhlIGNoaWxkcmVuIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdGxldCBub3JtYWxpemVkUHJvcHMgPSB7fSxcblx0XHRpO1xuXHRmb3IgKGkgaW4gcHJvcHMpIHtcblx0XHRpZiAoaSAhPT0gJ2tleScgJiYgaSAhPT0gJ3JlZicpIG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHByb3BzW2ldO1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzKSB7XG5cdFx0Y2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmVhY3Rqcy9wcmVhY3QvaXNzdWVzLzE5MTZcblx0XHRmb3IgKGkgPSAzOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGlsZHJlbi5wdXNoKGFyZ3VtZW50c1tpXSk7XG5cdFx0fVxuXHR9XG5cdGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0bm9ybWFsaXplZFByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cdH1cblxuXHQvLyBJZiBhIENvbXBvbmVudCBWTm9kZSwgY2hlY2sgZm9yIGFuZCBhcHBseSBkZWZhdWx0UHJvcHNcblx0Ly8gTm90ZTogdHlwZSBtYXkgYmUgdW5kZWZpbmVkIGluIGRldmVsb3BtZW50LCBtdXN0IG5ldmVyIGVycm9yIGhlcmUuXG5cdGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlLmRlZmF1bHRQcm9wcyAhPSBudWxsKSB7XG5cdFx0Zm9yIChpIGluIHR5cGUuZGVmYXVsdFByb3BzKSB7XG5cdFx0XHRpZiAobm9ybWFsaXplZFByb3BzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bm9ybWFsaXplZFByb3BzW2ldID0gdHlwZS5kZWZhdWx0UHJvcHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNyZWF0ZVZOb2RlKFxuXHRcdHR5cGUsXG5cdFx0bm9ybWFsaXplZFByb3BzLFxuXHRcdHByb3BzICYmIHByb3BzLmtleSxcblx0XHRwcm9wcyAmJiBwcm9wcy5yZWZcblx0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBWTm9kZSAodXNlZCBpbnRlcm5hbGx5IGJ5IFByZWFjdClcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGVbXCJ0eXBlXCJdfSB0eXBlIFRoZSBub2RlIG5hbWUgb3IgQ29tcG9uZW50XG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhpcyB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgc3RyaW5nIHwgbnVtYmVyIHwgbnVsbH0gcHJvcHMgVGhlIHByb3BlcnRpZXMgb2YgdGhpcyB2aXJ0dWFsIG5vZGUuXG4gKiBJZiB0aGlzIHZpcnR1YWwgbm9kZSByZXByZXNlbnRzIGEgdGV4dCBub2RlLCB0aGlzIGlzIHRoZSB0ZXh0IG9mIHRoZSBub2RlIChzdHJpbmcgb3IgbnVtYmVyKS5cbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgbnVsbH0ga2V5IFRoZSBrZXkgZm9yIHRoaXMgdmlydHVhbCBub2RlLCB1c2VkIHdoZW5cbiAqIGRpZmZpbmcgaXQgYWdhaW5zdCBpdHMgY2hpbGRyZW5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGVbXCJyZWZcIl19IHJlZiBUaGUgcmVmIHByb3BlcnR5IHRoYXQgd2lsbFxuICogcmVjZWl2ZSBhIHJlZmVyZW5jZSB0byBpdHMgY3JlYXRlZCBjaGlsZFxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGtleSwgcmVmKSB7XG5cdC8vIFY4IHNlZW1zIHRvIGJlIGJldHRlciBhdCBkZXRlY3RpbmcgdHlwZSBzaGFwZXMgaWYgdGhlIG9iamVjdCBpcyBhbGxvY2F0ZWQgZnJvbSB0aGUgc2FtZSBjYWxsIHNpdGVcblx0Ly8gRG8gbm90IGlubGluZSBpbnRvIGNyZWF0ZUVsZW1lbnQgYW5kIGNvZXJjZVRvVk5vZGUhXG5cdGNvbnN0IHZub2RlID0ge1xuXHRcdHR5cGUsXG5cdFx0cHJvcHMsXG5cdFx0a2V5LFxuXHRcdHJlZixcblx0XHRfY2hpbGRyZW46IG51bGwsXG5cdFx0X3BhcmVudDogbnVsbCxcblx0XHRfZGVwdGg6IDAsXG5cdFx0X2RvbTogbnVsbCxcblx0XHRfbGFzdERvbUNoaWxkOiBudWxsLFxuXHRcdF9jb21wb25lbnQ6IG51bGwsXG5cdFx0Y29uc3RydWN0b3I6IHVuZGVmaW5lZFxuXHR9O1xuXG5cdGlmIChvcHRpb25zLnZub2RlKSBvcHRpb25zLnZub2RlKHZub2RlKTtcblxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG5cdHJldHVybiB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZyYWdtZW50KHByb3BzKSB7XG5cdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRoZSBhcmd1bWVudCBpcyBhIHZhbGlkIFByZWFjdCBWTm9kZS5cbiAqIEBwYXJhbSB7Kn0gdm5vZGVcbiAqIEByZXR1cm5zIHt2bm9kZSBpcyBpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVmFsaWRFbGVtZW50ID0gdm5vZGUgPT5cblx0dm5vZGUgIT0gbnVsbCAmJiB2bm9kZS5jb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IGRpZmYsIGNvbW1pdFJvb3QgfSBmcm9tICcuL2RpZmYvaW5kZXgnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5cbi8qKlxuICogQmFzZSBDb21wb25lbnQgY2xhc3MuIFByb3ZpZGVzIGBzZXRTdGF0ZSgpYCBhbmQgYGZvcmNlVXBkYXRlKClgLCB3aGljaFxuICogdHJpZ2dlciByZW5kZXJpbmdcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBUaGUgaW5pdGlhbCBjb21wb25lbnQgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBpbml0aWFsIGNvbnRleHQgZnJvbSBwYXJlbnQgY29tcG9uZW50cydcbiAqIGdldENoaWxkQ29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KSB7XG5cdHRoaXMucHJvcHMgPSBwcm9wcztcblx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBVcGRhdGUgY29tcG9uZW50IHN0YXRlIGFuZCBzY2hlZHVsZSBhIHJlLXJlbmRlci5cbiAqIEBwYXJhbSB7b2JqZWN0IHwgKChzOiBvYmplY3QsIHA6IG9iamVjdCkgPT4gb2JqZWN0KX0gdXBkYXRlIEEgaGFzaCBvZiBzdGF0ZVxuICogcHJvcGVydGllcyB0byB1cGRhdGUgd2l0aCBuZXcgdmFsdWVzIG9yIGEgZnVuY3Rpb24gdGhhdCBnaXZlbiB0aGUgY3VycmVudFxuICogc3RhdGUgYW5kIHByb3BzIHJldHVybnMgYSBuZXcgcGFydGlhbCBzdGF0ZVxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uY2UgY29tcG9uZW50IHN0YXRlIGlzXG4gKiB1cGRhdGVkXG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbih1cGRhdGUsIGNhbGxiYWNrKSB7XG5cdC8vIG9ubHkgY2xvbmUgc3RhdGUgd2hlbiBjb3B5aW5nIHRvIG5leHRTdGF0ZSB0aGUgZmlyc3QgdGltZS5cblx0bGV0IHM7XG5cdGlmICh0aGlzLl9uZXh0U3RhdGUgIT09IHRoaXMuc3RhdGUpIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSB0aGlzLl9uZXh0U3RhdGUgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiB1cGRhdGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZShzLCB0aGlzLnByb3BzKTtcblx0fVxuXG5cdGlmICh1cGRhdGUpIHtcblx0XHRhc3NpZ24ocywgdXBkYXRlKTtcblx0fVxuXG5cdC8vIFNraXAgdXBkYXRlIGlmIHVwZGF0ZXIgZnVuY3Rpb24gcmV0dXJuZWQgbnVsbFxuXHRpZiAodXBkYXRlID09IG51bGwpIHJldHVybjtcblxuXHRpZiAodGhpcy5fdm5vZGUpIHtcblx0XHR0aGlzLl9mb3JjZSA9IGZhbHNlO1xuXHRcdGlmIChjYWxsYmFjaykgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcdGVucXVldWVSZW5kZXIodGhpcyk7XG5cdH1cbn07XG5cbi8qKlxuICogSW1tZWRpYXRlbHkgcGVyZm9ybSBhIHN5bmNocm9ub3VzIHJlLXJlbmRlciBvZiB0aGUgY29tcG9uZW50XG4gKiBAcGFyYW0geygpID0+IHZvaWR9IFtjYWxsYmFja10gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgY29tcG9uZW50IGlzXG4gKiByZS1yZW5kZXJlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0aWYgKHRoaXMuX3Zub2RlKSB7XG5cdFx0Ly8gU2V0IHJlbmRlciBtb2RlIHNvIHRoYXQgd2UgY2FuIGRpZmZlcmVudGlhdGUgd2hlcmUgdGhlIHJlbmRlciByZXF1ZXN0XG5cdFx0Ly8gaXMgY29taW5nIGZyb20uIFdlIG5lZWQgdGhpcyBiZWNhdXNlIGZvcmNlVXBkYXRlIHNob3VsZCBuZXZlciBjYWxsXG5cdFx0Ly8gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG5cdFx0dGhpcy5fZm9yY2UgPSB0cnVlO1xuXHRcdGlmIChjYWxsYmFjaykgdGhpcy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHRcdGVucXVldWVSZW5kZXIodGhpcyk7XG5cdH1cbn07XG5cbi8qKlxuICogQWNjZXB0cyBgcHJvcHNgIGFuZCBgc3RhdGVgLCBhbmQgcmV0dXJucyBhIG5ldyBWaXJ0dWFsIERPTSB0cmVlIHRvIGJ1aWxkLlxuICogVmlydHVhbCBET00gaXMgZ2VuZXJhbGx5IGNvbnN0cnVjdGVkIHZpYSBbSlNYXShodHRwOi8vamFzb25mb3JtYXQuY29tL3d0Zi1pcy1qc3gpLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIFByb3BzIChlZzogSlNYIGF0dHJpYnV0ZXMpIHJlY2VpdmVkIGZyb20gcGFyZW50XG4gKiBlbGVtZW50L2NvbXBvbmVudFxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIFRoZSBjb21wb25lbnQncyBjdXJyZW50IHN0YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBDb250ZXh0IG9iamVjdCwgYXMgcmV0dXJuZWQgYnkgdGhlIG5lYXJlc3RcbiAqIGFuY2VzdG9yJ3MgYGdldENoaWxkQ29udGV4dCgpYFxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbmRleCcpLkNvbXBvbmVudENoaWxkcmVuIHwgdm9pZH1cbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBGcmFnbWVudDtcblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZVxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsfSBbY2hpbGRJbmRleF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvbVNpYmxpbmcodm5vZGUsIGNoaWxkSW5kZXgpIHtcblx0aWYgKGNoaWxkSW5kZXggPT0gbnVsbCkge1xuXHRcdC8vIFVzZSBjaGlsZEluZGV4PT1udWxsIGFzIGEgc2lnbmFsIHRvIHJlc3VtZSB0aGUgc2VhcmNoIGZyb20gdGhlIHZub2RlJ3Mgc2libGluZ1xuXHRcdHJldHVybiB2bm9kZS5fcGFyZW50XG5cdFx0XHQ/IGdldERvbVNpYmxpbmcodm5vZGUuX3BhcmVudCwgdm5vZGUuX3BhcmVudC5fY2hpbGRyZW4uaW5kZXhPZih2bm9kZSkgKyAxKVxuXHRcdFx0OiBudWxsO1xuXHR9XG5cblx0bGV0IHNpYmxpbmc7XG5cdGZvciAoOyBjaGlsZEluZGV4IDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgY2hpbGRJbmRleCsrKSB7XG5cdFx0c2libGluZyA9IHZub2RlLl9jaGlsZHJlbltjaGlsZEluZGV4XTtcblxuXHRcdGlmIChzaWJsaW5nICE9IG51bGwgJiYgc2libGluZy5fZG9tICE9IG51bGwpIHtcblx0XHRcdC8vIFNpbmNlIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzIGtlZXBzIF9kb20gcG9pbnRlciBjb3JyZWN0LFxuXHRcdFx0Ly8gd2UgY2FuIHJlbHkgb24gX2RvbSB0byB0ZWxsIHVzIGlmIHRoaXMgc3VidHJlZSBjb250YWlucyBhXG5cdFx0XHQvLyByZW5kZXJlZCBET00gbm9kZSwgYW5kIHdoYXQgdGhlIGZpcnN0IHJlbmRlcmVkIERPTSBub2RlIGlzXG5cdFx0XHRyZXR1cm4gc2libGluZy5fZG9tO1xuXHRcdH1cblx0fVxuXG5cdC8vIElmIHdlIGdldCBoZXJlLCB3ZSBoYXZlIG5vdCBmb3VuZCBhIERPTSBub2RlIGluIHRoaXMgdm5vZGUncyBjaGlsZHJlbi5cblx0Ly8gV2UgbXVzdCByZXN1bWUgZnJvbSB0aGlzIHZub2RlJ3Mgc2libGluZyAoaW4gaXQncyBwYXJlbnQgX2NoaWxkcmVuIGFycmF5KVxuXHQvLyBPbmx5IGNsaW1iIHVwIGFuZCBzZWFyY2ggdGhlIHBhcmVudCBpZiB3ZSBhcmVuJ3Qgc2VhcmNoaW5nIHRocm91Z2ggYSBET01cblx0Ly8gVk5vZGUgKG1lYW5pbmcgd2UgcmVhY2hlZCB0aGUgRE9NIHBhcmVudCBvZiB0aGUgb3JpZ2luYWwgdm5vZGUgdGhhdCBiZWdhblxuXHQvLyB0aGUgc2VhcmNoKVxuXHRyZXR1cm4gdHlwZW9mIHZub2RlLnR5cGUgPT09ICdmdW5jdGlvbicgPyBnZXREb21TaWJsaW5nKHZub2RlKSA6IG51bGw7XG59XG5cbi8qKlxuICogVHJpZ2dlciBpbi1wbGFjZSByZS1yZW5kZXJpbmcgb2YgYSBjb21wb25lbnQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXHRsZXQgdm5vZGUgPSBjb21wb25lbnQuX3Zub2RlLFxuXHRcdG9sZERvbSA9IHZub2RlLl9kb20sXG5cdFx0cGFyZW50RG9tID0gY29tcG9uZW50Ll9wYXJlbnREb207XG5cblx0aWYgKHBhcmVudERvbSkge1xuXHRcdGxldCBjb21taXRRdWV1ZSA9IFtdO1xuXHRcdGxldCBuZXdEb20gPSBkaWZmKFxuXHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0dm5vZGUsXG5cdFx0XHRhc3NpZ24oe30sIHZub2RlKSxcblx0XHRcdGNvbXBvbmVudC5fY29udGV4dCxcblx0XHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHRcdG51bGwsXG5cdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdG9sZERvbSA9PSBudWxsID8gZ2V0RG9tU2libGluZyh2bm9kZSkgOiBvbGREb21cblx0XHQpO1xuXHRcdGNvbW1pdFJvb3QoY29tbWl0UXVldWUsIHZub2RlKTtcblxuXHRcdGlmIChuZXdEb20gIT0gb2xkRG9tKSB7XG5cdFx0XHR1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpIHtcblx0aWYgKCh2bm9kZSA9IHZub2RlLl9wYXJlbnQpICE9IG51bGwgJiYgdm5vZGUuX2NvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IG51bGw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBjaGlsZCA9IHZub2RlLl9jaGlsZHJlbltpXTtcblx0XHRcdGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkLl9kb20gIT0gbnVsbCkge1xuXHRcdFx0XHR2bm9kZS5fZG9tID0gdm5vZGUuX2NvbXBvbmVudC5iYXNlID0gY2hpbGQuX2RvbTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSByZW5kZXIgcXVldWVcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fVxuICovXG5sZXQgcSA9IFtdO1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNjaGVkdWxlIGEgY2FsbGJhY2tcbiAqIEB0eXBlIHsoY2I6ICgpID0+IHZvaWQpID0+IHZvaWR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vLyBOb3RlIHRoZSBmb2xsb3dpbmcgbGluZSBpc24ndCB0cmVlLXNoYWtlbiBieSByb2xsdXAgY3V6IG9mIHJvbGx1cC9yb2xsdXAjMjU2NlxuY29uc3QgZGVmZXIgPVxuXHR0eXBlb2YgUHJvbWlzZSA9PSAnZnVuY3Rpb24nXG5cdFx0PyBQcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpXG5cdFx0OiBzZXRUaW1lb3V0O1xuXG4vKlxuICogVGhlIHZhbHVlIG9mIGBDb21wb25lbnQuZGVib3VuY2VgIG11c3QgYXN5bmNocm9ub3VzbHkgaW52b2tlIHRoZSBwYXNzZWQgaW4gY2FsbGJhY2suIEl0IGlzXG4gKiBpbXBvcnRhbnQgdGhhdCBjb250cmlidXRvcnMgdG8gUHJlYWN0IGNhbiBjb25zaXN0ZW50bHkgcmVhc29uIGFib3V0IHdoYXQgY2FsbHMgdG8gYHNldFN0YXRlYCwgZXRjLlxuICogZG8sIGFuZCB3aGVuIHRoZWlyIGVmZmVjdHMgd2lsbCBiZSBhcHBsaWVkLiBTZWUgdGhlIGxpbmtzIGJlbG93IGZvciBzb21lIGZ1cnRoZXIgcmVhZGluZyBvbiBkZXNpZ25pbmdcbiAqIGFzeW5jaHJvbm91cyBBUElzLlxuICogKiBbRGVzaWduaW5nIEFQSXMgZm9yIEFzeW5jaHJvbnldKGh0dHBzOi8vYmxvZy5penMubWUvMjAxMy8wOC9kZXNpZ25pbmctYXBpcy1mb3ItYXN5bmNocm9ueSlcbiAqICogW0NhbGxiYWNrcyBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzXShodHRwczovL2Jsb2cub21ldGVyLmNvbS8yMDExLzA3LzI0L2NhbGxiYWNrcy1zeW5jaHJvbm91cy1hbmQtYXN5bmNocm9ub3VzLylcbiAqL1xuXG5sZXQgcHJldkRlYm91bmNlO1xuXG4vKipcbiAqIEVucXVldWUgYSByZXJlbmRlciBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGMgVGhlIGNvbXBvbmVudCB0byByZXJlbmRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZVJlbmRlcihjKSB7XG5cdGlmIChcblx0XHQoIWMuX2RpcnR5ICYmIChjLl9kaXJ0eSA9IHRydWUpICYmIHEucHVzaChjKSA9PT0gMSkgfHxcblx0XHRwcmV2RGVib3VuY2UgIT09IG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmdcblx0KSB7XG5cdFx0cHJldkRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZVJlbmRlcmluZztcblx0XHQocHJldkRlYm91bmNlIHx8IGRlZmVyKShwcm9jZXNzKTtcblx0fVxufVxuXG4vKiogRmx1c2ggdGhlIHJlbmRlciBxdWV1ZSBieSByZXJlbmRlcmluZyBhbGwgcXVldWVkIGNvbXBvbmVudHMgKi9cbmZ1bmN0aW9uIHByb2Nlc3MoKSB7XG5cdGxldCBwO1xuXHRxLnNvcnQoKGEsIGIpID0+IGIuX3Zub2RlLl9kZXB0aCAtIGEuX3Zub2RlLl9kZXB0aCk7XG5cdHdoaWxlICgocCA9IHEucG9wKCkpKSB7XG5cdFx0Ly8gZm9yY2VVcGRhdGUncyBjYWxsYmFjayBhcmd1bWVudCBpcyByZXVzZWQgaGVyZSB0byBpbmRpY2F0ZSBhIG5vbi1mb3JjZWQgdXBkYXRlLlxuXHRcdGlmIChwLl9kaXJ0eSkgcmVuZGVyQ29tcG9uZW50KHApO1xuXHR9XG59XG4iLCJpbXBvcnQge1xuXHRyZW5kZXIgYXMgcHJlYWN0UmVuZGVyLFxuXHRvcHRpb25zLFxuXHR0b0NoaWxkQXJyYXksXG5cdENvbXBvbmVudFxufSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgYXBwbHlFdmVudE5vcm1hbGl6YXRpb24gfSBmcm9tICcuL2V2ZW50cyc7XG5cbmNvbnN0IENBTUVMX1BST1BTID0gL14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcHxjb2xvcnxmaWxsfGZsb29kfGZvbnR8Z2x5cGh8aG9yaXp8bWFya2VyfG92ZXJsaW5lfHBhaW50fHN0b3B8c3RyaWtldGhyb3VnaHxzdHJva2V8dGV4dHx1bmRlcmxpbmV8dW5pY29kZXx1bml0c3x2fHZlY3Rvcnx2ZXJ0fHdvcmR8d3JpdGluZ3x4KVtBLVpdLztcblxuLy8gU29tZSBsaWJyYXJpZXMgbGlrZSBgcmVhY3QtdmlydHVhbGl6ZWRgIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoaXMuXG5Db21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBSRUFDVF9FTEVNRU5UX1RZUEUgPVxuXHQodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRTeW1ib2wuZm9yICYmXG5cdFx0U3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuXHQweGVhYzc7XG5cbi8qKlxuICogUHJveHkgcmVuZGVyKCkgc2luY2UgUmVhY3QgcmV0dXJucyBhIENvbXBvbmVudCByZWZlcmVuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBWTm9kZSB0cmVlIHRvIHJlbmRlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnQgRE9NIG5vZGUgdG8gcmVuZGVyIHZub2RlIHRyZWUgaW50b1xuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIE9wdGlvbmFsIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgcmVuZGVyaW5nXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50IHwgbnVsbH0gVGhlIHJvb3QgY29tcG9uZW50IHJlZmVyZW5jZSBvciBudWxsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIodm5vZGUsIHBhcmVudCwgY2FsbGJhY2spIHtcblx0Ly8gUmVhY3QgZGVzdHJveXMgYW55IGV4aXN0aW5nIERPTSBub2Rlcywgc2VlICMxNzI3XG5cdC8vIC4uLmJ1dCBvbmx5IG9uIHRoZSBmaXJzdCByZW5kZXIsIHNlZSAjMTgyOFxuXHRpZiAocGFyZW50Ll9jaGlsZHJlbiA9PSBudWxsKSB7XG5cdFx0d2hpbGUgKHBhcmVudC5maXJzdENoaWxkKSB7XG5cdFx0XHRwYXJlbnQucmVtb3ZlQ2hpbGQocGFyZW50LmZpcnN0Q2hpbGQpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBoeWRyYXRlKHZub2RlLCBwYXJlbnQsIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGUodm5vZGUsIHBhcmVudCwgY2FsbGJhY2spIHtcblx0cHJlYWN0UmVuZGVyKHZub2RlLCBwYXJlbnQpO1xuXHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuXG5cdHJldHVybiB2bm9kZSA/IHZub2RlLl9jb21wb25lbnQgOiBudWxsO1xufVxuXG5sZXQgb2xkRXZlbnRIb29rID0gb3B0aW9ucy5ldmVudDtcbm9wdGlvbnMuZXZlbnQgPSBlID0+IHtcblx0aWYgKG9sZEV2ZW50SG9vaykgZSA9IG9sZEV2ZW50SG9vayhlKTtcblx0ZS5wZXJzaXN0ID0gKCkgPT4ge307XG5cdHJldHVybiAoZS5uYXRpdmVFdmVudCA9IGUpO1xufTtcblxuLy8gUGF0Y2ggaW4gYFVOU0FGRV8qYCBsaWZlY3ljbGUgaG9va3NcbmZ1bmN0aW9uIHNldFNhZmVEZXNjcmlwdG9yKHByb3RvLCBrZXkpIHtcblx0aWYgKHByb3RvWydVTlNBRkVfJyArIGtleV0gJiYgIXByb3RvW2tleV0pIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIGtleSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldCgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXNbJ1VOU0FGRV8nICsga2V5XTtcblx0XHRcdH0sXG5cdFx0XHQvLyBUaGlzIGBzZXRgIGlzIG9ubHkgdXNlZCBpZiBhIHVzZXIgc2V0cyBhIGxpZmVjeWNsZSBsaWtlIGNXVVxuXHRcdFx0Ly8gYWZ0ZXIgc2V0dGluZyBhIGxpZmVjeWNsZSBsaWtlIFVOU0FGRV9jV1UuIEkgZG91YnQgYW55b25lXG5cdFx0XHQvLyBhY3R1YWxseSBkb2VzIHRoaXMgaW4gcHJhY3RpY2Ugc28gbm90IHRlc3RpbmcgaXRcblx0XHRcdC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdFx0XHRzZXQodikge1xuXHRcdFx0XHR0aGlzWydVTlNBRkVfJyArIGtleV0gPSB2O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmxldCBjbGFzc05hbWVEZXNjcmlwdG9yID0ge1xuXHRjb25maWd1cmFibGU6IHRydWUsXG5cdGdldCgpIHtcblx0XHRyZXR1cm4gdGhpcy5jbGFzcztcblx0fVxufTtcblxubGV0IG9sZFZOb2RlSG9vayA9IG9wdGlvbnMudm5vZGU7XG5vcHRpb25zLnZub2RlID0gdm5vZGUgPT4ge1xuXHR2bm9kZS4kJHR5cGVvZiA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcblxuXHRsZXQgdHlwZSA9IHZub2RlLnR5cGU7XG5cdGxldCBwcm9wcyA9IHZub2RlLnByb3BzO1xuXG5cdC8vIEFwcGx5IERPTSBWTm9kZSBjb21wYXRcblx0aWYgKHR5cGVvZiB0eXBlICE9ICdmdW5jdGlvbicpIHtcblx0XHQvLyBBcHBseSBkZWZhdWx0VmFsdWUgdG8gdmFsdWVcblx0XHRpZiAocHJvcHMuZGVmYXVsdFZhbHVlKSB7XG5cdFx0XHRpZiAoIXByb3BzLnZhbHVlICYmIHByb3BzLnZhbHVlICE9PSAwKSB7XG5cdFx0XHRcdHByb3BzLnZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHByb3BzLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgc3VwcG9ydCBmb3IgYXJyYXkgc2VsZWN0IHZhbHVlczogPHNlbGVjdCB2YWx1ZT17W119IC8+XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUpICYmIHByb3BzLm11bHRpcGxlICYmIHR5cGUgPT09ICdzZWxlY3QnKSB7XG5cdFx0XHR0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZvckVhY2goY2hpbGQgPT4ge1xuXHRcdFx0XHRpZiAocHJvcHMudmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSkgIT0gLTEpIHtcblx0XHRcdFx0XHRjaGlsZC5wcm9wcy5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0ZGVsZXRlIHByb3BzLnZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIE5vcm1hbGl6ZSBET00gdm5vZGUgcHJvcGVydGllcy5cblx0XHRsZXQgc2hvdWxkU2FuaXRpemUsIGF0dHJzLCBpO1xuXHRcdGZvciAoaSBpbiBwcm9wcykgaWYgKChzaG91bGRTYW5pdGl6ZSA9IENBTUVMX1BST1BTLnRlc3QoaSkpKSBicmVhaztcblx0XHRpZiAoc2hvdWxkU2FuaXRpemUpIHtcblx0XHRcdGF0dHJzID0gdm5vZGUucHJvcHMgPSB7fTtcblx0XHRcdGZvciAoaSBpbiBwcm9wcykge1xuXHRcdFx0XHRhdHRyc1tcblx0XHRcdFx0XHRDQU1FTF9QUk9QUy50ZXN0KGkpID8gaS5yZXBsYWNlKC8oW0EtWjAtOV0pLywgJy0kMScpLnRvTG93ZXJDYXNlKCkgOiBpXG5cdFx0XHRcdF0gPSBwcm9wc1tpXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGlhcyBgY2xhc3NgIHByb3AgdG8gYGNsYXNzTmFtZWAgaWYgYXZhaWxhYmxlXG5cdGlmIChwcm9wcy5jbGFzcyB8fCBwcm9wcy5jbGFzc05hbWUpIHtcblx0XHRjbGFzc05hbWVEZXNjcmlwdG9yLmVudW1lcmFibGUgPSAnY2xhc3NOYW1lJyBpbiBwcm9wcztcblx0XHRpZiAocHJvcHMuY2xhc3NOYW1lKSBwcm9wcy5jbGFzcyA9IHByb3BzLmNsYXNzTmFtZTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdjbGFzc05hbWUnLCBjbGFzc05hbWVEZXNjcmlwdG9yKTtcblx0fVxuXG5cdC8vIEV2ZW50c1xuXHRhcHBseUV2ZW50Tm9ybWFsaXphdGlvbih2bm9kZSk7XG5cblx0Ly8gQ29tcG9uZW50IGJhc2UgY2xhc3MgY29tcGF0XG5cdC8vIFdlIGNhbid0IGp1c3QgcGF0Y2ggdGhlIGJhc2UgY29tcG9uZW50IGNsYXNzLCBiZWNhdXNlIGNvbXBvbmVudHMgdGhhdCB1c2Vcblx0Ly8gaW5oZXJpdGFuY2UgYW5kIGFyZSB0cmFuc3BpbGVkIGRvd24gdG8gRVM1IHdpbGwgb3ZlcndyaXRlIG91ciBwYXRjaGVkXG5cdC8vIGdldHRlcnMgYW5kIHNldHRlcnMuIFNlZSAjMTk0MVxuXHRpZiAoXG5cdFx0dHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiZcblx0XHQhdHlwZS5fcGF0Y2hlZExpZmVjeWNsZXMgJiZcblx0XHR0eXBlLnByb3RvdHlwZVxuXHQpIHtcblx0XHRzZXRTYWZlRGVzY3JpcHRvcih0eXBlLnByb3RvdHlwZSwgJ2NvbXBvbmVudFdpbGxNb3VudCcpO1xuXHRcdHNldFNhZmVEZXNjcmlwdG9yKHR5cGUucHJvdG90eXBlLCAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpO1xuXHRcdHNldFNhZmVEZXNjcmlwdG9yKHR5cGUucHJvdG90eXBlLCAnY29tcG9uZW50V2lsbFVwZGF0ZScpO1xuXHRcdHR5cGUuX3BhdGNoZWRMaWZlY3ljbGVzID0gdHJ1ZTtcblx0fVxuXG5cdGlmIChvbGRWTm9kZUhvb2spIG9sZFZOb2RlSG9vayh2bm9kZSk7XG59O1xuIiwiaW1wb3J0IHsgZW5xdWV1ZVJlbmRlciB9IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGxldCBpID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlKSB7XG5cdGNvbnN0IGN0eCA9IHt9O1xuXG5cdGNvbnN0IGNvbnRleHQgPSB7XG5cdFx0X2lkOiAnX19jQycgKyBpKyssXG5cdFx0X2RlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuXHRcdENvbnN1bWVyKHByb3BzLCBjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gcHJvcHMuY2hpbGRyZW4oY29udGV4dCk7XG5cdFx0fSxcblx0XHRQcm92aWRlcihwcm9wcykge1xuXHRcdFx0aWYgKCF0aGlzLmdldENoaWxkQ29udGV4dCkge1xuXHRcdFx0XHRjb25zdCBzdWJzID0gW107XG5cdFx0XHRcdHRoaXMuZ2V0Q2hpbGRDb250ZXh0ID0gKCkgPT4ge1xuXHRcdFx0XHRcdGN0eFtjb250ZXh0Ll9pZF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJldHVybiBjdHg7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gX3Byb3BzID0+IHtcblx0XHRcdFx0XHRpZiAocHJvcHMudmFsdWUgIT09IF9wcm9wcy52YWx1ZSkge1xuXHRcdFx0XHRcdFx0c3Vicy5zb21lKGMgPT4ge1xuXHRcdFx0XHRcdFx0XHRjLmNvbnRleHQgPSBfcHJvcHMudmFsdWU7XG5cdFx0XHRcdFx0XHRcdGVucXVldWVSZW5kZXIoYyk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMuc3ViID0gYyA9PiB7XG5cdFx0XHRcdFx0c3Vicy5wdXNoKGMpO1xuXHRcdFx0XHRcdGxldCBvbGQgPSBjLmNvbXBvbmVudFdpbGxVbm1vdW50O1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbFVubW91bnQgPSAoKSA9PiB7XG5cdFx0XHRcdFx0XHRzdWJzLnNwbGljZShzdWJzLmluZGV4T2YoYyksIDEpO1xuXHRcdFx0XHRcdFx0b2xkICYmIG9sZC5jYWxsKGMpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG5cdFx0fVxuXHR9O1xuXG5cdGNvbnRleHQuQ29uc3VtZXIuY29udGV4dFR5cGUgPSBjb250ZXh0O1xuXG5cdHJldHVybiBjb250ZXh0O1xufVxuIiwiLyoqXG4gKiBBc3NpZ24gcHJvcGVydGllcyBmcm9tIGBwcm9wc2AgdG8gYG9iamBcbiAqIEB0ZW1wbGF0ZSBPLCBQIFRoZSBvYmogYW5kIHByb3BzIHR5cGVzXG4gKiBAcGFyYW0ge099IG9iaiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0b1xuICogQHBhcmFtIHtQfSBwcm9wcyBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcmV0dXJucyB7TyAmIFB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24ob2JqLCBwcm9wcykge1xuXHRmb3IgKGxldCBpIGluIHByb3BzKSBvYmpbaV0gPSBwcm9wc1tpXTtcblx0cmV0dXJuIC8qKiBAdHlwZSB7TyAmIFB9ICovIChvYmopO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHR3byBvYmplY3RzIGhhdmUgYSBkaWZmZXJlbnQgc2hhcGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBhXG4gKiBAcGFyYW0ge29iamVjdH0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93RGlmZmVycyhhLCBiKSB7XG5cdGZvciAobGV0IGkgaW4gYSkgaWYgKGkgIT09ICdfX3NvdXJjZScgJiYgIShpIGluIGIpKSByZXR1cm4gdHJ1ZTtcblx0Zm9yIChsZXQgaSBpbiBiKSBpZiAoaSAhPT0gJ19fc291cmNlJyAmJiBhW2ldICE9PSBiW2ldKSByZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgZGlmZiwgdW5tb3VudCwgYXBwbHlSZWYgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZVZOb2RlIH0gZnJvbSAnLi4vY3JlYXRlLWVsZW1lbnQnO1xuaW1wb3J0IHsgRU1QVFlfT0JKLCBFTVBUWV9BUlIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcmVtb3ZlTm9kZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgZ2V0RG9tU2libGluZyB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5cbi8qKlxuICogRGlmZiB0aGUgY2hpbGRyZW4gb2YgYSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgRE9NIGVsZW1lbnQgd2hvc2VcbiAqIGNoaWxkcmVuIGFyZSBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdQYXJlbnRWTm9kZSBUaGUgbmV3IHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBvbGRQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFBhcmVudFZOb2RlIFRoZSBvbGQgdmlydHVhbFxuICogbm9kZSB3aG9zZSBjaGlsZHJlbiBzaG91bGQgYmUgZGlmZidlZCBhZ2FpbnN0IG5ld1BhcmVudFZOb2RlXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50Pn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7Tm9kZSB8IFRleHR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET01cbiAqIGVsZW1lbnQgYW55IG5ldyBkb20gZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3RcbiAqIHJlbmRlciAoZXhjZXB0IHdoZW4gaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmdcbiAqIEZyYWdtZW50cyB0aGF0IGhhdmUgc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBpc0h5ZHJhdGluZyBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmQ2hpbGRyZW4oXG5cdHBhcmVudERvbSxcblx0bmV3UGFyZW50Vk5vZGUsXG5cdG9sZFBhcmVudFZOb2RlLFxuXHRjb250ZXh0LFxuXHRpc1N2Zyxcblx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdGNvbW1pdFF1ZXVlLFxuXHRvbGREb20sXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGksIGosIG9sZFZOb2RlLCBuZXdEb20sIHNpYkRvbSwgZmlyc3RDaGlsZERvbSwgcmVmcztcblxuXHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2Ygb2xkUGFyZW50Vk5vZGUhPW51bGwgJiYgb2xkUGFyZW50Vk5vZGUgIT0gRU1QVFlfT0JKICYmIG9sZFBhcmVudFZOb2RlLl9jaGlsZHJlbiB8fCBFTVBUWV9BUlJcblx0Ly8gYXMgRU1QVFlfT0JKLl9jaGlsZHJlbiBzaG91bGQgYmUgYHVuZGVmaW5lZGAuXG5cdGxldCBvbGRDaGlsZHJlbiA9IChvbGRQYXJlbnRWTm9kZSAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4pIHx8IEVNUFRZX0FSUjtcblxuXHRsZXQgb2xkQ2hpbGRyZW5MZW5ndGggPSBvbGRDaGlsZHJlbi5sZW5ndGg7XG5cblx0Ly8gT25seSBpbiB2ZXJ5IHNwZWNpZmljIHBsYWNlcyBzaG91bGQgdGhpcyBsb2dpYyBiZSBpbnZva2VkICh0b3AgbGV2ZWwgYHJlbmRlcmAgYW5kIGBkaWZmRWxlbWVudE5vZGVzYCkuXG5cdC8vIEknbSB1c2luZyBgRU1QVFlfT0JKYCB0byBzaWduYWwgd2hlbiBgZGlmZkNoaWxkcmVuYCBpcyBpbnZva2VkIGluIHRoZXNlIHNpdHVhdGlvbnMuIEkgY2FuJ3QgdXNlIGBudWxsYFxuXHQvLyBmb3IgdGhpcyBwdXJwb3NlLCBiZWNhdXNlIGBudWxsYCBpcyBhIHZhbGlkIHZhbHVlIGZvciBgb2xkRG9tYCB3aGljaCBjYW4gbWVhbiB0byBza2lwIHRvIHRoaXMgbG9naWNcblx0Ly8gKGUuZy4gaWYgbW91bnRpbmcgYSBuZXcgdHJlZSBpbiB3aGljaCB0aGUgb2xkIERPTSBzaG91bGQgYmUgaWdub3JlZCAodXN1YWxseSBmb3IgRnJhZ21lbnRzKS5cblx0aWYgKG9sZERvbSA9PSBFTVBUWV9PQkopIHtcblx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0b2xkRG9tID0gZXhjZXNzRG9tQ2hpbGRyZW5bMF07XG5cdFx0fSBlbHNlIGlmIChvbGRDaGlsZHJlbkxlbmd0aCkge1xuXHRcdFx0b2xkRG9tID0gZ2V0RG9tU2libGluZyhvbGRQYXJlbnRWTm9kZSwgMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9sZERvbSA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0aSA9IDA7XG5cdG5ld1BhcmVudFZOb2RlLl9jaGlsZHJlbiA9IHRvQ2hpbGRBcnJheShcblx0XHRuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW4sXG5cdFx0Y2hpbGRWTm9kZSA9PiB7XG5cdFx0XHRpZiAoY2hpbGRWTm9kZSAhPSBudWxsKSB7XG5cdFx0XHRcdGNoaWxkVk5vZGUuX3BhcmVudCA9IG5ld1BhcmVudFZOb2RlO1xuXHRcdFx0XHRjaGlsZFZOb2RlLl9kZXB0aCA9IG5ld1BhcmVudFZOb2RlLl9kZXB0aCArIDE7XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgZmluZCBhIGNvcnJlc3BvbmRpbmcgZWxlbWVudCBpbiBvbGRDaGlsZHJlbi5cblx0XHRcdFx0Ly8gSWYgZm91bmQsIGRlbGV0ZSB0aGUgYXJyYXkgaXRlbSBieSBzZXR0aW5nIHRvIGB1bmRlZmluZWRgLlxuXHRcdFx0XHQvLyBXZSB1c2UgYHVuZGVmaW5lZGAsIGFzIGBudWxsYCBpcyByZXNlcnZlZCBmb3IgZW1wdHkgcGxhY2Vob2xkZXJzXG5cdFx0XHRcdC8vIChob2xlcykuXG5cdFx0XHRcdG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5baV07XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG9sZFZOb2RlID09PSBudWxsIHx8XG5cdFx0XHRcdFx0KG9sZFZOb2RlICYmXG5cdFx0XHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0b2xkQ2hpbGRyZW5baV0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gRWl0aGVyIG9sZFZOb2RlID09PSB1bmRlZmluZWQgb3Igb2xkQ2hpbGRyZW5MZW5ndGggPiAwLFxuXHRcdFx0XHRcdC8vIHNvIGFmdGVyIHRoaXMgbG9vcCBvbGRWTm9kZSA9PSBudWxsIG9yIG9sZFZOb2RlIGlzIGEgdmFsaWQgdmFsdWUuXG5cdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG9sZENoaWxkcmVuTGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5bal07XG5cdFx0XHRcdFx0XHQvLyBJZiBjaGlsZFZOb2RlIGlzIHVua2V5ZWQsIHdlIG9ubHkgbWF0Y2ggc2ltaWxhcmx5IHVua2V5ZWQgbm9kZXMsIG90aGVyd2lzZSB3ZSBtYXRjaCBieSBrZXkuXG5cdFx0XHRcdFx0XHQvLyBXZSBhbHdheXMgbWF0Y2ggYnkgdHlwZSAoaW4gZWl0aGVyIGNhc2UpLlxuXHRcdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0XHRvbGRWTm9kZSAmJlxuXHRcdFx0XHRcdFx0XHRjaGlsZFZOb2RlLmtleSA9PSBvbGRWTm9kZS5rZXkgJiZcblx0XHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS50eXBlID09PSBvbGRWTm9kZS50eXBlXG5cdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0b2xkQ2hpbGRyZW5bal0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0b2xkVk5vZGUgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9sZFZOb2RlID0gb2xkVk5vZGUgfHwgRU1QVFlfT0JKO1xuXG5cdFx0XHRcdC8vIE1vcnBoIHRoZSBvbGQgZWxlbWVudCBpbnRvIHRoZSBuZXcgb25lLCBidXQgZG9uJ3QgYXBwZW5kIGl0IHRvIHRoZSBkb20geWV0XG5cdFx0XHRcdG5ld0RvbSA9IGRpZmYoXG5cdFx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRcdGNoaWxkVk5vZGUsXG5cdFx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0XHRpc1N2Zyxcblx0XHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0XHRvbGREb20sXG5cdFx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoKGogPSBjaGlsZFZOb2RlLnJlZikgJiYgb2xkVk5vZGUucmVmICE9IGopIHtcblx0XHRcdFx0XHRpZiAoIXJlZnMpIHJlZnMgPSBbXTtcblx0XHRcdFx0XHRpZiAob2xkVk5vZGUucmVmKSByZWZzLnB1c2gob2xkVk5vZGUucmVmLCBudWxsLCBjaGlsZFZOb2RlKTtcblx0XHRcdFx0XHRyZWZzLnB1c2goaiwgY2hpbGRWTm9kZS5fY29tcG9uZW50IHx8IG5ld0RvbSwgY2hpbGRWTm9kZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPbmx5IHByb2NlZWQgaWYgdGhlIHZub2RlIGhhcyBub3QgYmVlbiB1bm1vdW50ZWQgYnkgYGRpZmYoKWAgYWJvdmUuXG5cdFx0XHRcdGlmIChuZXdEb20gIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmIChmaXJzdENoaWxkRG9tID09IG51bGwpIHtcblx0XHRcdFx0XHRcdGZpcnN0Q2hpbGREb20gPSBuZXdEb207XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHQvLyBPbmx5IEZyYWdtZW50cyBvciBjb21wb25lbnRzIHRoYXQgcmV0dXJuIEZyYWdtZW50IGxpa2UgVk5vZGVzIHdpbGxcblx0XHRcdFx0XHRcdC8vIGhhdmUgYSBub24tbnVsbCBfbGFzdERvbUNoaWxkLiBDb250aW51ZSB0aGUgZGlmZiBmcm9tIHRoZSBlbmQgb2Zcblx0XHRcdFx0XHRcdC8vIHRoaXMgRnJhZ21lbnQncyBET00gdHJlZS5cblx0XHRcdFx0XHRcdG5ld0RvbSA9IGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZDtcblxuXHRcdFx0XHRcdFx0Ly8gRWFnZXJseSBjbGVhbnVwIF9sYXN0RG9tQ2hpbGQuIFdlIGRvbid0IG5lZWQgdG8gcGVyc2lzdCB0aGUgdmFsdWUgYmVjYXVzZVxuXHRcdFx0XHRcdFx0Ly8gaXQgaXMgb25seSB1c2VkIGJ5IGBkaWZmQ2hpbGRyZW5gIHRvIGRldGVybWluZSB3aGVyZSB0byByZXN1bWUgdGhlIGRpZmYgYWZ0ZXJcblx0XHRcdFx0XHRcdC8vIGRpZmZpbmcgQ29tcG9uZW50cyBhbmQgRnJhZ21lbnRzLlxuXHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS5fbGFzdERvbUNoaWxkID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKFxuXHRcdFx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPT0gb2xkVk5vZGUgfHxcblx0XHRcdFx0XHRcdG5ld0RvbSAhPSBvbGREb20gfHxcblx0XHRcdFx0XHRcdG5ld0RvbS5wYXJlbnROb2RlID09IG51bGxcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdC8vIE5PVEU6IGV4Y2Vzc0RvbUNoaWxkcmVuPT1vbGRWTm9kZSBhYm92ZTpcblx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBjb21wcmVzc2lvbiBvZiBleGNlc3NEb21DaGlsZHJlbj09bnVsbCAmJiBvbGRWTm9kZT09bnVsbCFcblx0XHRcdFx0XHRcdC8vIFRoZSB2YWx1ZXMgb25seSBoYXZlIHRoZSBzYW1lIHR5cGUgd2hlbiBgbnVsbGAuXG5cblx0XHRcdFx0XHRcdG91dGVyOiBpZiAob2xkRG9tID09IG51bGwgfHwgb2xkRG9tLnBhcmVudE5vZGUgIT09IHBhcmVudERvbSkge1xuXHRcdFx0XHRcdFx0XHRwYXJlbnREb20uYXBwZW5kQ2hpbGQobmV3RG9tKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIGBqPG9sZENoaWxkcmVuTGVuZ3RoOyBqKz0yYCBpcyBhbiBhbHRlcm5hdGl2ZSB0byBgaisrPG9sZENoaWxkcmVuTGVuZ3RoLzJgXG5cdFx0XHRcdFx0XHRcdGZvciAoXG5cdFx0XHRcdFx0XHRcdFx0c2liRG9tID0gb2xkRG9tLCBqID0gMDtcblx0XHRcdFx0XHRcdFx0XHQoc2liRG9tID0gc2liRG9tLm5leHRTaWJsaW5nKSAmJiBqIDwgb2xkQ2hpbGRyZW5MZW5ndGg7XG5cdFx0XHRcdFx0XHRcdFx0aiArPSAyXG5cdFx0XHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChzaWJEb20gPT0gbmV3RG9tKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhayBvdXRlcjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cGFyZW50RG9tLmluc2VydEJlZm9yZShuZXdEb20sIG9sZERvbSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEJyb3dzZXJzIHdpbGwgaW5mZXIgYW4gb3B0aW9uJ3MgYHZhbHVlYCBmcm9tIGB0ZXh0Q29udGVudGAgd2hlblxuXHRcdFx0XHRcdFx0Ly8gbm8gdmFsdWUgaXMgcHJlc2VudC4gVGhpcyBlc3NlbnRpYWxseSBieXBhc3NlcyBvdXIgY29kZSB0byBzZXQgaXRcblx0XHRcdFx0XHRcdC8vIGxhdGVyIGluIGBkaWZmKClgLiBJdCB3b3JrcyBmaW5lIGluIGFsbCBicm93c2VycyBleGNlcHQgZm9yIElFMTFcblx0XHRcdFx0XHRcdC8vIHdoZXJlIGl0IGJyZWFrcyBzZXR0aW5nIGBzZWxlY3QudmFsdWVgLiBUaGVyZSBpdCB3aWxsIGJlIGFsd2F5cyBzZXRcblx0XHRcdFx0XHRcdC8vIHRvIGFuIGVtcHR5IHN0cmluZy4gUmUtYXBwbHlpbmcgYW4gb3B0aW9ucyB2YWx1ZSB3aWxsIGZpeCB0aGF0LCBzb1xuXHRcdFx0XHRcdFx0Ly8gdGhlcmUgYXJlIHByb2JhYmx5IHNvbWUgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmVzIHRoYXQgYXJlbid0XG5cdFx0XHRcdFx0XHQvLyB1cGRhdGVkIHByb3Blcmx5LlxuXHRcdFx0XHRcdFx0Ly9cblx0XHRcdFx0XHRcdC8vIFRvIGZpeCBpdCB3ZSBtYWtlIHN1cmUgdG8gcmVzZXQgdGhlIGluZmVycmVkIHZhbHVlLCBzbyB0aGF0IG91ciBvd25cblx0XHRcdFx0XHRcdC8vIHZhbHVlIGNoZWNrIGluIGBkaWZmKClgIHdvbid0IGJlIHNraXBwZWQuXG5cdFx0XHRcdFx0XHRpZiAobmV3UGFyZW50Vk5vZGUudHlwZSA9PSAnb3B0aW9uJykge1xuXHRcdFx0XHRcdFx0XHRwYXJlbnREb20udmFsdWUgPSAnJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvbGREb20gPSBuZXdEb20ubmV4dFNpYmxpbmc7XG5cblx0XHRcdFx0XHRpZiAodHlwZW9mIG5ld1BhcmVudFZOb2RlLnR5cGUgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgaWYgY2hpbGRWTm9kZS5fbGFzdERvbUNoaWxkIGV4aXN0ZWQsIHRoZW5cblx0XHRcdFx0XHRcdC8vIG5ld0RvbSA9IGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCBwZXIgbGluZSAxMDEuIEVsc2UgaXQgaXNcblx0XHRcdFx0XHRcdC8vIHRoZSBzYW1lIGFzIGNoaWxkVk5vZGUuX2RvbSwgbWVhbmluZyB0aGlzIGNvbXBvbmVudCByZXR1cm5lZFxuXHRcdFx0XHRcdFx0Ly8gb25seSBhIHNpbmdsZSBET00gbm9kZVxuXHRcdFx0XHRcdFx0bmV3UGFyZW50Vk5vZGUuX2xhc3REb21DaGlsZCA9IG5ld0RvbTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aSsrO1xuXHRcdFx0cmV0dXJuIGNoaWxkVk5vZGU7XG5cdFx0fVxuXHQpO1xuXG5cdG5ld1BhcmVudFZOb2RlLl9kb20gPSBmaXJzdENoaWxkRG9tO1xuXG5cdC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBub3QgcGFydCBvZiBhbnkgdm5vZGUuXG5cdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsICYmIHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0Zm9yIChpID0gZXhjZXNzRG9tQ2hpbGRyZW4ubGVuZ3RoOyBpLS07ICkge1xuXHRcdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuW2ldICE9IG51bGwpIHJlbW92ZU5vZGUoZXhjZXNzRG9tQ2hpbGRyZW5baV0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSByZW1haW5pbmcgb2xkQ2hpbGRyZW4gaWYgdGhlcmUgYXJlIGFueS5cblx0Zm9yIChpID0gb2xkQ2hpbGRyZW5MZW5ndGg7IGktLTsgKSB7XG5cdFx0aWYgKG9sZENoaWxkcmVuW2ldICE9IG51bGwpIHVubW91bnQob2xkQ2hpbGRyZW5baV0sIG9sZENoaWxkcmVuW2ldKTtcblx0fVxuXG5cdC8vIFNldCByZWZzIG9ubHkgYWZ0ZXIgdW5tb3VudFxuXHRpZiAocmVmcykge1xuXHRcdGZvciAoaSA9IDA7IGkgPCByZWZzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhcHBseVJlZihyZWZzW2ldLCByZWZzWysraV0sIHJlZnNbKytpXSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogRmxhdHRlbiBhbmQgbG9vcCB0aHJvdWdoIHRoZSBjaGlsZHJlbiBvZiBhIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW59IGNoaWxkcmVuIFRoZSB1bmZsYXR0ZW5lZFxuICogY2hpbGRyZW4gb2YgYSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7KHZub2RlOiBpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGUpID0+IGltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gW2NhbGxiYWNrXVxuICogQSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGVhY2ggY2hpbGQgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBmbGF0dGVuZWQgbGlzdC5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlIHwgc3RyaW5nIHwgbnVtYmVyPn0gW2ZsYXR0ZW5lZF0gQW4gZmxhdCBhcnJheSBvZiBjaGlsZHJlbiB0byBtb2RpZnlcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGVbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ2hpbGRBcnJheShjaGlsZHJlbiwgY2FsbGJhY2ssIGZsYXR0ZW5lZCkge1xuXHRpZiAoZmxhdHRlbmVkID09IG51bGwpIGZsYXR0ZW5lZCA9IFtdO1xuXG5cdGlmIChjaGlsZHJlbiA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0aWYgKGNhbGxiYWNrKSBmbGF0dGVuZWQucHVzaChjYWxsYmFjayhudWxsKSk7XG5cdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0b0NoaWxkQXJyYXkoY2hpbGRyZW5baV0sIGNhbGxiYWNrLCBmbGF0dGVuZWQpO1xuXHRcdH1cblx0fSBlbHNlIGlmICghY2FsbGJhY2spIHtcblx0XHRmbGF0dGVuZWQucHVzaChjaGlsZHJlbik7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGRyZW4gPT09ICdudW1iZXInKSB7XG5cdFx0ZmxhdHRlbmVkLnB1c2goY2FsbGJhY2soY3JlYXRlVk5vZGUobnVsbCwgY2hpbGRyZW4sIG51bGwsIG51bGwpKSk7XG5cdH0gZWxzZSBpZiAoY2hpbGRyZW4uX2RvbSAhPSBudWxsIHx8IGNoaWxkcmVuLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdGZsYXR0ZW5lZC5wdXNoKFxuXHRcdFx0Y2FsbGJhY2soY3JlYXRlVk5vZGUoY2hpbGRyZW4udHlwZSwgY2hpbGRyZW4ucHJvcHMsIGNoaWxkcmVuLmtleSwgbnVsbCkpXG5cdFx0KTtcblx0fSBlbHNlIHtcblx0XHRmbGF0dGVuZWQucHVzaChjYWxsYmFjayhjaGlsZHJlbikpO1xuXHR9XG5cblx0cmV0dXJuIGZsYXR0ZW5lZDtcbn1cbiIsImltcG9ydCB7IElTX05PTl9ESU1FTlNJT05BTCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuLi9vcHRpb25zJztcblxuLyoqXG4gKiBEaWZmIHRoZSBvbGQgYW5kIG5ldyBwcm9wZXJ0aWVzIG9mIGEgVk5vZGUgYW5kIGFwcGx5IGNoYW5nZXMgdG8gdGhlIERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBkb20gVGhlIERPTSBub2RlIHRvIGFwcGx5XG4gKiBjaGFuZ2VzIHRvXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgVGhlIG5ldyBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IG9sZFByb3BzIFRoZSBvbGQgcHJvcHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGh5ZHJhdGUgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBoeWRyYXRlKSB7XG5cdGxldCBpO1xuXG5cdGZvciAoaSBpbiBvbGRQcm9wcykge1xuXHRcdGlmICghKGkgaW4gbmV3UHJvcHMpKSB7XG5cdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG51bGwsIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG5cblx0Zm9yIChpIGluIG5ld1Byb3BzKSB7XG5cdFx0aWYgKFxuXHRcdFx0KCFoeWRyYXRlIHx8IHR5cGVvZiBuZXdQcm9wc1tpXSA9PSAnZnVuY3Rpb24nKSAmJlxuXHRcdFx0aSAhPT0gJ3ZhbHVlJyAmJlxuXHRcdFx0aSAhPT0gJ2NoZWNrZWQnICYmXG5cdFx0XHRvbGRQcm9wc1tpXSAhPT0gbmV3UHJvcHNbaV1cblx0XHQpIHtcblx0XHRcdHNldFByb3BlcnR5KGRvbSwgaSwgbmV3UHJvcHNbaV0sIG9sZFByb3BzW2ldLCBpc1N2Zyk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBrZXksIHZhbHVlKSB7XG5cdGlmIChrZXlbMF0gPT09ICctJykge1xuXHRcdHN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuXHR9IGVsc2UgaWYgKFxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcblx0XHRJU19OT05fRElNRU5TSU9OQUwudGVzdChrZXkpID09PSBmYWxzZVxuXHQpIHtcblx0XHRzdHlsZVtrZXldID0gdmFsdWUgKyAncHgnO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRzdHlsZVtrZXldID0gJyc7XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlO1xuXHR9XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgdmFsdWUgb24gYSBET00gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gbm9kZSB0byBtb2RpZnlcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldCB0aGUgcHJvcGVydHkgdG9cbiAqIEBwYXJhbSB7Kn0gb2xkVmFsdWUgVGhlIG9sZCB2YWx1ZSB0aGUgcHJvcGVydHkgaGFkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgRE9NIG5vZGUgaXMgYW4gU1ZHIG5vZGUgb3Igbm90XG4gKi9cbmZ1bmN0aW9uIHNldFByb3BlcnR5KGRvbSwgbmFtZSwgdmFsdWUsIG9sZFZhbHVlLCBpc1N2Zykge1xuXHRpZiAoaXNTdmcpIHtcblx0XHRpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIHtcblx0XHRcdG5hbWUgPSAnY2xhc3MnO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnY2xhc3MnKSB7XG5cdFx0bmFtZSA9ICdjbGFzc05hbWUnO1xuXHR9XG5cblx0aWYgKG5hbWUgPT09ICdrZXknIHx8IG5hbWUgPT09ICdjaGlsZHJlbicpIHtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnc3R5bGUnKSB7XG5cdFx0Y29uc3QgcyA9IGRvbS5zdHlsZTtcblxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRzLmNzc1RleHQgPSB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHR5cGVvZiBvbGRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0cy5jc3NUZXh0ID0gJyc7XG5cdFx0XHRcdG9sZFZhbHVlID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9sZFZhbHVlKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgaW4gb2xkVmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoISh2YWx1ZSAmJiBpIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUocywgaSwgJycpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodmFsdWUpIHtcblx0XHRcdFx0Zm9yIChsZXQgaSBpbiB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICghb2xkVmFsdWUgfHwgdmFsdWVbaV0gIT09IG9sZFZhbHVlW2ldKSB7XG5cdFx0XHRcdFx0XHRzZXRTdHlsZShzLCBpLCB2YWx1ZVtpXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdC8vIEJlbmNobWFyayBmb3IgY29tcGFyaXNvbjogaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81NzRjOTU0YmRiOTY1YjlhMDA5NjVhYzZcblx0ZWxzZSBpZiAobmFtZVswXSA9PT0gJ28nICYmIG5hbWVbMV0gPT09ICduJykge1xuXHRcdGxldCB1c2VDYXB0dXJlID0gbmFtZSAhPT0gKG5hbWUgPSBuYW1lLnJlcGxhY2UoL0NhcHR1cmUkLywgJycpKTtcblx0XHRsZXQgbmFtZUxvd2VyID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdG5hbWUgPSAobmFtZUxvd2VyIGluIGRvbSA/IG5hbWVMb3dlciA6IG5hbWUpLnNsaWNlKDIpO1xuXG5cdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRpZiAoIW9sZFZhbHVlKSBkb20uYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHRcdChkb20uX2xpc3RlbmVycyB8fCAoZG9tLl9saXN0ZW5lcnMgPSB7fSkpW25hbWVdID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50UHJveHksIHVzZUNhcHR1cmUpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChcblx0XHRuYW1lICE9PSAnbGlzdCcgJiZcblx0XHRuYW1lICE9PSAndGFnTmFtZScgJiZcblx0XHQvLyBIVE1MQnV0dG9uRWxlbWVudC5mb3JtIGFuZCBIVE1MSW5wdXRFbGVtZW50LmZvcm0gYXJlIHJlYWQtb25seSBidXQgY2FuIGJlIHNldCB1c2luZ1xuXHRcdC8vIHNldEF0dHJpYnV0ZVxuXHRcdG5hbWUgIT09ICdmb3JtJyAmJlxuXHRcdG5hbWUgIT09ICd0eXBlJyAmJlxuXHRcdCFpc1N2ZyAmJlxuXHRcdG5hbWUgaW4gZG9tXG5cdCkge1xuXHRcdGRvbVtuYW1lXSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuXHR9IGVsc2UgaWYgKFxuXHRcdHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdG5hbWUgIT09ICdkYW5nZXJvdXNseVNldElubmVySFRNTCdcblx0KSB7XG5cdFx0aWYgKG5hbWUgIT09IChuYW1lID0gbmFtZS5yZXBsYWNlKC9eeGxpbms6Py8sICcnKSkpIHtcblx0XHRcdGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlTlMoXG5cdFx0XHRcdFx0J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9tLnNldEF0dHJpYnV0ZU5TKFxuXHRcdFx0XHRcdCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20uc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBQcm94eSBhbiBldmVudCB0byBob29rZWQgZXZlbnQgaGFuZGxlcnNcbiAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGV2ZW50IG9iamVjdCBmcm9tIHRoZSBicm93c2VyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBldmVudFByb3h5KGUpIHtcblx0dGhpcy5fbGlzdGVuZXJzW2UudHlwZV0ob3B0aW9ucy5ldmVudCA/IG9wdGlvbnMuZXZlbnQoZSkgOiBlKTtcbn1cbiIsImltcG9ydCB7IEVNUFRZX09CSiwgRU1QVFlfQVJSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IGRpZmZDaGlsZHJlbiwgdG9DaGlsZEFycmF5IH0gZnJvbSAnLi9jaGlsZHJlbic7XG5pbXBvcnQgeyBkaWZmUHJvcHMgfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7IGFzc2lnbiwgcmVtb3ZlTm9kZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyBhbmQgYXBwbHkgcHJvcGVyIGNoYW5nZXMgdG8gdGhlIERPTVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50RG9tIFRoZSBwYXJlbnQgb2YgdGhlIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRWTm9kZSBUaGUgb2xkIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBlbGVtZW50IGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50Pn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7RWxlbWVudCB8IFRleHR9IG9sZERvbSBUaGUgY3VycmVudCBhdHRhY2hlZCBET01cbiAqIGVsZW1lbnQgYW55IG5ldyBkb20gZWxlbWVudHMgc2hvdWxkIGJlIHBsYWNlZCBhcm91bmQuIExpa2VseSBgbnVsbGAgb24gZmlyc3RcbiAqIHJlbmRlciAoZXhjZXB0IHdoZW4gaHlkcmF0aW5nKS4gQ2FuIGJlIGEgc2libGluZyBET00gZWxlbWVudCB3aGVuIGRpZmZpbmdcbiAqIEZyYWdtZW50cyB0aGF0IGhhdmUgc2libGluZ3MuIEluIG1vc3QgY2FzZXMsIGl0IHN0YXJ0cyBvdXQgYXMgYG9sZENoaWxkcmVuWzBdLl9kb21gLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNIeWRyYXRpbmddIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmYoXG5cdHBhcmVudERvbSxcblx0bmV3Vk5vZGUsXG5cdG9sZFZOb2RlLFxuXHRjb250ZXh0LFxuXHRpc1N2Zyxcblx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdGNvbW1pdFF1ZXVlLFxuXHRvbGREb20sXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IHRtcCxcblx0XHRuZXdUeXBlID0gbmV3Vk5vZGUudHlwZTtcblxuXHQvLyBXaGVuIHBhc3NpbmcgdGhyb3VnaCBjcmVhdGVFbGVtZW50IGl0IGFzc2lnbnMgdGhlIG9iamVjdFxuXHQvLyBjb25zdHJ1Y3RvciBhcyB1bmRlZmluZWQuIFRoaXMgdG8gcHJldmVudCBKU09OLWluamVjdGlvbi5cblx0aWYgKG5ld1ZOb2RlLmNvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuXG5cdGlmICgodG1wID0gb3B0aW9ucy5fZGlmZikpIHRtcChuZXdWTm9kZSk7XG5cblx0dHJ5IHtcblx0XHRvdXRlcjogaWYgKHR5cGVvZiBuZXdUeXBlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRsZXQgYywgaXNOZXcsIG9sZFByb3BzLCBvbGRTdGF0ZSwgc25hcHNob3QsIGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbjtcblx0XHRcdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXG5cdFx0XHQvLyBOZWNlc3NhcnkgZm9yIGNyZWF0ZUNvbnRleHQgYXBpLiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgd2lsbCBwYXNzXG5cdFx0XHQvLyB0aGUgY29udGV4dCB2YWx1ZSBhcyBgdGhpcy5jb250ZXh0YCBqdXN0IGZvciB0aGlzIGNvbXBvbmVudC5cblx0XHRcdHRtcCA9IG5ld1R5cGUuY29udGV4dFR5cGU7XG5cdFx0XHRsZXQgcHJvdmlkZXIgPSB0bXAgJiYgY29udGV4dFt0bXAuX2lkXTtcblx0XHRcdGxldCBjY3R4ID0gdG1wXG5cdFx0XHRcdD8gcHJvdmlkZXJcblx0XHRcdFx0XHQ/IHByb3ZpZGVyLnByb3BzLnZhbHVlXG5cdFx0XHRcdFx0OiB0bXAuX2RlZmF1bHRWYWx1ZVxuXHRcdFx0XHQ6IGNvbnRleHQ7XG5cblx0XHRcdC8vIEdldCBjb21wb25lbnQgYW5kIHNldCBpdCB0byBgY2Bcblx0XHRcdGlmIChvbGRWTm9kZS5fY29tcG9uZW50KSB7XG5cdFx0XHRcdGMgPSBuZXdWTm9kZS5fY29tcG9uZW50ID0gb2xkVk5vZGUuX2NvbXBvbmVudDtcblx0XHRcdFx0Y2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IGMuX3BlbmRpbmdFcnJvcjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEluc3RhbnRpYXRlIHRoZSBuZXcgY29tcG9uZW50XG5cdFx0XHRcdGlmICgncHJvdG90eXBlJyBpbiBuZXdUeXBlICYmIG5ld1R5cGUucHJvdG90eXBlLnJlbmRlcikge1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jb21wb25lbnQgPSBjID0gbmV3IG5ld1R5cGUobmV3UHJvcHMsIGNjdHgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY29tcG9uZW50ID0gYyA9IG5ldyBDb21wb25lbnQobmV3UHJvcHMsIGNjdHgpO1xuXHRcdFx0XHRcdGMuY29uc3RydWN0b3IgPSBuZXdUeXBlO1xuXHRcdFx0XHRcdGMucmVuZGVyID0gZG9SZW5kZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByb3ZpZGVyKSBwcm92aWRlci5zdWIoYyk7XG5cblx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRpZiAoIWMuc3RhdGUpIGMuc3RhdGUgPSB7fTtcblx0XHRcdFx0Yy5jb250ZXh0ID0gY2N0eDtcblx0XHRcdFx0Yy5fY29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdGlzTmV3ID0gYy5fZGlydHkgPSB0cnVlO1xuXHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW52b2tlIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1xuXHRcdFx0aWYgKGMuX25leHRTdGF0ZSA9PSBudWxsKSB7XG5cdFx0XHRcdGMuX25leHRTdGF0ZSA9IGMuc3RhdGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoYy5fbmV4dFN0YXRlID09IGMuc3RhdGUpIHtcblx0XHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBhc3NpZ24oe30sIGMuX25leHRTdGF0ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhc3NpZ24oXG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlLFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdG9sZFByb3BzID0gYy5wcm9wcztcblx0XHRcdG9sZFN0YXRlID0gYy5zdGF0ZTtcblxuXHRcdFx0Ly8gSW52b2tlIHByZS1yZW5kZXIgbGlmZWN5Y2xlIG1ldGhvZHNcblx0XHRcdGlmIChpc05ldykge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0bmV3VHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT0gbnVsbCAmJlxuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbE1vdW50ICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsTW91bnQoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjLmNvbXBvbmVudERpZE1vdW50ICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaChjLmNvbXBvbmVudERpZE1vdW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09IG51bGwgJiZcblx0XHRcdFx0XHRuZXdQcm9wcyAhPT0gb2xkUHJvcHMgJiZcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgIT0gbnVsbFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIGNjdHgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCFjLl9mb3JjZSAmJlxuXHRcdFx0XHRcdGMuc2hvdWxkQ29tcG9uZW50VXBkYXRlICE9IG51bGwgJiZcblx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXdQcm9wcywgYy5fbmV4dFN0YXRlLCBjY3R4KSA9PT0gZmFsc2Vcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0XHRcdGMuc3RhdGUgPSBjLl9uZXh0U3RhdGU7XG5cdFx0XHRcdFx0Yy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XHRjLl92bm9kZSA9IG5ld1ZOb2RlO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9kb20gPSBvbGRWTm9kZS5fZG9tO1xuXHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG9sZFZOb2RlLl9jaGlsZHJlbjtcblx0XHRcdFx0XHRpZiAoYy5fcmVuZGVyQ2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Y29tbWl0UXVldWUucHVzaChjKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zm9yICh0bXAgPSAwOyB0bXAgPCBuZXdWTm9kZS5fY2hpbGRyZW4ubGVuZ3RoOyB0bXArKykge1xuXHRcdFx0XHRcdFx0aWYgKG5ld1ZOb2RlLl9jaGlsZHJlblt0bXBdKSB7XG5cdFx0XHRcdFx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlblt0bXBdLl9wYXJlbnQgPSBuZXdWTm9kZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWsgb3V0ZXI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnRXaWxsVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVcGRhdGUobmV3UHJvcHMsIGMuX25leHRTdGF0ZSwgY2N0eCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnREaWRVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKCgpID0+IHtcblx0XHRcdFx0XHRcdGMuY29tcG9uZW50RGlkVXBkYXRlKG9sZFByb3BzLCBvbGRTdGF0ZSwgc25hcHNob3QpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGMuY29udGV4dCA9IGNjdHg7XG5cdFx0XHRjLnByb3BzID0gbmV3UHJvcHM7XG5cdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXG5cdFx0XHRpZiAoKHRtcCA9IG9wdGlvbnMuX3JlbmRlcikpIHRtcChuZXdWTm9kZSk7XG5cblx0XHRcdGMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRjLl92bm9kZSA9IG5ld1ZOb2RlO1xuXHRcdFx0Yy5fcGFyZW50RG9tID0gcGFyZW50RG9tO1xuXG5cdFx0XHR0bXAgPSBjLnJlbmRlcihjLnByb3BzLCBjLnN0YXRlLCBjLmNvbnRleHQpO1xuXHRcdFx0bGV0IGlzVG9wTGV2ZWxGcmFnbWVudCA9XG5cdFx0XHRcdHRtcCAhPSBudWxsICYmIHRtcC50eXBlID09IEZyYWdtZW50ICYmIHRtcC5rZXkgPT0gbnVsbDtcblx0XHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IHRvQ2hpbGRBcnJheShcblx0XHRcdFx0aXNUb3BMZXZlbEZyYWdtZW50ID8gdG1wLnByb3BzLmNoaWxkcmVuIDogdG1wXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoYy5nZXRDaGlsZENvbnRleHQgIT0gbnVsbCkge1xuXHRcdFx0XHRjb250ZXh0ID0gYXNzaWduKGFzc2lnbih7fSwgY29udGV4dCksIGMuZ2V0Q2hpbGRDb250ZXh0KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWlzTmV3ICYmIGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0XHRzbmFwc2hvdCA9IGMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUob2xkUHJvcHMsIG9sZFN0YXRlKTtcblx0XHRcdH1cblxuXHRcdFx0ZGlmZkNoaWxkcmVuKFxuXHRcdFx0XHRwYXJlbnREb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0b2xkRG9tLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblxuXHRcdFx0Yy5iYXNlID0gbmV3Vk5vZGUuX2RvbTtcblxuXHRcdFx0aWYgKGMuX3JlbmRlckNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0Y29tbWl0UXVldWUucHVzaChjKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbikge1xuXHRcdFx0XHRjLl9wZW5kaW5nRXJyb3IgPSBjLl9wcm9jZXNzaW5nRXhjZXB0aW9uID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Yy5fZm9yY2UgPSBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdWTm9kZS5fZG9tID0gZGlmZkVsZW1lbnROb2Rlcyhcblx0XHRcdFx0b2xkVk5vZGUuX2RvbSxcblx0XHRcdFx0bmV3Vk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XHRpc1N2Zyxcblx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdGNvbW1pdFF1ZXVlLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoKHRtcCA9IG9wdGlvbnMuZGlmZmVkKSkgdG1wKG5ld1ZOb2RlKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgbmV3Vk5vZGUsIG9sZFZOb2RlKTtcblx0fVxuXG5cdHJldHVybiBuZXdWTm9kZS5fZG9tO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSByb290XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21taXRSb290KGNvbW1pdFF1ZXVlLCByb290KSB7XG5cdGlmIChvcHRpb25zLl9jb21taXQpIG9wdGlvbnMuX2NvbW1pdChyb290LCBjb21taXRRdWV1ZSk7XG5cblx0Y29tbWl0UXVldWUuc29tZShjID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29tbWl0UXVldWUgPSBjLl9yZW5kZXJDYWxsYmFja3M7XG5cdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MgPSBbXTtcblx0XHRcdGNvbW1pdFF1ZXVlLnNvbWUoY2IgPT4ge1xuXHRcdFx0XHRjYi5jYWxsKGMpO1xuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0b3B0aW9ucy5fY2F0Y2hFcnJvcihlLCBjLl92bm9kZSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLyoqXG4gKiBEaWZmIHR3byB2aXJ0dWFsIG5vZGVzIHJlcHJlc2VudGluZyBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gZWxlbWVudCByZXByZXNlbnRpbmdcbiAqIHRoZSB2aXJ0dWFsIG5vZGVzIGJlaW5nIGRpZmZlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG5ld1ZOb2RlIFRoZSBuZXcgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgRE9NIG5vZGUgaXMgYW4gU1ZHIG5vZGVcbiAqIEBwYXJhbSB7Kn0gZXhjZXNzRG9tQ2hpbGRyZW5cbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudD59IGNvbW1pdFF1ZXVlIExpc3Qgb2YgY29tcG9uZW50c1xuICogd2hpY2ggaGF2ZSBjYWxsYmFja3MgdG8gaW52b2tlIGluIGNvbW1pdFJvb3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICogQHJldHVybnMge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fVxuICovXG5mdW5jdGlvbiBkaWZmRWxlbWVudE5vZGVzKFxuXHRkb20sXG5cdG5ld1ZOb2RlLFxuXHRvbGRWTm9kZSxcblx0Y29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0aXNIeWRyYXRpbmdcbikge1xuXHRsZXQgaTtcblx0bGV0IG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHM7XG5cdGxldCBuZXdQcm9wcyA9IG5ld1ZOb2RlLnByb3BzO1xuXG5cdC8vIFRyYWNrcyBlbnRlcmluZyBhbmQgZXhpdGluZyBTVkcgbmFtZXNwYWNlIHdoZW4gZGVzY2VuZGluZyB0aHJvdWdoIHRoZSB0cmVlLlxuXHRpc1N2ZyA9IG5ld1ZOb2RlLnR5cGUgPT09ICdzdmcnIHx8IGlzU3ZnO1xuXG5cdGlmIChkb20gPT0gbnVsbCAmJiBleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGV4Y2Vzc0RvbUNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBjaGlsZCA9IGV4Y2Vzc0RvbUNoaWxkcmVuW2ldO1xuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdGNoaWxkICE9IG51bGwgJiZcblx0XHRcdFx0KG5ld1ZOb2RlLnR5cGUgPT09IG51bGxcblx0XHRcdFx0XHQ/IGNoaWxkLm5vZGVUeXBlID09PSAzXG5cdFx0XHRcdFx0OiBjaGlsZC5sb2NhbE5hbWUgPT09IG5ld1ZOb2RlLnR5cGUpXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tID0gY2hpbGQ7XG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuW2ldID0gbnVsbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGRvbSA9PSBudWxsKSB7XG5cdFx0aWYgKG5ld1ZOb2RlLnR5cGUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdQcm9wcyk7XG5cdFx0fVxuXHRcdGRvbSA9IGlzU3ZnXG5cdFx0XHQ/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuZXdWTm9kZS50eXBlKVxuXHRcdFx0OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5ld1ZOb2RlLnR5cGUpO1xuXHRcdC8vIHdlIGNyZWF0ZWQgYSBuZXcgcGFyZW50LCBzbyBub25lIG9mIHRoZSBwcmV2aW91c2x5IGF0dGFjaGVkIGNoaWxkcmVuIGNhbiBiZSByZXVzZWQ6XG5cdFx0ZXhjZXNzRG9tQ2hpbGRyZW4gPSBudWxsO1xuXHR9XG5cblx0aWYgKG5ld1ZOb2RlLnR5cGUgPT09IG51bGwpIHtcblx0XHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW5bZXhjZXNzRG9tQ2hpbGRyZW4uaW5kZXhPZihkb20pXSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyAmJiBkb20uZGF0YSAhPSBuZXdQcm9wcykge1xuXHRcdFx0ZG9tLmRhdGEgPSBuZXdQcm9wcztcblx0XHR9XG5cdH0gZWxzZSBpZiAobmV3Vk5vZGUgIT09IG9sZFZOb2RlKSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gRU1QVFlfQVJSLnNsaWNlLmNhbGwoZG9tLmNoaWxkTm9kZXMpO1xuXHRcdH1cblxuXHRcdG9sZFByb3BzID0gb2xkVk5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xuXG5cdFx0bGV0IG9sZEh0bWwgPSBvbGRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblx0XHRsZXQgbmV3SHRtbCA9IG5ld1Byb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuXG5cdFx0Ly8gRHVyaW5nIGh5ZHJhdGlvbiwgcHJvcHMgYXJlIG5vdCBkaWZmZWQgYXQgYWxsIChpbmNsdWRpbmcgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpXG5cdFx0Ly8gQFRPRE8gd2Ugc2hvdWxkIHdhcm4gaW4gZGVidWcgbW9kZSB3aGVuIHByb3BzIGRvbid0IG1hdGNoIGhlcmUuXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0aWYgKG9sZFByb3BzID09PSBFTVBUWV9PQkopIHtcblx0XHRcdFx0b2xkUHJvcHMgPSB7fTtcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkb20uYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG9sZFByb3BzW2RvbS5hdHRyaWJ1dGVzW2ldLm5hbWVdID0gZG9tLmF0dHJpYnV0ZXNbaV0udmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG5ld0h0bWwgfHwgb2xkSHRtbCkge1xuXHRcdFx0XHQvLyBBdm9pZCByZS1hcHBseWluZyB0aGUgc2FtZSAnX19odG1sJyBpZiBpdCBkaWQgbm90IGNoYW5nZWQgYmV0d2VlbiByZS1yZW5kZXJcblx0XHRcdFx0aWYgKCFuZXdIdG1sIHx8ICFvbGRIdG1sIHx8IG5ld0h0bWwuX19odG1sICE9IG9sZEh0bWwuX19odG1sKSB7XG5cdFx0XHRcdFx0ZG9tLmlubmVySFRNTCA9IChuZXdIdG1sICYmIG5ld0h0bWwuX19odG1sKSB8fCAnJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRpZmZQcm9wcyhkb20sIG5ld1Byb3BzLCBvbGRQcm9wcywgaXNTdmcsIGlzSHlkcmF0aW5nKTtcblxuXHRcdG5ld1ZOb2RlLl9jaGlsZHJlbiA9IG5ld1ZOb2RlLnByb3BzLmNoaWxkcmVuO1xuXG5cdFx0Ly8gSWYgdGhlIG5ldyB2bm9kZSBkaWRuJ3QgaGF2ZSBkYW5nZXJvdXNseVNldElubmVySFRNTCwgZGlmZiBpdHMgY2hpbGRyZW5cblx0XHRpZiAoIW5ld0h0bWwpIHtcblx0XHRcdGRpZmZDaGlsZHJlbihcblx0XHRcdFx0ZG9tLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdG5ld1ZOb2RlLnR5cGUgPT09ICdmb3JlaWduT2JqZWN0JyA/IGZhbHNlIDogaXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0RU1QVFlfT0JKLFxuXHRcdFx0XHRpc0h5ZHJhdGluZ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyAoYXMgYWJvdmUsIGRvbid0IGRpZmYgcHJvcHMgZHVyaW5nIGh5ZHJhdGlvbilcblx0XHRpZiAoIWlzSHlkcmF0aW5nKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCd2YWx1ZScgaW4gbmV3UHJvcHMgJiZcblx0XHRcdFx0bmV3UHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHRuZXdQcm9wcy52YWx1ZSAhPT0gZG9tLnZhbHVlXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tLnZhbHVlID0gbmV3UHJvcHMudmFsdWUgPT0gbnVsbCA/ICcnIDogbmV3UHJvcHMudmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCdjaGVja2VkJyBpbiBuZXdQcm9wcyAmJlxuXHRcdFx0XHRuZXdQcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0bmV3UHJvcHMuY2hlY2tlZCAhPT0gZG9tLmNoZWNrZWRcblx0XHRcdCkge1xuXHRcdFx0XHRkb20uY2hlY2tlZCA9IG5ld1Byb3BzLmNoZWNrZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRvbTtcbn1cblxuLyoqXG4gKiBJbnZva2Ugb3IgdXBkYXRlIGEgcmVmLCBkZXBlbmRpbmcgb24gd2hldGhlciBpdCBpcyBhIGZ1bmN0aW9uIG9yIG9iamVjdCByZWYuXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcmVmXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlSZWYocmVmLCB2YWx1ZSwgdm5vZGUpIHtcblx0dHJ5IHtcblx0XHRpZiAodHlwZW9mIHJlZiA9PSAnZnVuY3Rpb24nKSByZWYodmFsdWUpO1xuXHRcdGVsc2UgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgdm5vZGUpO1xuXHR9XG59XG5cbi8qKlxuICogVW5tb3VudCBhIHZpcnR1YWwgbm9kZSBmcm9tIHRoZSB0cmVlIGFuZCBhcHBseSBET00gY2hhbmdlc1xuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2aXJ0dWFsIG5vZGUgdG8gdW5tb3VudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IHBhcmVudFZOb2RlIFRoZSBwYXJlbnQgb2YgdGhlIFZOb2RlIHRoYXRcbiAqIGluaXRpYXRlZCB0aGUgdW5tb3VudFxuICogQHBhcmFtIHtib29sZWFufSBbc2tpcFJlbW92ZV0gRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IGEgcGFyZW50IG5vZGUgb2YgdGhlXG4gKiBjdXJyZW50IGVsZW1lbnQgaXMgYWxyZWFkeSBkZXRhY2hlZCBmcm9tIHRoZSBET00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bm1vdW50KHZub2RlLCBwYXJlbnRWTm9kZSwgc2tpcFJlbW92ZSkge1xuXHRsZXQgcjtcblx0aWYgKG9wdGlvbnMudW5tb3VudCkgb3B0aW9ucy51bm1vdW50KHZub2RlKTtcblxuXHRpZiAoKHIgPSB2bm9kZS5yZWYpKSB7XG5cdFx0aWYgKCFyLmN1cnJlbnQgfHwgci5jdXJyZW50ID09PSB2bm9kZS5fZG9tKSBhcHBseVJlZihyLCBudWxsLCBwYXJlbnRWTm9kZSk7XG5cdH1cblxuXHRsZXQgZG9tO1xuXHRpZiAoIXNraXBSZW1vdmUgJiYgdHlwZW9mIHZub2RlLnR5cGUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRza2lwUmVtb3ZlID0gKGRvbSA9IHZub2RlLl9kb20pICE9IG51bGw7XG5cdH1cblxuXHR2bm9kZS5fZG9tID0gdm5vZGUuX2xhc3REb21DaGlsZCA9IG51bGw7XG5cblx0aWYgKChyID0gdm5vZGUuX2NvbXBvbmVudCkgIT0gbnVsbCkge1xuXHRcdGlmIChyLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgcGFyZW50Vk5vZGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHIuYmFzZSA9IHIuX3BhcmVudERvbSA9IG51bGw7XG5cdH1cblxuXHRpZiAoKHIgPSB2bm9kZS5fY2hpbGRyZW4pKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAocltpXSkgdW5tb3VudChyW2ldLCBwYXJlbnRWTm9kZSwgc2tpcFJlbW92ZSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGRvbSAhPSBudWxsKSByZW1vdmVOb2RlKGRvbSk7XG59XG5cbi8qKiBUaGUgYC5yZW5kZXIoKWAgbWV0aG9kIGZvciBhIFBGQyBiYWNraW5nIGluc3RhbmNlLiAqL1xuZnVuY3Rpb24gZG9SZW5kZXIocHJvcHMsIHN0YXRlLCBjb250ZXh0KSB7XG5cdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KTtcbn1cbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBFTVBUWV9BUlIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIENsb25lcyB0aGUgZ2l2ZW4gVk5vZGUsIG9wdGlvbmFsbHkgYWRkaW5nIGF0dHJpYnV0ZXMvcHJvcHMgYW5kIHJlcGxhY2luZyBpdHMgY2hpbGRyZW4uXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBET00gZWxlbWVudCB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIEF0dHJpYnV0ZXMvcHJvcHMgdG8gYWRkIHdoZW4gY2xvbmluZ1xuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbj59IHJlc3QgQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHdpbGwgYmUgdXNlZCBhcyByZXBsYWNlbWVudCBjaGlsZHJlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRWxlbWVudCh2bm9kZSwgcHJvcHMpIHtcblx0cHJvcHMgPSBhc3NpZ24oYXNzaWduKHt9LCB2bm9kZS5wcm9wcyksIHByb3BzKTtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSBwcm9wcy5jaGlsZHJlbiA9IEVNUFRZX0FSUi5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG5cdHJldHVybiBjcmVhdGVWTm9kZShcblx0XHR2bm9kZS50eXBlLFxuXHRcdHByb3BzLFxuXHRcdHByb3BzLmtleSB8fCB2bm9kZS5rZXksXG5cdFx0cHJvcHMucmVmIHx8IHZub2RlLnJlZlxuXHQpO1xufVxuIiwiaW1wb3J0IHsgZW5xdWV1ZVJlbmRlciB9IGZyb20gJy4uL2NvbXBvbmVudCc7XG5cbi8qKlxuICogRmluZCB0aGUgY2xvc2VzdCBlcnJvciBib3VuZGFyeSB0byBhIHRocm93biBlcnJvciBhbmQgY2FsbCBpdFxuICogQHBhcmFtIHtvYmplY3R9IGVycm9yIFRoZSB0aHJvd24gdmFsdWVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdm5vZGUgdGhhdCB0aHJld1xuICogdGhlIGVycm9yIHRoYXQgd2FzIGNhdWdodCAoZXhjZXB0IGZvciB1bm1vdW50aW5nIHdoZW4gdGhpcyBwYXJhbWV0ZXJcbiAqIGlzIHRoZSBoaWdoZXN0IHBhcmVudCB0aGF0IHdhcyBiZWluZyB1bm1vdW50ZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hFcnJvcihlcnJvciwgdm5vZGUpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4uL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xuXHRsZXQgY29tcG9uZW50LCBoYXNDYXVnaHQ7XG5cblx0Zm9yICg7ICh2bm9kZSA9IHZub2RlLl9wYXJlbnQpOyApIHtcblx0XHRpZiAoKGNvbXBvbmVudCA9IHZub2RlLl9jb21wb25lbnQpICYmICFjb21wb25lbnQuX3Byb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRjb21wb25lbnQuY29uc3RydWN0b3IgJiZcblx0XHRcdFx0XHRjb21wb25lbnQuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0aGFzQ2F1Z2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRjb21wb25lbnQuc2V0U3RhdGUoXG5cdFx0XHRcdFx0XHRjb21wb25lbnQuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoICE9IG51bGwpIHtcblx0XHRcdFx0XHRoYXNDYXVnaHQgPSB0cnVlO1xuXHRcdFx0XHRcdGNvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaChlcnJvcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaGFzQ2F1Z2h0KVxuXHRcdFx0XHRcdHJldHVybiBlbnF1ZXVlUmVuZGVyKChjb21wb25lbnQuX3BlbmRpbmdFcnJvciA9IGNvbXBvbmVudCkpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRlcnJvciA9IGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgZXJyb3I7XG59XG4iLCJpbXBvcnQge1xuXHRjcmVhdGVFbGVtZW50LFxuXHRyZW5kZXIgYXMgcHJlYWN0UmVuZGVyLFxuXHRjbG9uZUVsZW1lbnQgYXMgcHJlYWN0Q2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdENvbXBvbmVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0RnJhZ21lbnRcbn0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7XG5cdHVzZVN0YXRlLFxuXHR1c2VSZWR1Y2VyLFxuXHR1c2VFZmZlY3QsXG5cdHVzZUxheW91dEVmZmVjdCxcblx0dXNlUmVmLFxuXHR1c2VJbXBlcmF0aXZlSGFuZGxlLFxuXHR1c2VNZW1vLFxuXHR1c2VDYWxsYmFjayxcblx0dXNlQ29udGV4dCxcblx0dXNlRGVidWdWYWx1ZVxufSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJy4vUHVyZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBtZW1vIH0gZnJvbSAnLi9tZW1vJztcbmltcG9ydCB7IGZvcndhcmRSZWYgfSBmcm9tICcuL2ZvcndhcmRSZWYnO1xuaW1wb3J0IHsgQ2hpbGRyZW4gfSBmcm9tICcuL0NoaWxkcmVuJztcbmltcG9ydCB7IFN1c3BlbnNlLCBsYXp5IH0gZnJvbSAnLi9zdXNwZW5zZSc7XG5pbXBvcnQgeyBTdXNwZW5zZUxpc3QgfSBmcm9tICcuL3N1c3BlbnNlLWxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAnLi9wb3J0YWxzJztcbmltcG9ydCB7IGh5ZHJhdGUsIHJlbmRlciwgUkVBQ1RfRUxFTUVOVF9UWVBFIH0gZnJvbSAnLi9yZW5kZXInO1xuXG5jb25zdCB2ZXJzaW9uID0gJzE2LjguMCc7IC8vIHRyaWNrIGxpYnJhcmllcyB0byB0aGluayB3ZSBhcmUgcmVhY3RcblxuLyoqXG4gKiBMZWdhY3kgdmVyc2lvbiBvZiBjcmVhdGVFbGVtZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnQgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeSh0eXBlKSB7XG5cdHJldHVybiBjcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIGEgdmFsaWQgKHApcmVhY3Qgbm9kZS5cbiAqIEBwYXJhbSB7Kn0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KGVsZW1lbnQpIHtcblx0cmV0dXJuICEhZWxlbWVudCAmJiBlbGVtZW50LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5cbi8qKlxuICogV3JhcCBgY2xvbmVFbGVtZW50YCB0byBhYm9ydCBpZiB0aGUgcGFzc2VkIGVsZW1lbnQgaXMgbm90IGEgdmFsaWQgZWxlbWVudCBhbmQgYXBwbHlcbiAqIGFsbCB2bm9kZSBub3JtYWxpemF0aW9ucy5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IGVsZW1lbnQgVGhlIHZub2RlIHRvIGNsb25lXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgUHJvcHMgdG8gYWRkIHdoZW4gY2xvbmluZ1xuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnRDaGlsZHJlbj59IHJlc3QgT3B0aW9uYWwgY29tcG9uZW50IGNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRWxlbWVudChlbGVtZW50KSB7XG5cdGlmICghaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHJldHVybiBlbGVtZW50O1xuXHRyZXR1cm4gcHJlYWN0Q2xvbmVFbGVtZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgY29tcG9uZW50IHRyZWUgZnJvbSB0aGUgRE9NLCBpbmNsdWRpbmcgc3RhdGUgYW5kIGV2ZW50IGhhbmRsZXJzLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBjb250YWluZXJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcikge1xuXHRpZiAoY29udGFpbmVyLl9jaGlsZHJlbikge1xuXHRcdHByZWFjdFJlbmRlcihudWxsLCBjb250YWluZXIpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG1hdGNoaW5nIERPTSBub2RlIGZvciBhIGNvbXBvbmVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnQgfCBudWxsfVxuICovXG5mdW5jdGlvbiBmaW5kRE9NTm9kZShjb21wb25lbnQpIHtcblx0cmV0dXJuIChcblx0XHQoY29tcG9uZW50ICYmXG5cdFx0XHQoY29tcG9uZW50LmJhc2UgfHwgKGNvbXBvbmVudC5ub2RlVHlwZSA9PT0gMSAmJiBjb21wb25lbnQpKSkgfHxcblx0XHRudWxsXG5cdCk7XG59XG5cbi8qKlxuICogRGVwcmVjYXRlZCB3YXkgdG8gY29udHJvbCBiYXRjaGVkIHJlbmRlcmluZyBpbnNpZGUgdGhlIHJlY29uY2lsZXIsIGJ1dCB3ZVxuICogYWxyZWFkeSBzY2hlZHVsZSBpbiBiYXRjaGVzIGluc2lkZSBvdXIgcmVuZGVyaW5nIGNvZGVcbiAqIEB0ZW1wbGF0ZSBBcmdcbiAqIEBwYXJhbSB7KGFyZzogQXJnKSA9PiB2b2lkfSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIHRoZSB1cGRhdGVkXG4gKiBAcGFyYW0ge0FyZ30gW2FyZ10gT3B0aW9uYWwgYXJndW1lbnQgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5jb25zdCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IChjYWxsYmFjaywgYXJnKSA9PiBjYWxsYmFjayhhcmcpO1xuXG5leHBvcnQgKiBmcm9tICdwcmVhY3QvaG9va3MnO1xuZXhwb3J0IHtcblx0dmVyc2lvbixcblx0Q2hpbGRyZW4sXG5cdHJlbmRlcixcblx0aHlkcmF0ZSxcblx0dW5tb3VudENvbXBvbmVudEF0Tm9kZSxcblx0Y3JlYXRlUG9ydGFsLFxuXHRjcmVhdGVFbGVtZW50LFxuXHRjcmVhdGVDb250ZXh0LFxuXHRjcmVhdGVGYWN0b3J5LFxuXHRjbG9uZUVsZW1lbnQsXG5cdGNyZWF0ZVJlZixcblx0RnJhZ21lbnQsXG5cdGlzVmFsaWRFbGVtZW50LFxuXHRmaW5kRE9NTm9kZSxcblx0Q29tcG9uZW50LFxuXHRQdXJlQ29tcG9uZW50LFxuXHRtZW1vLFxuXHRmb3J3YXJkUmVmLFxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLFxuXHRTdXNwZW5zZSxcblx0U3VzcGVuc2VMaXN0LFxuXHRsYXp5XG59O1xuXG4vLyBSZWFjdCBjb3BpZXMgdGhlIG5hbWVkIGV4cG9ydHMgdG8gdGhlIGRlZmF1bHQgb25lLlxuZXhwb3J0IGRlZmF1bHQge1xuXHR1c2VTdGF0ZSxcblx0dXNlUmVkdWNlcixcblx0dXNlRWZmZWN0LFxuXHR1c2VMYXlvdXRFZmZlY3QsXG5cdHVzZVJlZixcblx0dXNlSW1wZXJhdGl2ZUhhbmRsZSxcblx0dXNlTWVtbyxcblx0dXNlQ2FsbGJhY2ssXG5cdHVzZUNvbnRleHQsXG5cdHVzZURlYnVnVmFsdWUsXG5cdHZlcnNpb24sXG5cdENoaWxkcmVuLFxuXHRyZW5kZXIsXG5cdGh5ZHJhdGU6IHJlbmRlcixcblx0dW5tb3VudENvbXBvbmVudEF0Tm9kZSxcblx0Y3JlYXRlUG9ydGFsLFxuXHRjcmVhdGVFbGVtZW50LFxuXHRjcmVhdGVDb250ZXh0LFxuXHRjcmVhdGVGYWN0b3J5LFxuXHRjbG9uZUVsZW1lbnQsXG5cdGNyZWF0ZVJlZixcblx0RnJhZ21lbnQsXG5cdGlzVmFsaWRFbGVtZW50LFxuXHRmaW5kRE9NTm9kZSxcblx0Q29tcG9uZW50LFxuXHRQdXJlQ29tcG9uZW50LFxuXHRtZW1vLFxuXHRmb3J3YXJkUmVmLFxuXHR1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyxcblx0U3VzcGVuc2UsXG5cdFN1c3BlbnNlTGlzdCxcblx0bGF6eVxufTtcbiIsInZhciByPXtkYXRhOlwiXCJ9LGU9ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PWU/ZS5xdWVyeVNlbGVjdG9yKFwiI19nb29iZXJcIik6c2VsZi5fZ29vYmVyO3JldHVybiB0fHwoKHQ9KGV8fGRvY3VtZW50LmhlYWQpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSkpLmlubmVySFRNTD1cIiBcIix0LmlkPVwiX2dvb2JlclwiKSx0LmZpcnN0Q2hpbGR9Y2F0Y2gocil7fXJldHVybiByfSx0PWZ1bmN0aW9uKHIpe3ZhciB0PWUociksYT10LmRhdGE7cmV0dXJuIHQuZGF0YT1cIlwiLGF9LGE9Lyg/OihbYS16MC05LSVAXSspICo6PyAqKFteeztdKz8pO3woW147fXtdKj8pICt7KXwofSkvZ2ksbj0vXFwvXFwqLio/XFwqXFwvfFxcc3syLH18XFxuL2dtLGM9ZnVuY3Rpb24ocixlLHQpe3ZhciBhPVwiXCIsbj1cIlwiLGk9XCJcIjtpZigvXkBba3xmXS8udGVzdCh0KSlyZXR1cm4gdCtKU09OLnN0cmluZ2lmeShyKS5yZXBsYWNlKC9cIixcIi9nLFwiO1wiKS5yZXBsYWNlKC9cInwsXCIvZyxcIlwiKS5yZXBsYWNlKC86ey9nLFwie1wiKTtmb3IodmFyIG8gaW4gcil7dmFyIHU9cltvXTtpZihcIm9iamVjdFwiPT10eXBlb2YgdSl7dmFyIHM9ZStcIiBcIitvOy8mL2cudGVzdChvKSYmKHM9by5yZXBsYWNlKC8mL2csZSkpLFwiQFwiPT1vWzBdJiYocz1lKSxuKz1jKHUscyxzPT1lP286dHx8XCJcIil9ZWxzZS9eQGkvLnRlc3Qobyk/aT1vK1wiIFwiK3UrXCI7XCI6YSs9by5yZXBsYWNlKC9bQS1aXS9nLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCkrXCI6XCIrdStcIjtcIn1pZihhLmNoYXJDb2RlQXQoMCkpe3ZhciBmPWUrXCJ7XCIrYStcIn1cIjtyZXR1cm4gdD9uK3QrXCJ7XCIrZitcIn1cIjppK2Yrbn1yZXR1cm4gaStufSxpPXtjOjB9LG89ZnVuY3Rpb24ocixlLHQsbyl7dmFyIHU9SlNPTi5zdHJpbmdpZnkocikscz1pW3VdfHwoaVt1XT10P1wiXCI6XCIuZ29cIit1LnNwbGl0KFwiXCIpLnJlZHVjZShmdW5jdGlvbihyLGUpe3JldHVybiByK2UuY2hhckNvZGVBdCgwKXw4fSw0KSk7cmV0dXJuIGZ1bmN0aW9uKHIsZSx0KXtlLmRhdGEuaW5kZXhPZihyKTwwJiYoZS5kYXRhPXQ/citlLmRhdGE6ZS5kYXRhK3IpfShpW3NdfHwoaVtzXT1jKHJbMF0/ZnVuY3Rpb24ocil7Zm9yKHZhciBlLHQ9W3t9XTtlPWEuZXhlYyhyLnJlcGxhY2UobixcIlwiKSk7KWVbNF0mJnQuc2hpZnQoKSxlWzNdP3QudW5zaGlmdCh0WzBdW2VbM11dPXt9KTplWzRdfHwodFswXVtlWzFdXT1lWzJdKTtyZXR1cm4gdFswXX0ocik6cixzKSksZSxvKSxzLnNsaWNlKDEpfSx1PWZ1bmN0aW9uKHIsZSx0KXtyZXR1cm4gci5yZWR1Y2UoZnVuY3Rpb24ocixhLG4pe3ZhciBjPWVbbl07aWYoYyYmYy5jYWxsKXt2YXIgaT1jKHQpLG89aSYmaS5wcm9wcyYmaS5wcm9wcy5jbGFzc05hbWV8fC9eZ28vLnRlc3QoaSkmJmk7Yz1vP1wiLlwiK286aSYmaS5wcm9wcz9cIlwiOml9cmV0dXJuIHIrYSsoY3x8XCJcIil9LFwiXCIpfTtmdW5jdGlvbiBzKHIpe3ZhciB0PXRoaXN8fHt9LGE9ci5jYWxsP3IodC5wKTpyO3JldHVybiBvKGEubWFwP3UoYSxbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSx0LnApOmEsZSh0LnRhcmdldCksdC5nLHQubyl9dmFyIGYsbCxwLGc9cy5iaW5kKHtnOjF9KSxkPWZ1bmN0aW9uKHIsZSx0KXtmPXIsbD1lLHA9dH07ZnVuY3Rpb24gdihyKXt2YXIgZT10aGlzfHx7fTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHM7ZnVuY3Rpb24gYShhLG4pe3ZhciBjPWUucD1PYmplY3QuYXNzaWduKHA/e3RoZW1lOnAoKX06e30sYSksaT1jLmNsYXNzTmFtZTtyZXR1cm4gZS5vPS9cXHMqZ29bMC05XSsvZy50ZXN0KGkpLGMuY2xhc3NOYW1lPXMuYXBwbHkoZSx0KSsoaT9cIiBcIitpOlwiXCIpLGMucmVmPW4sZihyLGMpfXJldHVybiBsP2woYSk6YX19ZXhwb3J0e3YgYXMgc3R5bGVkLGQgYXMgc2V0dXAsdCBhcyBleHRyYWN0Q3NzLHMgYXMgY3NzLGcgYXMgZ2xvYn07XG4iLCJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2Uoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuXG4gIHN0cmluZ3MucmF3ID0gcmF3O1xuICByZXR1cm4gc3RyaW5ncztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2U7IiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHNoYWxsb3dEaWZmZXJzIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBDb21wb25lbnQgY2xhc3Mgd2l0aCBhIHByZWRlZmluZWQgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFB1cmVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3Rvcihwcm9wcykge1xuXHRcdHN1cGVyKHByb3BzKTtcblx0XHQvLyBTb21lIHRoaXJkLXBhcnR5IGxpYnJhcmllcyBjaGVjayBpZiB0aGlzIHByb3BlcnR5IGlzIHByZXNlbnRcblx0XHR0aGlzLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblx0fVxuXG5cdHNob3VsZENvbXBvbmVudFVwZGF0ZShwcm9wcywgc3RhdGUpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0c2hhbGxvd0RpZmZlcnModGhpcy5wcm9wcywgcHJvcHMpIHx8IHNoYWxsb3dEaWZmZXJzKHRoaXMuc3RhdGUsIHN0YXRlKVxuXHRcdCk7XG5cdH1cbn1cbiIsImltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcblxubGV0IG9sZFZOb2RlSG9vayA9IG9wdGlvbnMudm5vZGU7XG5vcHRpb25zLnZub2RlID0gdm5vZGUgPT4ge1xuXHRpZiAodm5vZGUudHlwZSAmJiB2bm9kZS50eXBlLl9mb3J3YXJkZWQgJiYgdm5vZGUucmVmKSB7XG5cdFx0dm5vZGUucHJvcHMucmVmID0gdm5vZGUucmVmO1xuXHRcdHZub2RlLnJlZiA9IG51bGw7XG5cdH1cblxuXHRpZiAob2xkVk5vZGVIb29rKSBvbGRWTm9kZUhvb2sodm5vZGUpO1xufTtcblxuLyoqXG4gKiBQYXNzIHJlZiBkb3duIHRvIGEgY2hpbGQuIFRoaXMgaXMgbWFpbmx5IHVzZWQgaW4gbGlicmFyaWVzIHdpdGggSE9DcyB0aGF0XG4gKiB3cmFwIGNvbXBvbmVudHMuIFVzaW5nIGBmb3J3YXJkUmVmYCB0aGVyZSBpcyBhbiBlYXN5IHdheSB0byBnZXQgYSByZWZlcmVuY2VcbiAqIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBpbnN0ZWFkIG9mIG9uZSBvZiB0aGUgd3JhcHBlciBpdHNlbGYuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLkZvcndhcmRGbn0gZm5cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5GdW5jdGlvbmFsQ29tcG9uZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZFJlZihmbikge1xuXHRmdW5jdGlvbiBGb3J3YXJkZWQocHJvcHMpIHtcblx0XHRsZXQgY2xvbmUgPSBhc3NpZ24oe30sIHByb3BzKTtcblx0XHRkZWxldGUgY2xvbmUucmVmO1xuXHRcdHJldHVybiBmbihjbG9uZSwgcHJvcHMucmVmKTtcblx0fVxuXHRGb3J3YXJkZWQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXHRGb3J3YXJkZWQuX2ZvcndhcmRlZCA9IHRydWU7XG5cdEZvcndhcmRlZC5kaXNwbGF5TmFtZSA9ICdGb3J3YXJkUmVmKCcgKyAoZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSkgKyAnKSc7XG5cdHJldHVybiBGb3J3YXJkZWQ7XG59XG4iLCJpbXBvcnQgeyB0b0NoaWxkQXJyYXkgfSBmcm9tICdwcmVhY3QnO1xuXG5jb25zdCBtYXBGbiA9IChjaGlsZHJlbiwgZm4pID0+IHtcblx0aWYgKCFjaGlsZHJlbikgcmV0dXJuIG51bGw7XG5cdHJldHVybiB0b0NoaWxkQXJyYXkoY2hpbGRyZW4pLm1hcChmbik7XG59O1xuXG4vLyBUaGlzIEFQSSBpcyBjb21wbGV0ZWx5IHVubmVjZXNzYXJ5IGZvciBQcmVhY3QsIHNvIGl0J3MgYmFzaWNhbGx5IHBhc3N0aHJvdWdoLlxuZXhwb3J0IGNvbnN0IENoaWxkcmVuID0ge1xuXHRtYXA6IG1hcEZuLFxuXHRmb3JFYWNoOiBtYXBGbixcblx0Y291bnQoY2hpbGRyZW4pIHtcblx0XHRyZXR1cm4gY2hpbGRyZW4gPyB0b0NoaWxkQXJyYXkoY2hpbGRyZW4pLmxlbmd0aCA6IDA7XG5cdH0sXG5cdG9ubHkoY2hpbGRyZW4pIHtcblx0XHRjaGlsZHJlbiA9IHRvQ2hpbGRBcnJheShjaGlsZHJlbik7XG5cdFx0aWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDaGlsZHJlbi5vbmx5KCkgZXhwZWN0cyBvbmx5IG9uZSBjaGlsZC4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNoaWxkcmVuWzBdO1xuXHR9LFxuXHR0b0FycmF5OiB0b0NoaWxkQXJyYXlcbn07XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQsIG9wdGlvbnMgfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3Qgb2xkQ2F0Y2hFcnJvciA9IG9wdGlvbnMuX2NhdGNoRXJyb3I7XG5vcHRpb25zLl9jYXRjaEVycm9yID0gZnVuY3Rpb24oZXJyb3IsIG5ld1ZOb2RlLCBvbGRWTm9kZSkge1xuXHRpZiAoZXJyb3IudGhlbikge1xuXHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSAqL1xuXHRcdGxldCBjb21wb25lbnQ7XG5cdFx0bGV0IHZub2RlID0gbmV3Vk5vZGU7XG5cblx0XHRmb3IgKDsgKHZub2RlID0gdm5vZGUuX3BhcmVudCk7ICkge1xuXHRcdFx0aWYgKChjb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50KSAmJiBjb21wb25lbnQuX2NoaWxkRGlkU3VzcGVuZCkge1xuXHRcdFx0XHQvLyBEb24ndCBjYWxsIG9sZENhdGNoRXJyb3IgaWYgd2UgZm91bmQgYSBTdXNwZW5zZVxuXHRcdFx0XHRyZXR1cm4gY29tcG9uZW50Ll9jaGlsZERpZFN1c3BlbmQoZXJyb3IsIG5ld1ZOb2RlLl9jb21wb25lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRvbGRDYXRjaEVycm9yKGVycm9yLCBuZXdWTm9kZSwgb2xkVk5vZGUpO1xufTtcblxuZnVuY3Rpb24gZGV0YWNoZWRDbG9uZSh2bm9kZSkge1xuXHRpZiAodm5vZGUpIHtcblx0XHR2bm9kZSA9IGFzc2lnbih7fSwgdm5vZGUpO1xuXHRcdHZub2RlLl9jb21wb25lbnQgPSBudWxsO1xuXHRcdHZub2RlLl9jaGlsZHJlbiA9IHZub2RlLl9jaGlsZHJlbiAmJiB2bm9kZS5fY2hpbGRyZW4ubWFwKGRldGFjaGVkQ2xvbmUpO1xuXHR9XG5cdHJldHVybiB2bm9kZTtcbn1cblxuLy8gaGF2aW5nIGN1c3RvbSBpbmhlcml0YW5jZSBpbnN0ZWFkIG9mIGEgY2xhc3MgaGVyZSBzYXZlcyBhIGxvdCBvZiBieXRlc1xuZXhwb3J0IGZ1bmN0aW9uIFN1c3BlbnNlKHByb3BzKSB7XG5cdC8vIHdlIGRvIG5vdCBjYWxsIHN1cGVyIGhlcmUgdG8gZ29sZiBzb21lIGJ5dGVzLi4uXG5cdHRoaXMuX3N1c3BlbnNpb25zID0gMDtcblx0dGhpcy5fZGV0YWNoT25OZXh0UmVuZGVyID0gbnVsbDtcbn1cblxuLy8gVGhpbmdzIHdlIGRvIGhlcmUgdG8gc2F2ZSBzb21lIGJ5dGVzIGJ1dCBhcmUgbm90IHByb3BlciBKUyBpbmhlcml0YW5jZTpcbi8vIC0gY2FsbCBgbmV3IENvbXBvbmVudCgpYCBhcyB0aGUgcHJvdG90eXBlXG4vLyAtIGRvIG5vdCBzZXQgYFN1c3BlbnNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvcmAgdG8gYFN1c3BlbnNlYFxuU3VzcGVuc2UucHJvdG90eXBlID0gbmV3IENvbXBvbmVudCgpO1xuXG4vKipcbiAqIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZSBUaGUgdGhyb3duIHByb21pc2VcbiAqIEBwYXJhbSB7Q29tcG9uZW50PGFueSwgYW55Pn0gc3VzcGVuZGluZ0NvbXBvbmVudCBUaGUgc3VzcGVuZGluZyBjb21wb25lbnRcbiAqL1xuU3VzcGVuc2UucHJvdG90eXBlLl9jaGlsZERpZFN1c3BlbmQgPSBmdW5jdGlvbihwcm9taXNlLCBzdXNwZW5kaW5nQ29tcG9uZW50KSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuU3VzcGVuc2VDb21wb25lbnR9ICovXG5cdGNvbnN0IGMgPSB0aGlzO1xuXG5cdGNvbnN0IHJlc29sdmUgPSBzdXNwZW5kZWQoYy5fdm5vZGUpO1xuXG5cdGxldCByZXNvbHZlZCA9IGZhbHNlO1xuXHRjb25zdCBvblJlc29sdmVkID0gKCkgPT4ge1xuXHRcdGlmIChyZXNvbHZlZCkgcmV0dXJuO1xuXG5cdFx0cmVzb2x2ZWQgPSB0cnVlO1xuXG5cdFx0aWYgKHJlc29sdmUpIHtcblx0XHRcdHJlc29sdmUob25TdXNwZW5zaW9uQ29tcGxldGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvblN1c3BlbnNpb25Db21wbGV0ZSgpO1xuXHRcdH1cblx0fTtcblxuXHRzdXNwZW5kaW5nQ29tcG9uZW50Ll9zdXNwZW5kZWRDb21wb25lbnRXaWxsVW5tb3VudCA9XG5cdFx0c3VzcGVuZGluZ0NvbXBvbmVudC5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0c3VzcGVuZGluZ0NvbXBvbmVudC5jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcblx0XHRvblJlc29sdmVkKCk7XG5cblx0XHRpZiAoc3VzcGVuZGluZ0NvbXBvbmVudC5fc3VzcGVuZGVkQ29tcG9uZW50V2lsbFVubW91bnQpIHtcblx0XHRcdHN1c3BlbmRpbmdDb21wb25lbnQuX3N1c3BlbmRlZENvbXBvbmVudFdpbGxVbm1vdW50KCk7XG5cdFx0fVxuXHR9O1xuXG5cdGNvbnN0IG9uU3VzcGVuc2lvbkNvbXBsZXRlID0gKCkgPT4ge1xuXHRcdGlmICghLS1jLl9zdXNwZW5zaW9ucykge1xuXHRcdFx0Yy5fdm5vZGUuX2NoaWxkcmVuWzBdID0gYy5zdGF0ZS5fc3VzcGVuZGVkO1xuXHRcdFx0Yy5zZXRTdGF0ZSh7IF9zdXNwZW5kZWQ6IChjLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBudWxsKSB9KTtcblx0XHR9XG5cdH07XG5cblx0aWYgKCFjLl9zdXNwZW5zaW9ucysrKSB7XG5cdFx0Yy5zZXRTdGF0ZSh7IF9zdXNwZW5kZWQ6IChjLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBjLl92bm9kZS5fY2hpbGRyZW5bMF0pIH0pO1xuXHR9XG5cdHByb21pc2UudGhlbihvblJlc29sdmVkLCBvblJlc29sdmVkKTtcbn07XG5cblN1c3BlbnNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihwcm9wcywgc3RhdGUpIHtcblx0aWYgKHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlcikge1xuXHRcdHRoaXMuX3Zub2RlLl9jaGlsZHJlblswXSA9IGRldGFjaGVkQ2xvbmUodGhpcy5fZGV0YWNoT25OZXh0UmVuZGVyKTtcblx0XHR0aGlzLl9kZXRhY2hPbk5leHRSZW5kZXIgPSBudWxsO1xuXHR9XG5cblx0cmV0dXJuIFtcblx0XHRjcmVhdGVFbGVtZW50KENvbXBvbmVudCwgbnVsbCwgc3RhdGUuX3N1c3BlbmRlZCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbiksXG5cdFx0c3RhdGUuX3N1c3BlbmRlZCAmJiBwcm9wcy5mYWxsYmFja1xuXHRdO1xufTtcblxuLyoqXG4gKiBDaGVja3MgYW5kIGNhbGxzIHRoZSBwYXJlbnQgY29tcG9uZW50J3MgX3N1c3BlbmRlZCBtZXRob2QsIHBhc3NpbmcgaW4gdGhlXG4gKiBzdXNwZW5kZWQgdm5vZGUuIFRoaXMgaXMgYSB3YXkgZm9yIGEgcGFyZW50IChlLmcuIFN1c3BlbnNlTGlzdCkgdG8gZ2V0IG5vdGlmaWVkXG4gKiB0aGF0IG9uZSBvZiBpdHMgY2hpbGRyZW4vZGVzY2VuZGFudHMgc3VzcGVuZGVkLlxuICpcbiAqIFRoZSBwYXJlbnQgTUFZIHJldHVybiBhIGNhbGxiYWNrLiBUaGUgY2FsbGJhY2sgd2lsbCBnZXQgY2FsbGVkIHdoZW4gdGhlXG4gKiBzdXNwZW5zaW9uIHJlc29sdmVzLCBub3RpZnlpbmcgdGhlIHBhcmVudCBvZiB0aGUgZmFjdC5cbiAqIE1vcmVvdmVyLCB0aGUgY2FsbGJhY2sgZ2V0cyBmdW5jdGlvbiBgdW5zdXNwZW5kYCBhcyBhIHBhcmFtZXRlci4gVGhlIHJlc29sdmVkXG4gKiBjaGlsZCBkZXNjZW5kYW50IHdpbGwgbm90IGFjdHVhbGx5IGdldCB1bnN1c3BlbmRlZCB1bnRpbCBgdW5zdXNwZW5kYCBnZXRzIGNhbGxlZC5cbiAqIFRoaXMgaXMgYSB3YXkgZm9yIHRoZSBwYXJlbnQgdG8gZGVsYXkgdW5zdXNwZW5kaW5nLlxuICpcbiAqIElmIHRoZSBwYXJlbnQgZG9lcyBub3QgcmV0dXJuIGEgY2FsbGJhY2sgdGhlbiB0aGUgcmVzb2x2ZWQgdm5vZGVcbiAqIGdldHMgdW5zdXNwZW5kZWQgaW1tZWRpYXRlbHkgd2hlbiBpdCByZXNvbHZlcy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vc3JjL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKiBAcmV0dXJucyB7KCh1bnN1c3BlbmQ6ICgpID0+IHZvaWQpID0+IHZvaWQpP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1c3BlbmRlZCh2bm9kZSkge1xuXHRsZXQgY29tcG9uZW50ID0gdm5vZGUuX3BhcmVudC5fY29tcG9uZW50O1xuXHRyZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudC5fc3VzcGVuZGVkICYmIGNvbXBvbmVudC5fc3VzcGVuZGVkKHZub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhenkobG9hZGVyKSB7XG5cdGxldCBwcm9tO1xuXHRsZXQgY29tcG9uZW50O1xuXHRsZXQgZXJyb3I7XG5cblx0ZnVuY3Rpb24gTGF6eShwcm9wcykge1xuXHRcdGlmICghcHJvbSkge1xuXHRcdFx0cHJvbSA9IGxvYWRlcigpO1xuXHRcdFx0cHJvbS50aGVuKFxuXHRcdFx0XHRleHBvcnRzID0+IHtcblx0XHRcdFx0XHRjb21wb25lbnQgPSBleHBvcnRzLmRlZmF1bHQgfHwgZXhwb3J0cztcblx0XHRcdFx0fSxcblx0XHRcdFx0ZSA9PiB7XG5cdFx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXG5cdFx0aWYgKCFjb21wb25lbnQpIHtcblx0XHRcdHRocm93IHByb207XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG5cdH1cblxuXHRMYXp5LmRpc3BsYXlOYW1lID0gJ0xhenknO1xuXHRMYXp5Ll9mb3J3YXJkZWQgPSB0cnVlO1xuXHRyZXR1cm4gTGF6eTtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgdG9DaGlsZEFycmF5IH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IHN1c3BlbmRlZCB9IGZyb20gJy4vc3VzcGVuc2UuanMnO1xuXG4vLyBJbmRleGVzIHRvIGxpbmtlZCBsaXN0IG5vZGVzIChub2RlcyBhcmUgc3RvcmVkIGFzIGFycmF5cyB0byBzYXZlIGJ5dGVzKS5cbmNvbnN0IFNVU1BFTkRFRF9DT1VOVCA9IDA7XG5jb25zdCBSRVNPTFZFRF9DT1VOVCA9IDE7XG5jb25zdCBORVhUX05PREUgPSAyO1xuXG4vLyBIYXZpbmcgY3VzdG9tIGluaGVyaXRhbmNlIGluc3RlYWQgb2YgYSBjbGFzcyBoZXJlIHNhdmVzIGEgbG90IG9mIGJ5dGVzLlxuZXhwb3J0IGZ1bmN0aW9uIFN1c3BlbnNlTGlzdCgpIHtcblx0dGhpcy5fbmV4dCA9IG51bGw7XG5cdHRoaXMuX21hcCA9IG51bGw7XG59XG5cbi8vIE1hcmsgb25lIG9mIGNoaWxkJ3MgZWFybGllciBzdXNwZW5zaW9ucyBhcyByZXNvbHZlZC5cbi8vIFNvbWUgcGVuZGluZyBjYWxsYmFja3MgbWF5IGJlY29tZSBjYWxsYWJsZSBkdWUgdG8gdGhpc1xuLy8gKGUuZy4gdGhlIGxhc3Qgc3VzcGVuZGVkIGRlc2NlbmRhbnQgZ2V0cyByZXNvbHZlZCB3aGVuXG4vLyByZXZlYWxPcmRlciA9PT0gJ3RvZ2V0aGVyJykuIFByb2Nlc3MgdGhvc2UgY2FsbGJhY2tzIGFzIHdlbGwuXG5jb25zdCByZXNvbHZlID0gKGxpc3QsIGNoaWxkLCBub2RlKSA9PiB7XG5cdGlmICgrK25vZGVbUkVTT0xWRURfQ09VTlRdID09PSBub2RlW1NVU1BFTkRFRF9DT1VOVF0pIHtcblx0XHQvLyBUaGUgbnVtYmVyIGEgY2hpbGQgKG9yIGFueSBvZiBpdHMgZGVzY2VuZGFudHMpIGhhcyBiZWVuIHN1c3BlbmRlZFxuXHRcdC8vIG1hdGNoZXMgdGhlIG51bWJlciBvZiB0aW1lcyBpdCdzIGJlZW4gcmVzb2x2ZWQuIFRoZXJlZm9yZSB3ZVxuXHRcdC8vIG1hcmsgdGhlIGNoaWxkIGFzIGNvbXBsZXRlbHkgcmVzb2x2ZWQgYnkgZGVsZXRpbmcgaXQgZnJvbSAuX21hcC5cblx0XHQvLyBUaGlzIGlzIHVzZWQgdG8gZmlndXJlIG91dCB3aGVuICphbGwqIGNoaWxkcmVuIGhhdmUgYmVlbiBjb21wbGV0ZWx5XG5cdFx0Ly8gcmVzb2x2ZWQgd2hlbiByZXZlYWxPcmRlciBpcyAndG9nZXRoZXInLlxuXHRcdGxpc3QuX21hcC5kZWxldGUoY2hpbGQpO1xuXHR9XG5cblx0Ly8gSWYgcmV2ZWFsT3JkZXIgaXMgZmFsc3kgdGhlbiB3ZSBjYW4gZG8gYW4gZWFybHkgZXhpdCwgYXMgdGhlXG5cdC8vIGNhbGxiYWNrcyB3b24ndCBnZXQgcXVldWVkIGluIHRoZSBub2RlIGFueXdheS5cblx0Ly8gSWYgcmV2ZWFsT3JkZXIgaXMgJ3RvZ2V0aGVyJyB0aGVuIGFsc28gZG8gYW4gZWFybHkgZXhpdFxuXHQvLyBpZiBhbGwgc3VzcGVuZGVkIGRlc2NlbmRhbnRzIGhhdmUgbm90IHlldCBiZWVuIHJlc29sdmVkLlxuXHRpZiAoXG5cdFx0IWxpc3QucHJvcHMucmV2ZWFsT3JkZXIgfHxcblx0XHQobGlzdC5wcm9wcy5yZXZlYWxPcmRlclswXSA9PT0gJ3QnICYmIGxpc3QuX21hcC5zaXplKVxuXHQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBXYWxrIHRoZSBjdXJyZW50bHkgc3VzcGVuZGVkIGNoaWxkcmVuIGluIG9yZGVyLCBjYWxsaW5nIHRoZWlyXG5cdC8vIHN0b3JlZCBjYWxsYmFja3Mgb24gdGhlIHdheS4gU3RvcCBpZiB3ZSBlbmNvdW50ZXIgYSBjaGlsZCB0aGF0XG5cdC8vIGhhcyBub3QgYmVlbiBjb21wbGV0ZWx5IHJlc29sdmVkIHlldC5cblx0bm9kZSA9IGxpc3QuX25leHQ7XG5cdHdoaWxlIChub2RlKSB7XG5cdFx0d2hpbGUgKG5vZGUubGVuZ3RoID4gMykge1xuXHRcdFx0bm9kZS5wb3AoKSgpO1xuXHRcdH1cblx0XHRpZiAobm9kZVtSRVNPTFZFRF9DT1VOVF0gPCBub2RlW1NVU1BFTkRFRF9DT1VOVF0pIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRsaXN0Ll9uZXh0ID0gbm9kZSA9IG5vZGVbTkVYVF9OT0RFXTtcblx0fVxufTtcblxuLy8gVGhpbmdzIHdlIGRvIGhlcmUgdG8gc2F2ZSBzb21lIGJ5dGVzIGJ1dCBhcmUgbm90IHByb3BlciBKUyBpbmhlcml0YW5jZTpcbi8vIC0gY2FsbCBgbmV3IENvbXBvbmVudCgpYCBhcyB0aGUgcHJvdG90eXBlXG4vLyAtIGRvIG5vdCBzZXQgYFN1c3BlbnNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvcmAgdG8gYFN1c3BlbnNlYFxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnQoKTtcblxuU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5fc3VzcGVuZGVkID0gZnVuY3Rpb24oY2hpbGQpIHtcblx0Y29uc3QgbGlzdCA9IHRoaXM7XG5cdGNvbnN0IGRlbGVnYXRlZCA9IHN1c3BlbmRlZChsaXN0Ll92bm9kZSk7XG5cblx0bGV0IG5vZGUgPSBsaXN0Ll9tYXAuZ2V0KGNoaWxkKTtcblx0bm9kZVtTVVNQRU5ERURfQ09VTlRdKys7XG5cblx0cmV0dXJuIHVuc3VzcGVuZCA9PiB7XG5cdFx0Y29uc3Qgd3JhcHBlZFVuc3VzcGVuZCA9ICgpID0+IHtcblx0XHRcdGlmICghbGlzdC5wcm9wcy5yZXZlYWxPcmRlcikge1xuXHRcdFx0XHQvLyBTcGVjaWFsIGNhc2UgdGhlIHVuZGVmaW5lZCAoZmFsc3kpIHJldmVhbE9yZGVyLCBhcyB0aGVyZVxuXHRcdFx0XHQvLyBpcyBubyBuZWVkIHRvIGNvb3JkaW5hdGUgYSBzcGVjaWZpYyBvcmRlciBvciB1bnN1c3BlbmRzLlxuXHRcdFx0XHR1bnN1c3BlbmQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vZGUucHVzaCh1bnN1c3BlbmQpO1xuXHRcdFx0XHRyZXNvbHZlKGxpc3QsIGNoaWxkLCBub2RlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmIChkZWxlZ2F0ZWQpIHtcblx0XHRcdGRlbGVnYXRlZCh3cmFwcGVkVW5zdXNwZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d3JhcHBlZFVuc3VzcGVuZCgpO1xuXHRcdH1cblx0fTtcbn07XG5cblN1c3BlbnNlTGlzdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ocHJvcHMpIHtcblx0dGhpcy5fbmV4dCA9IG51bGw7XG5cdHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcblxuXHRjb25zdCBjaGlsZHJlbiA9IHRvQ2hpbGRBcnJheShwcm9wcy5jaGlsZHJlbik7XG5cdGlmIChwcm9wcy5yZXZlYWxPcmRlciAmJiBwcm9wcy5yZXZlYWxPcmRlclswXSA9PT0gJ2InKSB7XG5cdFx0Ly8gSWYgb3JkZXIgPT09ICdiYWNrd2FyZHMnIChvciwgd2VsbCwgYW55dGhpbmcgc3RhcnRpbmcgd2l0aCBhICdiJylcblx0XHQvLyB0aGVuIGZsaXAgdGhlIGNoaWxkIGxpc3QgYXJvdW5kIHNvIHRoYXQgdGhlIGxhc3QgY2hpbGQgd2lsbCBiZVxuXHRcdC8vIHRoZSBmaXJzdCBpbiB0aGUgbGlua2VkIGxpc3QuXG5cdFx0Y2hpbGRyZW4ucmV2ZXJzZSgpO1xuXHR9XG5cdC8vIEJ1aWxkIHRoZSBsaW5rZWQgbGlzdC4gSXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBpbiByZXZlcnNlIG9yZGVyXG5cdC8vIHNvIHRoYXQgYF9uZXh0YCBwb2ludHMgdG8gdGhlIGZpcnN0IGxpbmtlZCBsaXN0IG5vZGUgdG8gYmUgcmVzb2x2ZWQuXG5cdGZvciAobGV0IGkgPSBjaGlsZHJlbi5sZW5ndGg7IGktLTsgKSB7XG5cdFx0Ly8gQ3JlYXRlIGEgbmV3IGxpbmtlZCBsaXN0IG5vZGUgYXMgYW4gYXJyYXkgb2YgZm9ybTpcblx0XHQvLyBcdFtzdXNwZW5kZWRfY291bnQsIHJlc29sdmVkX2NvdW50LCBuZXh0X25vZGVdXG5cdFx0Ly8gd2hlcmUgc3VzcGVuZGVkX2NvdW50IGFuZCByZXNvbHZlZF9jb3VudCBhcmUgbnVtZXJpYyBjb3VudGVycyBmb3Jcblx0XHQvLyBrZWVwaW5nIHRyYWNrIGhvdyBtYW55IHRpbWVzIGEgbm9kZSBoYXMgYmVlbiBzdXNwZW5kZWQgYW5kIHJlc29sdmVkLlxuXHRcdC8vXG5cdFx0Ly8gTm90ZSB0aGF0IHN1c3BlbmRlZF9jb3VudCBzdGFydHMgZnJvbSAxIGluc3RlYWQgb2YgMCwgc28gd2UgY2FuIGJsb2NrXG5cdFx0Ly8gcHJvY2Vzc2luZyBjYWxsYmFja3MgdW50aWwgY29tcG9uZW50RGlkTW91bnQgaGFzIGJlZW4gY2FsbGVkLiBJbiBhIHNlbnNlXG5cdFx0Ly8gbm9kZSBpcyBzdXNwZW5kZWQgYXQgbGVhc3QgdW50aWwgY29tcG9uZW50RGlkTW91bnQgZ2V0cyBjYWxsZWQhXG5cdFx0Ly9cblx0XHQvLyBQZW5kaW5nIGNhbGxiYWNrcyBhcmUgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgbm9kZTpcblx0XHQvLyBcdFtzdXNwZW5kZWRfY291bnQsIHJlc29sdmVkX2NvdW50LCBuZXh0X25vZGUsIGNhbGxiYWNrXzAsIGNhbGxiYWNrXzEsIC4uLl1cblx0XHR0aGlzLl9tYXAuc2V0KGNoaWxkcmVuW2ldLCAodGhpcy5fbmV4dCA9IFsxLCAwLCB0aGlzLl9uZXh0XSkpO1xuXHR9XG5cdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn07XG5cblN1c3BlbnNlTGlzdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gU3VzcGVuc2VMaXN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuXHQvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFmdGVyIG1vdW50aW5nIGZvciB0d28gcmVhc29uczpcblx0Ly8gMS4gQXMgZWFjaCBub2RlW1NVU1BFTkRFRF9DT1VOVF0gc3RhcnRzIGZyb20gMSwgdGhpcyBpdGVyYXRpb24gaW5jcmVhc2VzXG5cdC8vICAgIGVhY2ggbm9kZVtSRUxFQVNFRF9DT1VOVF0gYnkgMSwgdGhlcmVmb3JlIGJhbGFuY2luZyB0aGUgY291bnRlcnMuXG5cdC8vICAgIFRoZSBub2RlcyBjYW4gbm93IGJlIGNvbXBsZXRlbHkgY29uc3VtZWQgZnJvbSB0aGUgbGlua2VkIGxpc3QuXG5cdC8vIDIuIEhhbmRsZSBub2RlcyB0aGF0IG1pZ2h0IGhhdmUgZ290dGVuIHJlc29sdmVkIGJldHdlZW4gcmVuZGVyIGFuZFxuXHQvLyAgICBjb21wb25lbnREaWRNb3VudC5cblx0Y29uc3QgbGlzdCA9IHRoaXM7XG5cdGxpc3QuX21hcC5mb3JFYWNoKChub2RlLCBjaGlsZCkgPT4ge1xuXHRcdHJlc29sdmUobGlzdCwgY2hpbGQsIG5vZGUpO1xuXHR9KTtcbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBoeWRyYXRlLCByZW5kZXIsIF91bm1vdW50IH0gZnJvbSAncHJlYWN0JztcblxuY2xhc3MgQ29udGV4dFByb3ZpZGVyIHtcblx0Z2V0Q2hpbGRDb250ZXh0KCkge1xuXHRcdHJldHVybiB0aGlzLnByb3BzLmNvbnRleHQ7XG5cdH1cblx0cmVuZGVyKHByb3BzKSB7XG5cdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuXHR9XG59XG5cbi8qKlxuICogUG9ydGFsIGNvbXBvbmVudFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsIHwgdW5kZWZpbmVkfSBwcm9wc1xuICovXG5mdW5jdGlvbiBQb3J0YWwocHJvcHMpIHtcblx0bGV0IF90aGlzID0gdGhpcztcblx0bGV0IGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcjtcblx0bGV0IHdyYXAgPSBjcmVhdGVFbGVtZW50KFxuXHRcdENvbnRleHRQcm92aWRlcixcblx0XHR7IGNvbnRleHQ6IF90aGlzLmNvbnRleHQgfSxcblx0XHRwcm9wcy52bm9kZVxuXHQpO1xuXG5cdC8vIFdoZW4gd2UgY2hhbmdlIGNvbnRhaW5lciB3ZSBzaG91bGQgY2xlYXIgb3VyIG9sZCBjb250YWluZXIgYW5kXG5cdC8vIGluZGljYXRlIGEgbmV3IG1vdW50LlxuXHRpZiAoX3RoaXMuX2NvbnRhaW5lciAmJiBfdGhpcy5fY29udGFpbmVyICE9PSBjb250YWluZXIpIHtcblx0XHRpZiAoX3RoaXMuX3RlbXAucGFyZW50Tm9kZSkgX3RoaXMuX2NvbnRhaW5lci5yZW1vdmVDaGlsZChfdGhpcy5fdGVtcCk7XG5cdFx0X3VubW91bnQoX3RoaXMuX3dyYXApO1xuXHRcdF90aGlzLl9oYXNNb3VudGVkID0gZmFsc2U7XG5cdH1cblxuXHQvLyBXaGVuIHByb3BzLnZub2RlIGlzIHVuZGVmaW5lZC9mYWxzZS9udWxsIHdlIGFyZSBkZWFsaW5nIHdpdGggc29tZSBraW5kIG9mXG5cdC8vIGNvbmRpdGlvbmFsIHZub2RlLiBUaGlzIHNob3VsZCBub3QgdHJpZ2dlciBhIHJlbmRlci5cblx0aWYgKHByb3BzLnZub2RlKSB7XG5cdFx0aWYgKCFfdGhpcy5faGFzTW91bnRlZCkge1xuXHRcdFx0Ly8gQ3JlYXRlIGEgcGxhY2Vob2xkZXIgdGhhdCB3ZSBjYW4gdXNlIHRvIGluc2VydCBpbnRvLlxuXHRcdFx0X3RoaXMuX3RlbXAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG5cdFx0XHQvLyBIeWRyYXRlIGV4aXN0aW5nIG5vZGVzIHRvIGtlZXAgdGhlIGRvbSBpbnRhY3QsIHdoZW4gcmVuZGVyaW5nXG5cdFx0XHQvLyB3cmFwIGludG8gdGhlIGNvbnRhaW5lci5cblx0XHRcdGh5ZHJhdGUoJycsIGNvbnRhaW5lcik7XG5cdFx0XHQvLyBBcHBlbmQgdG8gdGhlIGNvbnRhaW5lciAodGhpcyBtYXRjaGVzIFJlYWN0J3MgYmVoYXZpb3IpXG5cdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoX3RoaXMuX3RlbXApO1xuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCB3ZSBoYXZlIG1vdW50ZWQgYW5kIHNob3VsZCBzZXQgb3VyIGNvbnRhaW5lci5cblx0XHRcdF90aGlzLl9oYXNNb3VudGVkID0gdHJ1ZTtcblx0XHRcdF90aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XG5cdFx0XHQvLyBSZW5kZXIgb3VyIHdyYXBwaW5nIGVsZW1lbnQgaW50byB0ZW1wLlxuXHRcdFx0cmVuZGVyKHdyYXAsIGNvbnRhaW5lciwgX3RoaXMuX3RlbXApO1xuXHRcdFx0X3RoaXMuX2NoaWxkcmVuID0gdGhpcy5fdGVtcC5fY2hpbGRyZW47XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFdoZW4gd2UgaGF2ZSBtb3VudGVkIGFuZCB0aGUgdm5vZGUgaXMgcHJlc2VudCBpdCBtZWFucyB0aGVcblx0XHRcdC8vIHByb3BzIGhhdmUgY2hhbmdlZCBvciBhIHBhcmVudCBpcyB0cmlnZ2VyaW5nIGEgcmVyZW5kZXIuXG5cdFx0XHQvLyBUaGlzIGltcGxpZXMgd2Ugb25seSBuZWVkIHRvIGNhbGwgcmVuZGVyLiBCdXQgd2UgbmVlZCB0byBrZWVwXG5cdFx0XHQvLyB0aGUgb2xkIHRyZWUgYXJvdW5kLCBvdGhlcndpc2Ugd2lsbCB0cmVhdCB0aGUgdm5vZGVzIGFzIG5ldyBhbmRcblx0XHRcdC8vIHdpbGwgd3JvbmdseSBjYWxsIGBjb21wb25lbnREaWRNb3VudGAgb24gdGhlbVxuXHRcdFx0Y29udGFpbmVyLl9jaGlsZHJlbiA9IF90aGlzLl9jaGlsZHJlbjtcblx0XHRcdHJlbmRlcih3cmFwLCBjb250YWluZXIpO1xuXHRcdFx0X3RoaXMuX2NoaWxkcmVuID0gY29udGFpbmVyLl9jaGlsZHJlbjtcblx0XHR9XG5cdH1cblx0Ly8gV2hlbiB3ZSBjb21lIGZyb20gYSBjb25kaXRpb25hbCByZW5kZXIsIG9uIGEgbW91bnRlZFxuXHQvLyBwb3J0YWwgd2Ugc2hvdWxkIGNsZWFyIHRoZSBET00uXG5cdGVsc2UgaWYgKF90aGlzLl9oYXNNb3VudGVkKSB7XG5cdFx0aWYgKF90aGlzLl90ZW1wLnBhcmVudE5vZGUpIF90aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQoX3RoaXMuX3RlbXApO1xuXHRcdF91bm1vdW50KF90aGlzLl93cmFwKTtcblx0fVxuXHQvLyBTZXQgdGhlIHdyYXBwaW5nIGVsZW1lbnQgZm9yIGZ1dHVyZSB1bm1vdW50aW5nLlxuXHRfdGhpcy5fd3JhcCA9IHdyYXA7XG5cblx0X3RoaXMuY29tcG9uZW50V2lsbFVubW91bnQgPSAoKSA9PiB7XG5cdFx0aWYgKF90aGlzLl90ZW1wLnBhcmVudE5vZGUpIF90aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQoX3RoaXMuX3RlbXApO1xuXHRcdF91bm1vdW50KF90aGlzLl93cmFwKTtcblx0fTtcblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBgUG9ydGFsYCB0byBjb250aW51ZSByZW5kZXJpbmcgdGhlIHZub2RlIHRyZWUgYXQgYSBkaWZmZXJlbnQgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2bm9kZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gY29udGFpbmVyIFRoZSBET00gbm9kZSB0byBjb250aW51ZSByZW5kZXJpbmcgaW4gdG8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb3J0YWwodm5vZGUsIGNvbnRhaW5lcikge1xuXHRyZXR1cm4gY3JlYXRlRWxlbWVudChQb3J0YWwsIHsgdm5vZGUsIGNvbnRhaW5lciB9KTtcbn1cbiIsIi8qKlxuICogTm9ybWFsaXplIGV2ZW50IGhhbmRsZXJzIGxpa2UgcmVhY3QgZG9lcy4gTW9zdCBmYW1vdXNseSBpdCB1c2VzIGBvbkNoYW5nZWAgZm9yIGFueSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZub2RlIHRvIG5vcm1hbGl6ZSBldmVudHMgb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RXZlbnROb3JtYWxpemF0aW9uKHsgdHlwZSwgcHJvcHMgfSkge1xuXHRpZiAoIXByb3BzIHx8IHR5cGVvZiB0eXBlICE9ICdzdHJpbmcnKSByZXR1cm47XG5cdGxldCBuZXdQcm9wcyA9IHt9O1xuXG5cdGZvciAobGV0IGkgaW4gcHJvcHMpIHtcblx0XHRpZiAoL15vbihBbml8VHJhfFRvdSkvLnRlc3QoaSkpIHtcblx0XHRcdHByb3BzW2kudG9Mb3dlckNhc2UoKV0gPSBwcm9wc1tpXTtcblx0XHRcdGRlbGV0ZSBwcm9wc1tpXTtcblx0XHR9XG5cdFx0bmV3UHJvcHNbaS50b0xvd2VyQ2FzZSgpXSA9IGk7XG5cdH1cblx0aWYgKG5ld1Byb3BzLm9uZG91YmxlY2xpY2spIHtcblx0XHRwcm9wcy5vbmRibGNsaWNrID0gcHJvcHNbbmV3UHJvcHMub25kb3VibGVjbGlja107XG5cdFx0ZGVsZXRlIHByb3BzW25ld1Byb3BzLm9uZG91YmxlY2xpY2tdO1xuXHR9XG5cdGlmIChuZXdQcm9wcy5vbmJlZm9yZWlucHV0KSB7XG5cdFx0cHJvcHMub25iZWZvcmVpbnB1dCA9IHByb3BzW25ld1Byb3BzLm9uYmVmb3JlaW5wdXRdO1xuXHRcdGRlbGV0ZSBwcm9wc1tuZXdQcm9wcy5vbmJlZm9yZWlucHV0XTtcblx0fVxuXHQvLyBmb3IgKnRleHR1YWwgaW5wdXRzKiAoaW5jbCB0ZXh0YXJlYSksIG5vcm1hbGl6ZSBgb25DaGFuZ2VgIC0+IGBvbklucHV0YDpcblx0aWYgKFxuXHRcdG5ld1Byb3BzLm9uY2hhbmdlICYmXG5cdFx0KHR5cGUgPT09ICd0ZXh0YXJlYScgfHxcblx0XHRcdCh0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgIS9eZmlsfGNoZXxyYS9pLnRlc3QocHJvcHMudHlwZSkpKVxuXHQpIHtcblx0XHRsZXQgbm9ybWFsaXplZCA9IG5ld1Byb3BzLm9uaW5wdXQgfHwgJ29uaW5wdXQnO1xuXHRcdGlmICghcHJvcHNbbm9ybWFsaXplZF0pIHtcblx0XHRcdHByb3BzW25vcm1hbGl6ZWRdID0gcHJvcHNbbmV3UHJvcHMub25jaGFuZ2VdO1xuXHRcdFx0ZGVsZXRlIHByb3BzW25ld1Byb3BzLm9uY2hhbmdlXTtcblx0XHR9XG5cdH1cbn1cbiIsIiFmdW5jdGlvbihlLHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPXQocmVxdWlyZShcInByZWFjdFwiKSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtcInByZWFjdFwiXSx0KTtlbHNle3ZhciBuPXQoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/cmVxdWlyZShcInByZWFjdFwiKTplLnByZWFjdCk7Zm9yKHZhciBvIGluIG4pKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHM6ZSlbb109bltvXX19KHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQobyl7aWYobltvXSlyZXR1cm4gbltvXS5leHBvcnRzO3ZhciByPW5bb109e2V4cG9ydHM6e30saWQ6byxsb2FkZWQ6ITF9O3JldHVybiBlW29dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLHQpLHIubG9hZGVkPSEwLHIuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiByKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6YSh0KSkpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9ZnVuY3Rpb24gdShlLHQsbil7dmFyIHU9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gdSgpe28odGhpcyx1KTt2YXIgdD1SZWZsZWN0LmNvbnN0cnVjdChIVE1MRWxlbWVudCxbXSx1KTtyZXR1cm4gdC5fdmRvbUNvbXBvbmVudD1lLHR9cmV0dXJuIHIodSx0KSxzKHUsW3trZXk6XCJjb25uZWN0ZWRDYWxsYmFja1wiLHZhbHVlOmZ1bmN0aW9uKCl7aS5hcHBseSh0aGlzKX19LHtrZXk6XCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe2kuYXBwbHkodGhpcyl9fSx7a2V5OlwiZGV0YWNoZWRDYWxsYmFja1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zi5hcHBseSh0aGlzKX19XSxbe2tleTpcIm9ic2VydmVkQXR0cmlidXRlc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiBufX1dKSx1fShIVE1MRWxlbWVudCk7cmV0dXJuIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodHx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lLHUpfWZ1bmN0aW9uIGkoKXt0aGlzLl9yb290PSgwLGwucmVuZGVyKShjKHRoaXMsdGhpcy5fdmRvbUNvbXBvbmVudCksdGhpcyx0aGlzLl9yb290KX1mdW5jdGlvbiBmKCl7KDAsbC5yZW5kZXIpKCgwLGwuaCkocCksdGhpcyx0aGlzLl9yb290KX1mdW5jdGlvbiBjKGUsdCl7aWYoMz09PWUubm9kZVR5cGUpcmV0dXJuIGUubm9kZVZhbHVlO2lmKDEhPT1lLm5vZGVUeXBlKXJldHVybiBudWxsO3ZhciBuPVtdLG89e30scj0wLHU9ZS5hdHRyaWJ1dGVzLGk9ZS5jaGlsZE5vZGVzO2ZvcihyPXUubGVuZ3RoO3ItLTspb1t1W3JdLm5hbWVdPXVbcl0udmFsdWU7Zm9yKHI9aS5sZW5ndGg7ci0tOyluW3JdPWMoaVtyXSk7cmV0dXJuKDAsbC5oKSh0fHxlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksbyxuKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTt0W1wiZGVmYXVsdFwiXT11O3ZhciBsPW4oMSkscD1mdW5jdGlvbigpe3JldHVybiBudWxsfSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxvJiZlKHQsbyksdH19KCl9LGZ1bmN0aW9uKHQsbil7dC5leHBvcnRzPWV9XSl9KTsiLCJcbmNvbnN0IGNvbG9ycyA9IHtcbiAgJEQxMDogXCIjMTYyRDNEXCIsIC8vIE1haW4gaW5wdXQgdGV4dCwgdGl0bGVzXG4gICREMjA6IFwiIzMyNTM2QVwiLCAvLyBUaXRsZXMsIHRleHRzXG4gICREMzA6IFwiIzU3NzA4M1wiLCAvLyBUZXh0c1xuICAkRDQwOiBcIiM3QTkyQTVcIiwgLy8gRGl2aWRlcnMsIHRleHRzLCBQbGFjZWhvbGRlclxuICAkRDUwOiBcIiNCNkMxQ0RcIiwgLy8gRGl2aWRlcnMsIHRleHRzXG4gICRENTU6IFwiI0NCRDNEQ1wiLCAvLyBEaXNhYmxlZCBidXR0b24gLSBuZXcgdmVyc2lvbiAtIG5hbWluZyBub3QgZmluYWxcbiAgJEQ2MDogXCIjREZFNUVCXCIsIC8vIERpdmlkZXJzXG4gICRENzA6IFwiI0YwRjRGN1wiLCAvLyBQYWdlIGJhY2tncm91bmQsIGRpdmlkZXJzXG4gICREODA6IFwiI0ZGRkZGRlwiLCAvLyBDb250ZW50IGJveCBiYWNrZ3JvdW5kXG5cbiAgJEIwMDogXCIjMkI4MUNCXCIsIC8vIEJ1dHRvbnNcbiAgJEIwNTogXCIjMzA4REREXCIsIC8vIENUQVxuICAkQjEwOiBcIiMzODk5RUNcIiwgLy8gTWFpbiBhY3Rpb24gY29sb3IsIGFjdGl2ZSwgYnV0dG9uc1xuICAkQjIwOiBcIiM0RUI3RjVcIiwgLy8gSG92ZXIgZm9yIGVsZW1lbnRzIHdpdGggQjEwLCBidXR0b25zXG4gICRCMjU6IFwiI0ExRDdGQlwiLFxuICAkQjI3OiBcIiNCM0UwRkJcIixcbiAgJEIzMDogXCIjQzFFNEZFXCIsIC8vIE5vdGlmaWNhdGlvbnNcbiAgJEI0MDogXCIjREFFRkZFXCIsIC8vIERpdmlkZXJzLCB0YWJsZSBzZWxlY3RlZCwgdGFibGUgaGVhZGVyc1xuICAkQjUwOiBcIiNFQUY3RkZcIiwgLy8gRGl2aWRlcnNcbiAgJEI2MDogXCIjRjRGQUZFXCIsIC8vIFRhYmxlIGhvdmVyXG59O1xuXG5jb25zdCBzaWRlYmFyID0ge1xuICBjb2xvcnM6IHtcbiAgICAkYmc6IFwiIzIzMjYzZVwiLFxuICAgICRkaXZpZGVyOiBcIiM0MzQ1NjdcIixcbiAgICAkYmdIb3ZlcjogXCIjMmUzMjQ5XCIsXG4gICAgJGJnQWN0aXZlOiBcIiMzOTNmNTlcIixcbiAgfSxcbn1cbmNvbnN0IHRoZW1lID0ge1xuICBjb2xvcnMsXG4gIHNpZGViYXIsXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IHRoZW1lO1xuIiwiaW1wb3J0IHtcbiBoLCBjcmVhdGVDb250ZXh0LCBDb21wb25lbnRDaGlsZHJlbiwgRnVuY3Rpb25Db21wb25lbnQsXG59IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IGZvcndhcmRSZWYsIHVzZUNvbnRleHQgfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xuaW1wb3J0IHsgc3R5bGVkLCBzZXR1cCB9IGZyb20gXCJAbmtzYXJhZi9nb29iZXJcIjtcbmltcG9ydCB0aGVtZSBmcm9tIFwiLi91dGlscy9nbG9iYWxTdHlsZXNcIjtcblxuY29uc3QgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh0aGVtZSk7XG5jb25zdCB1c2VUaGVtZSA9ICgpID0+IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbnNldHVwKGgsIGZvcndhcmRSZWYsIHVzZVRoZW1lKTtcblxuXG5jb25zdCBBcHA6IEZ1bmN0aW9uQ29tcG9uZW50ID0gKHsgY2hpbGRyZW4gfSkgPT4gPFN0eWxlZEJhc2U+e2NoaWxkcmVufTwvU3R5bGVkQmFzZT47XG5cblxuY29uc3QgU3R5bGVkQmFzZSA9IHN0eWxlZDx7IGNoaWxkcmVuOiBDb21wb25lbnRDaGlsZHJlbiB9PihcImRpdlwiKWBcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5pbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHJlZ2lzdGVyIGZyb20gJ3ByZWFjdC1jdXN0b20tZWxlbWVudCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi4vLi4vQXBwXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgICBzaXplPzogTnVtYmVyLFxuICAgIGNvbG9yPzogU3RyaW5nLFxuICAgIGNsYXNzTmFtZT86IFN0cmluZyxcbiAgICBkZWxheT86IE51bWJlclxufVxuXG5jb25zdCBCYXIgPSAoY29uZmlnOiBQcm9wcykgPT4ge1xuICAgIGNvbnN0IGFzc2lnbiA9ICh0bywgZnJvbSkgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyhmcm9tIHx8IHt9KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfTtcblxuICAgIGNvbmZpZyA9IGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgICAgc2l6ZTogMixcbiAgICAgICAgICAgIGNvbG9yOiBcIiMyOWVcIixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJiYXItb2YtcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIGRlbGF5OiA4MCxcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlnLFxuICAgICk7XG5cbiAgICBjb25zdCBpbml0aWFsU3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJjdXJyZW50Q29sb3JcIixcbiAgICAgICAgekluZGV4OiAxMDAwMCxcbiAgICAgICAgaGVpZ2h0OiB0eXBlb2YgY29uZmlnLnNpemUgPT09IFwibnVtYmVyXCIgPyBgJHtjb25maWcuc2l6ZX1weGAgOiBjb25maWcuc2l6ZSxcbiAgICAgICAgY29sb3I6IGNvbmZpZy5jb2xvcixcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgd2lkdGg6IFwiMCVcIixcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RhcnRlZFN0eWxlID0ge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB3aWR0aDogXCI5OSVcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJ3aWR0aCAxMHMgY3ViaWMtYmV6aWVyKDAuMSwgMC4wNSwgMCwgMSlcIixcbiAgICB9O1xuXG4gICAgY29uc3QgZmluaXNoZWRTdHlsZSA9IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICB0cmFuc2l0aW9uOiBcIndpZHRoIDAuMXMgZWFzZS1vdXQsIG9wYWNpdHkgMC41cyBlYXNlIDAuMnNcIixcbiAgICB9O1xuXG4gICAgY29uc3QgZ2xvd1N0eWxlID0ge1xuICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgIGJveFNoYWRvdzogXCIzcHggMCA4cHhcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICB9O1xuXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IHRpbWVvdXQ7XG5cbiAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBjdXJyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgICAgIGN1cnJlbnQuY2xhc3NOYW1lID0gYCR7Y29uZmlnLmNsYXNzTmFtZX0gc3RvcHBlZGA7XG4gICAgICAgIGFzc2lnbihjdXJyZW50LnN0eWxlLCBpbml0aWFsU3R5bGUpO1xuXG4gICAgICAgIGNvbnN0IGdsb3cgPSBjdXJyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgICAgICBnbG93LmNsYXNzTmFtZSA9IFwiZ2xvd1wiO1xuICAgICAgICBhc3NpZ24oZ2xvdy5zdHlsZSwgZ2xvd1N0eWxlKTtcblxuICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBjdXJyZW50LmNsYXNzTmFtZSA9IGAke2NvbmZpZy5jbGFzc05hbWV9IHN0YXJ0ZWRgO1xuICAgICAgICAgICAgYXNzaWduKGN1cnJlbnQuc3R5bGUsIHN0YXJ0ZWRTdHlsZSk7XG4gICAgICAgIH0sIGNvbmZpZy5kZWxheSk7XG5cbiAgICAgICAgLy8gRm9yY2UgYSByZWZsb3csIGp1c3QgdG8gYmUgc3VyZSB0aGF0IHRoZSBpbml0aWFsIHN0eWxlIHRha2VzIGVmZmVjdC5cbiAgICAgICAgY3VycmVudC5zY3JvbGxUb3AgPSAwO1xuICAgIH07XG5cbiAgICBjb25zdCBmaW5pc2ggPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICBjdXJyZW50LmNsYXNzTmFtZSA9IGAke2NvbmZpZy5jbGFzc05hbWV9IGZpbmlzaGVkYDtcbiAgICAgICAgICAgIGFzc2lnbihjdXJyZW50LnN0eWxlLCBmaW5pc2hlZFN0eWxlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4geyBmaW5pc2gsIHN0YXJ0IH1cbn1cblxuXG5jb25zdCBQcm9ncmVzc0JhciA9ICh7IHN0YXRlIH0pID0+IHtcbiAgICBjb25zdCBwcm9ncmVzcyA9IEJhcih7IHNpemU6IDIsIGNvbG9yOiBcIiMzODk5RUNcIiwgZGVsYXk6IDAgfSk7XG4gICAgY29uc3QgY29tcHBvbmVudFJlZiA9IHVzZVJlZigpO1xuXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUgPT09ICdydW4nKSB7XG4gICAgICAgICAgICBwcm9ncmVzcy5zdGFydCgpXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy5maW5pc2goKTtcbiAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICB9XG4gICAgfSwgW3N0YXRlXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwcCByZWY9e2NvbXBwb25lbnRSZWZ9IC8+XG4gICAgKVxufVxuXG5cbnJlZ2lzdGVyKFByb2dyZXNzQmFyLCAneC1wcm9ncmVzc2JhcicsIFsnc3RhdGUnXSk7XG4iXSwic291cmNlUm9vdCI6IiJ9
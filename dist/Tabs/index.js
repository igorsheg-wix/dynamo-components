!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=14)}([function(e,n,t){"use strict";t.r(n),t.d(n,"render",(function(){return B})),t.d(n,"hydrate",(function(){return T})),t.d(n,"createElement",(function(){return v})),t.d(n,"h",(function(){return v})),t.d(n,"Fragment",(function(){return y})),t.d(n,"createRef",(function(){return m})),t.d(n,"isValidElement",(function(){return o})),t.d(n,"Component",(function(){return b})),t.d(n,"cloneElement",(function(){return U})),t.d(n,"createContext",(function(){return H})),t.d(n,"toChildArray",(function(){return w})),t.d(n,"_unmount",(function(){return $})),t.d(n,"options",(function(){return r}));var r,o,i,u,c,l,a,f={},s=[],_=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function p(e,n){for(var t in n)e[t]=n[t];return e}function d(e){var n=e.parentNode;n&&n.removeChild(e)}function v(e,n,t){var r,o=arguments,i={};for(r in n)"key"!==r&&"ref"!==r&&(i[r]=n[r]);if(arguments.length>3)for(t=[t],r=3;r<arguments.length;r++)t.push(o[r]);if(null!=t&&(i.children=t),"function"==typeof e&&null!=e.defaultProps)for(r in e.defaultProps)void 0===i[r]&&(i[r]=e.defaultProps[r]);return h(e,i,n&&n.key,n&&n.ref)}function h(e,n,t,o){var i={type:e,props:n,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:null,__c:null,constructor:void 0};return r.vnode&&r.vnode(i),i}function m(){return{}}function y(e){return e.children}function b(e,n){this.props=e,this.context=n}function g(e,n){if(null==n)return e.__?g(e.__,e.__.__k.indexOf(e)+1):null;for(var t;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e)return t.__e;return"function"==typeof e.type?g(e):null}function k(e){var n,t;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,n=0;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e){e.__e=e.__c.base=t.__e;break}return k(e)}}function C(e){(!e.__d&&(e.__d=!0)&&1===i.push(e)||c!==r.debounceRendering)&&((c=r.debounceRendering)||u)(x)}function x(){var e,n,t,r,o,u,c;for(i.sort((function(e,n){return n.__v.__b-e.__v.__b}));e=i.pop();)e.__d&&(t=void 0,r=void 0,u=(o=(n=e).__v).__e,(c=n.__P)&&(t=[],r=S(c,o,p({},o),n.__n,void 0!==c.ownerSVGElement,null,t,null==u?g(o):u),A(t,o),r!=u&&k(o)))}function O(e,n,t,r,o,i,u,c,l){var a,_,p,v,h,m,y,b=t&&t.__k||s,k=b.length;if(c==f&&(c=null!=i?i[0]:k?g(t,0):null),a=0,n.__k=w(n.__k,(function(t){if(null!=t){if(t.__=n,t.__b=n.__b+1,null===(p=b[a])||p&&t.key==p.key&&t.type===p.type)b[a]=void 0;else for(_=0;_<k;_++){if((p=b[_])&&t.key==p.key&&t.type===p.type){b[_]=void 0;break}p=null}if(v=S(e,t,p=p||f,r,o,i,u,c,l),(_=t.ref)&&p.ref!=_&&(y||(y=[]),p.ref&&y.push(p.ref,null,t),y.push(_,t.__c||v,t)),null!=v){if(null==m&&(m=v),null!=t.__d)v=t.__d,t.__d=null;else if(i==p||v!=c||null==v.parentNode){e:if(null==c||c.parentNode!==e)e.appendChild(v);else{for(h=c,_=0;(h=h.nextSibling)&&_<k;_+=2)if(h==v)break e;e.insertBefore(v,c)}"option"==n.type&&(e.value="")}c=v.nextSibling,"function"==typeof n.type&&(n.__d=v)}}return a++,t})),n.__e=m,null!=i&&"function"!=typeof n.type)for(a=i.length;a--;)null!=i[a]&&d(i[a]);for(a=k;a--;)null!=b[a]&&$(b[a],b[a]);if(y)for(a=0;a<y.length;a++)F(y[a],y[++a],y[++a])}function w(e,n,t){if(null==t&&(t=[]),null==e||"boolean"==typeof e)n&&t.push(n(null));else if(Array.isArray(e))for(var r=0;r<e.length;r++)w(e[r],n,t);else t.push(n?n("string"==typeof e||"number"==typeof e?h(null,e,null,null):null!=e.__e||null!=e.__c?h(e.type,e.props,e.key,null):e):e);return t}function N(e,n,t){"-"===n[0]?e.setProperty(n,t):e[n]="number"==typeof t&&!1===_.test(n)?t+"px":null==t?"":t}function j(e,n,t,r,o){var i,u,c,l,a;if(o?"className"===n&&(n="class"):"class"===n&&(n="className"),"key"===n||"children"===n);else if("style"===n)if(i=e.style,"string"==typeof t)i.cssText=t;else{if("string"==typeof r&&(i.cssText="",r=null),r)for(u in r)t&&u in t||N(i,u,"");if(t)for(c in t)r&&t[c]===r[c]||N(i,c,t[c])}else"o"===n[0]&&"n"===n[1]?(l=n!==(n=n.replace(/Capture$/,"")),a=n.toLowerCase(),n=(a in e?a:n).slice(2),t?(r||e.addEventListener(n,E,l),(e.l||(e.l={}))[n]=t):e.removeEventListener(n,E,l)):"list"!==n&&"tagName"!==n&&"form"!==n&&"type"!==n&&!o&&n in e?e[n]=null==t?"":t:"function"!=typeof t&&"dangerouslySetInnerHTML"!==n&&(n!==(n=n.replace(/^xlink:?/,""))?null==t||!1===t?e.removeAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase()):e.setAttributeNS("http://www.w3.org/1999/xlink",n.toLowerCase(),t):null==t||!1===t?e.removeAttribute(n):e.setAttribute(n,t))}function E(e){this.l[e.type](r.event?r.event(e):e)}function S(e,n,t,o,i,u,c,l,a){var f,s,_,d,v,h,m,g,k,C,x=n.type;if(void 0!==n.constructor)return null;(f=r.__b)&&f(n);try{e:if("function"==typeof x){if(g=n.props,k=(f=x.contextType)&&o[f.__c],C=f?k?k.props.value:f.__:o,t.__c?m=(s=n.__c=t.__c).__=s.__E:("prototype"in x&&x.prototype.render?n.__c=s=new x(g,C):(n.__c=s=new b(g,C),s.constructor=x,s.render=P),k&&k.sub(s),s.props=g,s.state||(s.state={}),s.context=C,s.__n=o,_=s.__d=!0,s.__h=[]),null==s.__s&&(s.__s=s.state),null!=x.getDerivedStateFromProps&&(s.__s==s.state&&(s.__s=p({},s.__s)),p(s.__s,x.getDerivedStateFromProps(g,s.__s))),d=s.props,v=s.state,_)null==x.getDerivedStateFromProps&&null!=s.componentWillMount&&s.componentWillMount(),null!=s.componentDidMount&&s.__h.push(s.componentDidMount);else{if(null==x.getDerivedStateFromProps&&g!==d&&null!=s.componentWillReceiveProps&&s.componentWillReceiveProps(g,C),!s.__e&&null!=s.shouldComponentUpdate&&!1===s.shouldComponentUpdate(g,s.__s,C)){for(s.props=g,s.state=s.__s,s.__d=!1,s.__v=n,n.__e=t.__e,n.__k=t.__k,s.__h.length&&c.push(s),f=0;f<n.__k.length;f++)n.__k[f]&&(n.__k[f].__=n);break e}null!=s.componentWillUpdate&&s.componentWillUpdate(g,s.__s,C),null!=s.componentDidUpdate&&s.__h.push((function(){s.componentDidUpdate(d,v,h)}))}s.context=C,s.props=g,s.state=s.__s,(f=r.__r)&&f(n),s.__d=!1,s.__v=n,s.__P=e,f=s.render(s.props,s.state,s.context),n.__k=w(null!=f&&f.type==y&&null==f.key?f.props.children:f),null!=s.getChildContext&&(o=p(p({},o),s.getChildContext())),_||null==s.getSnapshotBeforeUpdate||(h=s.getSnapshotBeforeUpdate(d,v)),O(e,n,t,o,i,u,c,l,a),s.base=n.__e,s.__h.length&&c.push(s),m&&(s.__E=s.__=null),s.__e=null}else n.__e=D(t.__e,n,t,o,i,u,c,a);(f=r.diffed)&&f(n)}catch(e){r.__e(e,n,t)}return n.__e}function A(e,n){r.__c&&r.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){r.__e(e,n.__v)}}))}function D(e,n,t,r,o,i,u,c){var l,a,_,p,d,v=t.props,h=n.props;if(o="svg"===n.type||o,null==e&&null!=i)for(l=0;l<i.length;l++)if(null!=(a=i[l])&&(null===n.type?3===a.nodeType:a.localName===n.type)){e=a,i[l]=null;break}if(null==e){if(null===n.type)return document.createTextNode(h);e=o?document.createElementNS("http://www.w3.org/2000/svg",n.type):document.createElement(n.type),i=null}if(null===n.type)null!=i&&(i[i.indexOf(e)]=null),v!==h&&e.data!=h&&(e.data=h);else if(n!==t){if(null!=i&&(i=s.slice.call(e.childNodes)),_=(v=t.props||f).dangerouslySetInnerHTML,p=h.dangerouslySetInnerHTML,!c){if(v===f)for(v={},d=0;d<e.attributes.length;d++)v[e.attributes[d].name]=e.attributes[d].value;(p||_)&&(p&&_&&p.__html==_.__html||(e.innerHTML=p&&p.__html||""))}(function(e,n,t,r,o){var i;for(i in t)i in n||j(e,i,null,t[i],r);for(i in n)o&&"function"!=typeof n[i]||"value"===i||"checked"===i||t[i]===n[i]||j(e,i,n[i],t[i],r)})(e,h,v,o,c),n.__k=n.props.children,p||O(e,n,t,r,"foreignObject"!==n.type&&o,i,u,f,c),c||("value"in h&&void 0!==h.value&&h.value!==e.value&&(e.value=null==h.value?"":h.value),"checked"in h&&void 0!==h.checked&&h.checked!==e.checked&&(e.checked=h.checked))}return e}function F(e,n,t){try{"function"==typeof e?e(n):e.current=n}catch(e){r.__e(e,t)}}function $(e,n,t){var o,i,u;if(r.unmount&&r.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||F(o,null,n)),t||"function"==typeof e.type||(t=null!=(i=e.__e)),e.__e=e.__d=null,null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){r.__e(e,n)}o.base=o.__P=null}if(o=e.__k)for(u=0;u<o.length;u++)o[u]&&$(o[u],n,t);null!=i&&d(i)}function P(e,n,t){return this.constructor(e,t)}function B(e,n,t){var o,i,u;r.__&&r.__(e,n),i=(o=t===l)?null:t&&t.__k||n.__k,e=v(y,null,[e]),u=[],S(n,(o?n:t||n).__k=e,i||f,f,void 0!==n.ownerSVGElement,t&&!o?[t]:i?null:s.slice.call(n.childNodes),u,t||f,o),A(u,e)}function T(e,n){B(e,n,l)}function U(e,n){return n=p(p({},e.props),n),arguments.length>2&&(n.children=s.slice.call(arguments,2)),h(e.type,n,n.key||e.key,n.ref||e.ref)}function H(e){var n={},t={__c:"__cC"+a++,__:e,Consumer:function(e,n){return e.children(n)},Provider:function(e){var r,o=this;return this.getChildContext||(r=[],this.getChildContext=function(){return n[t.__c]=o,n},this.shouldComponentUpdate=function(n){e.value!==n.value&&r.some((function(e){e.context=n.value,C(e)}))},this.sub=function(e){r.push(e);var n=e.componentWillUnmount;e.componentWillUnmount=function(){r.splice(r.indexOf(e),1),n&&n.call(e)}}),e.children}};return t.Consumer.contextType=t,t}r={__e:function(e,n){for(var t,r;n=n.__;)if((t=n.__c)&&!t.__)try{if(t.constructor&&null!=t.constructor.getDerivedStateFromError&&(r=!0,t.setState(t.constructor.getDerivedStateFromError(e))),null!=t.componentDidCatch&&(r=!0,t.componentDidCatch(e)),r)return C(t.__E=t)}catch(n){e=n}throw e}},o=function(e){return null!=e&&void 0===e.constructor},b.prototype.setState=function(e,n){var t;t=this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(t,this.props)),e&&p(t,e),null!=e&&this.__v&&(this.__e=!1,n&&this.__h.push(n),C(this))},b.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),C(this))},b.prototype.render=y,i=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,l=f,a=0},function(e,n,t){"use strict";t.d(n,"j",(function(){return p})),t.d(n,"h",(function(){return d})),t.d(n,"d",(function(){return v})),t.d(n,"f",(function(){return h})),t.d(n,"i",(function(){return m})),t.d(n,"e",(function(){return y})),t.d(n,"g",(function(){return b})),t.d(n,"a",(function(){return g})),t.d(n,"b",(function(){return k})),t.d(n,"c",(function(){return C}));var r,o,i,u=t(0),c=[],l=u.options.__r,a=u.options.diffed,f=u.options.__c,s=u.options.unmount;function _(e){u.options.__h&&u.options.__h(o);var n=o.__H||(o.__H={t:[],u:[]});return e>=n.t.length&&n.t.push({}),n.t[e]}function p(e){return d(j,e)}function d(e,n,t){var i=_(r++);return i.__c||(i.__c=o,i.i=[t?t(n):j(void 0,n),function(n){var t=e(i.i[0],n);i.i[0]!==t&&(i.i[0]=t,i.__c.setState({}))}]),i.i}function v(e,n){var t=_(r++);N(t.o,n)&&(t.i=e,t.o=n,o.__H.u.push(t))}function h(e,n){var t=_(r++);N(t.o,n)&&(t.i=e,t.o=n,o.__h.push(t))}function m(e){return b((function(){return{current:e}}),[])}function y(e,n,t){h((function(){"function"==typeof e?e(n()):e&&(e.current=n())}),null==t?t:t.concat(e))}function b(e,n){var t=_(r++);return N(t.o,n)?(t.o=n,t.v=e,t.i=e()):t.i}function g(e,n){return b((function(){return e}),n)}function k(e){var n=o.context[e.__c];if(!n)return e.__;var t=_(r++);return null==t.i&&(t.i=!0,n.sub(o)),n.props.value}function C(e,n){u.options.useDebugValue&&u.options.useDebugValue(n?n(e):e)}function x(){c.some((function(e){e.__P&&(e.__H.u.forEach(O),e.__H.u.forEach(w),e.__H.u=[])})),c=[]}function O(e){e.m&&e.m()}function w(e){var n=e.i();"function"==typeof n&&(e.m=n)}function N(e,n){return!e||n.some((function(n,t){return n!==e[t]}))}function j(e,n){return"function"==typeof n?n(e):n}u.options.__r=function(e){l&&l(e),r=0,(o=e.__c).__H&&(o.__H.u.forEach(O),o.__H.u.forEach(w),o.__H.u=[])},u.options.diffed=function(e){a&&a(e);var n=e.__c;if(n){var t=n.__H;t&&t.u.length&&(1!==c.push(n)&&i===u.options.requestAnimationFrame||((i=u.options.requestAnimationFrame)||function(e){var n,t=function(){clearTimeout(r),cancelAnimationFrame(n),setTimeout(e)},r=setTimeout(t,100);"undefined"!=typeof window&&(n=requestAnimationFrame(t))})(x))}},u.options.__c=function(e,n){n.some((function(e){e.__h.forEach(O),e.__h=e.__h.filter((function(e){return!e.i||w(e)}))})),f&&f(e,n)},u.options.unmount=function(e){s&&s(e);var n=e.__c;if(n){var t=n.__H;t&&t.t.forEach((function(e){return e.m&&e.m()}))}}},function(e,n,t){"use strict";t.d(n,"b",(function(){return v})),t.d(n,"a",(function(){return d}));var r={data:""},o=function(e){try{var n=e?e.querySelector("#_goober"):self._goober;return n||((n=(e||document.head).appendChild(document.createElement("style"))).innerHTML=" ",n.id="_goober"),n.firstChild}catch(e){}return r},i=/(?:([a-z0-9-%@]+) *:? *([^{;]+?);|([^;}{]*?) +{)|(})/gi,u=/\/\*.*?\*\/|\s{2,}|\n/gm,c={c:0},l=function(e,n,t,r){var o=JSON.stringify(e),l=c[o]||(c[o]=t?"":".go"+o.split("").reduce((function(e,n){return e+n.charCodeAt(0)|8}),4));return function(e,n,t){n.data.indexOf(e)<0&&(n.data=t?e+n.data:n.data+e)}(c[l]||(c[l]=function e(n,t,r){var o="",i="",u="";if(/^@[k|f]/.test(r))return r+JSON.stringify(n).replace(/","/g,";").replace(/"|,"/g,"").replace(/:{/g,"{");for(var c in n){var l=n[c];if("object"==typeof l){var a=t+" "+c;/&/g.test(c)&&(a=c.replace(/&/g,t)),"@"==c[0]&&(a=t),i+=e(l,a,a==t?c:r||"")}else/^@i/.test(c)?u=c+" "+l+";":o+=c.replace(/[A-Z]/g,"-$&").toLowerCase()+":"+l+";"}if(o.charCodeAt(0)){var f=t+"{"+o+"}";return r?i+r+"{"+f+"}":u+f+i}return u+i}(e[0]?function(e){for(var n,t=[{}];n=i.exec(e.replace(u,""));)n[4]&&t.shift(),n[3]?t.unshift(t[0][n[3]]={}):n[4]||(t[0][n[1]]=n[2]);return t[0]}(e):e,l)),n,r),l.slice(1)},a=function(e,n,t){return e.reduce((function(e,r,o){var i=n[o];if(i&&i.call){var u=i(t),c=u&&u.props&&u.props.className||/^go/.test(u)&&u;i=c?"."+c:u&&u.props?"":u}return e+r+(i||"")}),"")};function f(e){var n=this||{},t=e.call?e(n.p):e;return l(t.map?a(t,[].slice.call(arguments,1),n.p):t,o(n.target),n.g,n.o)}f.bind({g:1});var s,_,p,d=function(e,n,t){s=e,_=n,p=t};function v(e){var n=this||{};return function(){var t=arguments;function r(r,o){var i=n.p=Object.assign(p?{theme:p()}:{},r),u=i.className;return n.o=/\s*go[0-9]+/g.test(u),i.className=f.apply(n,t)+(u?" "+u:""),i.ref=o,s(e,i)}return _?_(r):r}}},function(e,n){e.exports=function(e,n){return n||(n=e.slice(0)),e.raw=n,e}},function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var r=t(1);t.d(n,"b",(function(){return r.b})),t.d(n,"c",(function(){return r.d})),t.d(n,"d",(function(){return r.i}));var o=t(0);function i(e,n){for(var t in n)e[t]=n[t];return e}function u(e,n){for(var t in e)if("__source"!==t&&!(t in n))return!0;for(var r in n)if("__source"!==r&&e[r]!==n[r])return!0;return!1}!function(e){var n,t;function r(n){var t;return(t=e.call(this,n)||this).isPureReactComponent=!0,t}t=e,(n=r).prototype=Object.create(t.prototype),n.prototype.constructor=n,n.__proto__=t,r.prototype.shouldComponentUpdate=function(e,n){return u(this.props,e)||u(this.state,n)}}(o.Component);var c=o.options.vnode;function l(e){function n(n){var t=i({},n);return delete t.ref,e(t,n.ref)}return n.prototype.isReactComponent=!0,n.t=!0,n.displayName="ForwardRef("+(e.displayName||e.name)+")",n}o.options.vnode=function(e){e.type&&e.type.t&&e.ref&&(e.props.ref=e.ref,e.ref=null),c&&c(e)};var a=function(e,n){return e?Object(o.toChildArray)(e).map(n):null},f=(o.toChildArray,o.options.__e);function s(e){return e&&((e=i({},e)).__c=null,e.__k=e.__k&&e.__k.map(s)),e}function _(e){this.__u=0,this.__b=null}function p(e){var n=e.__.__c;return n&&n.o&&n.o(e)}function d(){this.u=null,this.i=null}o.options.__e=function(e,n,t){if(e.then)for(var r,o=n;o=o.__;)if((r=o.__c)&&r.l)return r.l(e,n.__c);f(e,n,t)},(_.prototype=new o.Component).l=function(e,n){var t=this,r=p(t.__v),o=!1,i=function(){o||(o=!0,r?r(u):u())};n.__c=n.componentWillUnmount,n.componentWillUnmount=function(){i(),n.__c&&n.__c()};var u=function(){--t.__u||(t.__v.__k[0]=t.state.o,t.setState({o:t.__b=null}))};t.__u++||t.setState({o:t.__b=t.__v.__k[0]}),e.then(i,i)},_.prototype.render=function(e,n){return this.__b&&(this.__v.__k[0]=s(this.__b),this.__b=null),[Object(o.createElement)(o.Component,null,n.o?null:e.children),n.o&&e.fallback]};var v=function(e,n,t){if(++t[1]===t[0]&&e.i.delete(n),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.i.size))for(t=e.u;t;){for(;t.length>3;)t.pop()();if(t[1]<t[0])break;e.u=t=t[2]}};(d.prototype=new o.Component).o=function(e){var n=this,t=p(n.__v),r=n.i.get(e);return r[0]++,function(o){var i=function(){n.props.revealOrder?(r.push(o),v(n,e,r)):o()};t?t(i):i()}},d.prototype.render=function(e){this.u=null,this.i=new Map;var n=Object(o.toChildArray)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&n.reverse();for(var t=n.length;t--;)this.i.set(n[t],this.u=[1,0,this.u]);return e.children},d.prototype.componentDidUpdate=d.prototype.componentDidMount=function(){var e=this;e.i.forEach((function(n,t){v(e,t,n)}))};!function(){function e(){}var n=e.prototype;n.getChildContext=function(){return this.props.context},n.render=function(e){return e.children}}();var h=/^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/;o.Component.prototype.isReactComponent={};var m="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;var y=o.options.event;function b(e,n){e["UNSAFE_"+n]&&!e[n]&&Object.defineProperty(e,n,{configurable:!1,get:function(){return this["UNSAFE_"+n]},set:function(e){this["UNSAFE_"+n]=e}})}o.options.event=function(e){return y&&(e=y(e)),e.persist=function(){},e.nativeEvent=e};var g={configurable:!0,get:function(){return this.class}},k=o.options.vnode;o.options.vnode=function(e){e.$$typeof=m;var n=e.type,t=e.props;if("function"!=typeof n){var r,i,u;for(u in t.defaultValue&&(t.value||0===t.value||(t.value=t.defaultValue),delete t.defaultValue),Array.isArray(t.value)&&t.multiple&&"select"===n&&(Object(o.toChildArray)(t.children).forEach((function(e){-1!=t.value.indexOf(e.props.value)&&(e.props.selected=!0)})),delete t.value),t)if(r=h.test(u))break;if(r)for(u in i=e.props={},t)i[h.test(u)?u.replace(/([A-Z0-9])/,"-$1").toLowerCase():u]=t[u]}(t.class||t.className)&&(g.enumerable="className"in t,t.className&&(t.class=t.className),Object.defineProperty(t,"className",g)),function(n){var t=e.type,r=e.props;if(r&&"string"==typeof t){var o={};for(var i in r)/^on(Ani|Tra|Tou)/.test(i)&&(r[i.toLowerCase()]=r[i],delete r[i]),o[i.toLowerCase()]=i;if(o.ondoubleclick&&(r.ondblclick=r[o.ondoubleclick],delete r[o.ondoubleclick]),o.onbeforeinput&&(r.onbeforeinput=r[o.onbeforeinput],delete r[o.onbeforeinput]),o.onchange&&("textarea"===t||"input"===t.toLowerCase()&&!/^fil|che|ra/i.test(r.type))){var u=o.oninput||"oninput";r[u]||(r[u]=r[o.onchange],delete r[o.onchange])}}}(),"function"==typeof n&&!n.m&&n.prototype&&(b(n.prototype,"componentWillMount"),b(n.prototype,"componentWillReceiveProps"),b(n.prototype,"componentWillUpdate"),n.m=!0),k&&k(e)};r.j,r.h,r.d,r.f,r.i,r.e,r.g,r.a,r.b,r.c,o.createElement,o.createContext,o.createRef,o.Fragment,o.Component},function(e,n,t){var r;e.exports=(r=t(0),function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(e,n,t){"use strict";function r(){this._root=(0,u.render)(function e(n,t){if(3===n.nodeType)return n.nodeValue;if(1!==n.nodeType)return null;var r=[],o={},i=0,c=n.attributes,l=n.childNodes;for(i=c.length;i--;)o[c[i].name]=c[i].value;for(i=l.length;i--;)r[i]=e(l[i]);return(0,u.h)(t||n.nodeName.toLowerCase(),o,r)}(this,this._vdomComponent),this,this._root)}function o(){(0,u.render)((0,u.h)(c),this,this._root)}Object.defineProperty(n,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n.default=function(e,n,t){var u=function(n){function u(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,u);var n=Reflect.construct(HTMLElement,[],u);return n._vdomComponent=e,n}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+(void 0===n?"undefined":i(n)));e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(u,HTMLElement),l(u,[{key:"connectedCallback",value:function(){r.apply(this)}},{key:"attributeChangedCallback",value:function(){r.apply(this)}},{key:"detachedCallback",value:function(){o.apply(this)}}],[{key:"observedAttributes",get:function(){return t}}]),u}();return window.customElements.define(n||e.displayName||e.name,u)};var u=t(1),c=function(){return null},l=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}()},function(e,n){e.exports=r}]))},function(e,n,t){"use strict";var r=t(3),o=t.n(r),i=t(0),u=t(4),c=t(2),l={colors:{$D10:"#162D3D",$D20:"#32536A",$D30:"#577083",$D40:"#7A92A5",$D50:"#B6C1CD",$D55:"#CBD3DC",$D60:"#DFE5EB",$D70:"#F0F4F7",$D80:"#FFFFFF",$B00:"#2B81CB",$B05:"#308DDD",$B10:"#3899EC",$B20:"#4EB7F5",$B25:"#A1D7FB",$B27:"#B3E0FB",$B30:"#C1E4FE",$B40:"#DAEFFE",$B50:"#EAF7FF",$B60:"#F4FAFE"},sidebar:{colors:{$bg:"#23263e",$divider:"#434567",$bgHover:"#2e3249",$bgActive:"#393f59"}}};function a(){var e=o()(["\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  box-sizing: border-box;\n"]);return a=function(){return e},e}var f=Object(i.createContext)(l);Object(c.a)(i.h,u.a,(function(){return Object(u.b)(f)}));var s=Object(c.b)("div")(a());n.a=function(e){var n=e.children;return Object(i.h)(s,{__source:{fileName:"/Users/igors/Development/pc-comonents/src/App.tsx",lineNumber:13}},n)}},function(e,n,t){"use strict";n.a=function(e){var n=e.ref,t=e.eventName,r=e.data,o=new CustomEvent(t,{detail:r,bubbles:!0});return function(){n.current&&n.current.dispatchEvent(o)}}},,,,,,,function(e,n,t){"use strict";t.r(n);var r=t(3),o=t.n(r),i=t(0),u=t(1),c=t(2),l=t(5),a=t.n(l),f=t(6),s=t(7),_="/Users/igors/Development/pc-comonents/src/components/Tabs/index.tsx";function p(){var e=o()(["\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  margin: 0 18px 0 0;\n\n  &:last-child {\n    margin: 0;\n  }\n\n  & button {\n    border: none;\n    background: none;\n    font-size: 14px;\n    padding: 0;\n    color: $B10;\n    color: ",";\n    box-shadow: ",";\n    &:hover {\n      color: ",";\n      cursor: pointer;\n    }\n  }\n"]);return p=function(){return e},e}function d(){var e=o()(["\n  list-style: none;\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n  margin: 0;\n  height: 60px;\n  position: relative;\n  font-family: $FontRoman;\n  box-sizing: border-box;\n"]);return d=function(){return e},e}var v=function(e){var n=e.item,t=e.isActive,r=e.clickHandler;return Object(i.h)(y,{isActive:t,__source:{fileName:_,lineNumber:19}},Object(i.h)("button",{onClick:function(){return r(n)},type:"button",__source:{fileName:_,lineNumber:20}},n.label))},h=function(e){var n=e.data,t=e.activetab,r=Object(u.j)(null),o=r[0],c=r[1],l=Object(u.j)({}),a=l[0],p=l[1],d=Object(u.i)();Object(u.d)((function(){if(n){var e=JSON.parse(n);c(e.map((function(e){return{label:e,id:e.toLowerCase()}})))}}),[n]),Object(u.d)((function(){t&&o&&p(o.filter((function(e){return e.id===t.toLowerCase()})).reduce((function(e,n){return e.concat(n)})))}),[o]);var h=Object(s.a)({ref:d,data:a,eventName:"tabItemClicked"}),y=function(e){p(e)};return Object(u.d)((function(){h()}),[a]),o?Object(i.h)(f.a,{__source:{fileName:_,lineNumber:70}},Object(i.h)("div",{ref:d,__source:{fileName:_,lineNumber:71}},Object(i.h)(m,{__source:{fileName:_,lineNumber:72}},o.map((function(e){return Object(i.h)(v,{key:e.label,item:e,clickHandler:y,isActive:a.id===e.id,__source:{fileName:_,lineNumber:74}})}))))):null},m=Object(c.b)("ul")(d()),y=Object(c.b)("li")(p(),(function(e){return e.isActive?e.theme.colors.$B10:e.theme.colors.$D10}),(function(e){return e.isActive?"inset 0 -2px 0 0 "+e.theme.colors.$B10:"inset 0 0px 0 0 blue"}),(function(e){return e.theme.colors.$B10}));a()(h,"x-tabs",["data","activetab"]),n.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9vcHRpb25zLmpzIiwid2VicGFjazovLy8uLi9zcmMvY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jcmVhdGUtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kaWZmL2NoaWxkcmVuLmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RpZmYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jbG9uZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9jYXRjaC1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbmtzYXJhZi9nb29iZXIvZGlzdC9nb29iZXIubW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlLmpzIiwid2VicGFjazovLy8uLi9zcmMvUHVyZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2ZvcndhcmRSZWYuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9DaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3N1c3BlbnNlLmpzIiwid2VicGFjazovLy8uLi9zcmMvc3VzcGVuc2UtbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3BvcnRhbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC1jdXN0b20tZWxlbWVudC9kaXN0L2J1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ2xvYmFsU3R5bGVzLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXNlQ3VzdG9tRXZlbnQudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhYnMvaW5kZXgudHN4Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwib3B0aW9ucyIsImlzVmFsaWRFbGVtZW50IiwicSIsImRlZmVyIiwicHJldkRlYm91bmNlIiwiSVNfSFlEUkFURSIsIkVNUFRZX09CSiIsIkVNUFRZX0FSUiIsIklTX05PTl9ESU1FTlNJT05BTCIsImFzc2lnbiIsIm9iaiIsInByb3BzIiwicmVtb3ZlTm9kZSIsIm5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImNoaWxkcmVuIiwibm9ybWFsaXplZFByb3BzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHVzaCIsImRlZmF1bHRQcm9wcyIsImNyZWF0ZVZOb2RlIiwicmVmIiwidm5vZGUiLCJfY2hpbGRyZW4iLCJfcGFyZW50IiwiX2RlcHRoIiwiX2RvbSIsIl9sYXN0RG9tQ2hpbGQiLCJfY29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJ1bmRlZmluZWQiLCJjcmVhdGVSZWYiLCJGcmFnbWVudCIsIkNvbXBvbmVudCIsImNvbnRleHQiLCJnZXREb21TaWJsaW5nIiwiY2hpbGRJbmRleCIsImluZGV4T2YiLCJzaWJsaW5nIiwidXBkYXRlUGFyZW50RG9tUG9pbnRlcnMiLCJjaGlsZCIsImJhc2UiLCJlbnF1ZXVlUmVuZGVyIiwiX2RpcnR5IiwiZGVib3VuY2VSZW5kZXJpbmciLCJwcm9jZXNzIiwiY29tcG9uZW50IiwiY29tbWl0UXVldWUiLCJuZXdEb20iLCJvbGREb20iLCJwYXJlbnREb20iLCJzb3J0IiwiYSIsImIiLCJfdm5vZGUiLCJwb3AiLCJfcGFyZW50RG9tIiwiZGlmZiIsIl9jb250ZXh0Iiwib3duZXJTVkdFbGVtZW50IiwiY29tbWl0Um9vdCIsImRpZmZDaGlsZHJlbiIsIm5ld1BhcmVudFZOb2RlIiwib2xkUGFyZW50Vk5vZGUiLCJpc1N2ZyIsImV4Y2Vzc0RvbUNoaWxkcmVuIiwiaXNIeWRyYXRpbmciLCJqIiwib2xkVk5vZGUiLCJzaWJEb20iLCJmaXJzdENoaWxkRG9tIiwicmVmcyIsIm9sZENoaWxkcmVuIiwib2xkQ2hpbGRyZW5MZW5ndGgiLCJ0b0NoaWxkQXJyYXkiLCJjaGlsZFZOb2RlIiwib3V0ZXIiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwidW5tb3VudCIsImFwcGx5UmVmIiwiY2FsbGJhY2siLCJmbGF0dGVuZWQiLCJBcnJheSIsImlzQXJyYXkiLCJzZXRTdHlsZSIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJ0ZXN0IiwiZG9tIiwib2xkVmFsdWUiLCJ1c2VDYXB0dXJlIiwibmFtZUxvd2VyIiwiY3NzVGV4dCIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50UHJveHkiLCJfbGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJlIiwiZXZlbnQiLCJuZXdWTm9kZSIsInRtcCIsImlzTmV3Iiwib2xkUHJvcHMiLCJvbGRTdGF0ZSIsInNuYXBzaG90IiwiY2xlYXJQcm9jZXNzaW5nRXhjZXB0aW9uIiwibmV3UHJvcHMiLCJwcm92aWRlciIsImNjdHgiLCJuZXdUeXBlIiwiX2RpZmYiLCJjb250ZXh0VHlwZSIsIl9pZCIsIl9kZWZhdWx0VmFsdWUiLCJfcHJvY2Vzc2luZ0V4Y2VwdGlvbiIsIl9wZW5kaW5nRXJyb3IiLCJyZW5kZXIiLCJkb1JlbmRlciIsInN1YiIsInN0YXRlIiwiX3JlbmRlckNhbGxiYWNrcyIsIl9uZXh0U3RhdGUiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJfZm9yY2UiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3JlbmRlciIsImdldENoaWxkQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZGlmZkVsZW1lbnROb2RlcyIsImRpZmZlZCIsIl9jYXRjaEVycm9yIiwicm9vdCIsIl9jb21taXQiLCJzb21lIiwiY2IiLCJvbGRIdG1sIiwibmV3SHRtbCIsIm5vZGVUeXBlIiwibG9jYWxOYW1lIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImRhdGEiLCJjaGlsZE5vZGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJhdHRyaWJ1dGVzIiwiX19odG1sIiwiaW5uZXJIVE1MIiwiaHlkcmF0ZSIsImRpZmZQcm9wcyIsImNoZWNrZWQiLCJjdXJyZW50IiwicGFyZW50Vk5vZGUiLCJza2lwUmVtb3ZlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ0aGlzIiwicmVwbGFjZU5vZGUiLCJfcm9vdCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjdHgiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwic3VicyIsIl90aGlzIiwiX3Byb3BzIiwib2xkIiwic3BsaWNlIiwiZXJyb3IiLCJoYXNDYXVnaHQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJzZXRTdGF0ZSIsImNvbXBvbmVudERpZENhdGNoIiwidXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJQcm9taXNlIiwidGhlbiIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiY3VycmVudEluZGV4IiwiY3VycmVudENvbXBvbmVudCIsInByZXZSYWYiLCJhZnRlclBhaW50RWZmZWN0cyIsIm9sZEJlZm9yZVJlbmRlciIsIm9sZEFmdGVyRGlmZiIsIm9sZENvbW1pdCIsIm9sZEJlZm9yZVVubW91bnQiLCJnZXRIb29rU3RhdGUiLCJpbmRleCIsIl9ob29rIiwiaG9va3MiLCJfX2hvb2tzIiwiX2xpc3QiLCJfcGVuZGluZ0VmZmVjdHMiLCJ1c2VTdGF0ZSIsImluaXRpYWxTdGF0ZSIsInVzZVJlZHVjZXIiLCJpbnZva2VPclJldHVybiIsInJlZHVjZXIiLCJpbml0IiwiaG9va1N0YXRlIiwiX3ZhbHVlIiwibmV4dFZhbHVlIiwiYWN0aW9uIiwidXNlRWZmZWN0IiwiYXJncyIsImFyZ3NDaGFuZ2VkIiwiX2FyZ3MiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VSZWYiLCJpbml0aWFsVmFsdWUiLCJ1c2VNZW1vIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImNyZWF0ZUhhbmRsZSIsImNvbmNhdCIsImZhY3RvcnkiLCJfZmFjdG9yeSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJmb3JtYXR0ZXIiLCJmbHVzaEFmdGVyUGFpbnRFZmZlY3RzIiwiZm9yRWFjaCIsImludm9rZUNsZWFudXAiLCJpbnZva2VFZmZlY3QiLCJob29rIiwiX2NsZWFudXAiLCJyZXN1bHQiLCJvbGRBcmdzIiwibmV3QXJncyIsImFyZyIsImYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyYWYiLCJkb25lIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2luZG93IiwiZmlsdGVyIiwidiIsInF1ZXJ5U2VsZWN0b3IiLCJzZWxmIiwiX2dvb2JlciIsImhlYWQiLCJpZCIsImZpcnN0Q2hpbGQiLCJ1IiwiSlNPTiIsInN0cmluZ2lmeSIsInNwbGl0IiwicmVkdWNlIiwiY2hhckNvZGVBdCIsImV4ZWMiLCJzaGlmdCIsInVuc2hpZnQiLCJjbGFzc05hbWUiLCJtYXAiLCJ0YXJnZXQiLCJnIiwidGhlbWUiLCJhcHBseSIsInN0cmluZ3MiLCJyYXciLCJzaGFsbG93RGlmZmVycyIsImlzUHVyZVJlYWN0Q29tcG9uZW50Iiwib2xkVk5vZGVIb29rIiwiZm9yd2FyZFJlZiIsImZuIiwiRm9yd2FyZGVkIiwiY2xvbmUiLCJpc1JlYWN0Q29tcG9uZW50IiwiX2ZvcndhcmRlZCIsImRpc3BsYXlOYW1lIiwibWFwRm4iLCJvbGRDYXRjaEVycm9yIiwiZGV0YWNoZWRDbG9uZSIsIlN1c3BlbnNlIiwiX3N1c3BlbnNpb25zIiwiX2RldGFjaE9uTmV4dFJlbmRlciIsInN1c3BlbmRlZCIsIl9zdXNwZW5kZWQiLCJTdXNwZW5zZUxpc3QiLCJfbmV4dCIsIl9tYXAiLCJfY2hpbGREaWRTdXNwZW5kIiwicHJvbWlzZSIsInN1c3BlbmRpbmdDb21wb25lbnQiLCJyZXNvbHZlZCIsIm9uUmVzb2x2ZWQiLCJvblN1c3BlbnNpb25Db21wbGV0ZSIsIl9zdXNwZW5kZWRDb21wb25lbnRXaWxsVW5tb3VudCIsImZhbGxiYWNrIiwibGlzdCIsImRlbGV0ZSIsInJldmVhbE9yZGVyIiwic2l6ZSIsImRlbGVnYXRlZCIsIndyYXBwZWRVbnN1c3BlbmQiLCJ1bnN1c3BlbmQiLCJNYXAiLCJyZXZlcnNlIiwic2V0IiwiQ29udGV4dFByb3ZpZGVyIiwiQ0FNRUxfUFJPUFMiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJmb3IiLCJvbGRFdmVudEhvb2siLCJzZXRTYWZlRGVzY3JpcHRvciIsInByb3RvIiwiY29uZmlndXJhYmxlIiwicGVyc2lzdCIsIm5hdGl2ZUV2ZW50IiwiY2xhc3NOYW1lRGVzY3JpcHRvciIsImNsYXNzIiwiJCR0eXBlb2YiLCJzaG91bGRTYW5pdGl6ZSIsImF0dHJzIiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9uZG91YmxlY2xpY2siLCJvbmRibGNsaWNrIiwib25iZWZvcmVpbnB1dCIsIm9uY2hhbmdlIiwibm9ybWFsaXplZCIsIm9uaW5wdXQiLCJfcGF0Y2hlZExpZmVjeWNsZXMiLCJyZXF1aXJlIiwibG9hZGVkIiwibm9kZVZhbHVlIiwiaCIsIm5vZGVOYW1lIiwiX3Zkb21Db21wb25lbnQiLCJpdGVyYXRvciIsIlR5cGVFcnJvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJIVE1MRWxlbWVudCIsIndyaXRhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImNvbG9ycyIsIiREMTAiLCIkRDIwIiwiJEQzMCIsIiRENDAiLCIkRDUwIiwiJEQ1NSIsIiRENjAiLCIkRDcwIiwiJEQ4MCIsIiRCMDAiLCIkQjA1IiwiJEIxMCIsIiRCMjAiLCIkQjI1IiwiJEIyNyIsIiRCMzAiLCIkQjQwIiwiJEI1MCIsIiRCNjAiLCJzaWRlYmFyIiwiJGJnIiwiJGRpdmlkZXIiLCIkYmdIb3ZlciIsIiRiZ0FjdGl2ZSIsIlRoZW1lQ29udGV4dCIsInNldHVwIiwiU3R5bGVkQmFzZSIsInN0eWxlZCIsIkFwcCIsInVzZUN1c3RvbUV2ZW50IiwiZXZlbnROYW1lIiwiY3VzdG9tRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwiVGFiIiwiaXRlbSIsImlzQWN0aXZlIiwiY2xpY2tIYW5kbGVyIiwiU3R5bGVkTGkiLCJvbkNsaWNrIiwibGFiZWwiLCJUYWJzIiwiYWN0aXZldGFiIiwiZGF0YVN0YXRlIiwic2V0RGF0YSIsImFjdGl2ZSIsInNldEFjdGl2ZSIsImNvbXBvbmVudFJlZiIsInBhcnNlZERhdGEiLCJwYXJzZSIsInRhYiIsImFjYyIsIlN0eWxlZFVsIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVks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R0FKOUIsNENBTmEsTUFtQm5CeUosRUFBZ0IzQixZQUFPLEtBQVBBLENBQUgsS0FZYmEsRUFBZ0JiLFlBQThCLEtBQTlCQSxDQUFILEtBZ0JOLFNBQUMzWCxHQUFELE9BQVlBLEVBQU1zWSxTQUFXdFksRUFBTTRRLE1BQU1tRixPQUFPWSxLQUFPM1csRUFBTTRRLE1BQU1tRixPQUFPQyxRQUNyRSxTQUFDaFcsR0FBRCxPQUFZQSxFQUFNc1ksU0FBTixvQkFDQXRZLEVBQU00USxNQUFNbUYsT0FBT1ksS0FDdkMsMEJBRUssU0FBQzNXLEdBQUQsT0FBV0EsRUFBTTRRLE1BQU1tRixPQUFPWSxRQU03QzRDLElBQVNaLEVBQU0sU0FBVSxDQUFDLE9BQVEsY0FFbkJBIiwiZmlsZSI6IlRhYnMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwiZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuZXhwb3J0IGNvbnN0IEVNUFRZX0FSUiA9IFtdO1xuZXhwb3J0IGNvbnN0IElTX05PTl9ESU1FTlNJT05BTCA9IC9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkL2k7XG4iLCJpbXBvcnQgeyBfY2F0Y2hFcnJvciB9IGZyb20gJy4vZGlmZi9jYXRjaC1lcnJvcic7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuT3B0aW9uc30gICovXG5jb25zdCBvcHRpb25zID0ge1xuXHRfY2F0Y2hFcnJvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIHZpcnR1YWwgbm9kZSAodXNlZCBmb3IgSlNYKVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIGNvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsIHwgdW5kZWZpbmVkfSBbcHJvcHNdIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuJykuQ29tcG9uZW50Q2hpbGRyZW4+fSBbY2hpbGRyZW5dIFRoZSBjaGlsZHJlbiBvZiB0aGUgdmlydHVhbCBub2RlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0aTtcblx0Zm9yIChpIGluIHByb3BzKSB7XG5cdFx0aWYgKGkgIT09ICdrZXknICYmIGkgIT09ICdyZWYnKSBub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMykge1xuXHRcdGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2lzc3Vlcy8xOTE2XG5cdFx0Zm9yIChpID0gMzsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hpbGRyZW4ucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0fVxuXHRpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHR9XG5cblx0Ly8gSWYgYSBDb21wb25lbnQgVk5vZGUsIGNoZWNrIGZvciBhbmQgYXBwbHkgZGVmYXVsdFByb3BzXG5cdC8vIE5vdGU6IHR5cGUgbWF5IGJlIHVuZGVmaW5lZCBpbiBkZXZlbG9wbWVudCwgbXVzdCBuZXZlciBlcnJvciBoZXJlLlxuXHRpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZS5kZWZhdWx0UHJvcHMgIT0gbnVsbCkge1xuXHRcdGZvciAoaSBpbiB0eXBlLmRlZmF1bHRQcm9wcykge1xuXHRcdFx0aWYgKG5vcm1hbGl6ZWRQcm9wc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHR5cGUuZGVmYXVsdFByb3BzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjcmVhdGVWTm9kZShcblx0XHR0eXBlLFxuXHRcdG5vcm1hbGl6ZWRQcm9wcyxcblx0XHRwcm9wcyAmJiBwcm9wcy5rZXksXG5cdFx0cHJvcHMgJiYgcHJvcHMucmVmXG5cdCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgVk5vZGUgKHVzZWQgaW50ZXJuYWxseSBieSBQcmVhY3QpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogQ29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IHN0cmluZyB8IG51bWJlciB8IG51bGx9IHByb3BzIFRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdmlydHVhbCBub2RlLlxuICogSWYgdGhpcyB2aXJ0dWFsIG5vZGUgcmVwcmVzZW50cyBhIHRleHQgbm9kZSwgdGhpcyBpcyB0aGUgdGV4dCBvZiB0aGUgbm9kZSAoc3RyaW5nIG9yIG51bWJlcikuXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IG51bGx9IGtleSBUaGUga2V5IGZvciB0aGlzIHZpcnR1YWwgbm9kZSwgdXNlZCB3aGVuXG4gKiBkaWZmaW5nIGl0IGFnYWluc3QgaXRzIGNoaWxkcmVuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1wicmVmXCJdfSByZWYgVGhlIHJlZiBwcm9wZXJ0eSB0aGF0IHdpbGxcbiAqIHJlY2VpdmUgYSByZWZlcmVuY2UgdG8gaXRzIGNyZWF0ZWQgY2hpbGRcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBrZXksIHJlZikge1xuXHQvLyBWOCBzZWVtcyB0byBiZSBiZXR0ZXIgYXQgZGV0ZWN0aW5nIHR5cGUgc2hhcGVzIGlmIHRoZSBvYmplY3QgaXMgYWxsb2NhdGVkIGZyb20gdGhlIHNhbWUgY2FsbCBzaXRlXG5cdC8vIERvIG5vdCBpbmxpbmUgaW50byBjcmVhdGVFbGVtZW50IGFuZCBjb2VyY2VUb1ZOb2RlIVxuXHRjb25zdCB2bm9kZSA9IHtcblx0XHR0eXBlLFxuXHRcdHByb3BzLFxuXHRcdGtleSxcblx0XHRyZWYsXG5cdFx0X2NoaWxkcmVuOiBudWxsLFxuXHRcdF9wYXJlbnQ6IG51bGwsXG5cdFx0X2RlcHRoOiAwLFxuXHRcdF9kb206IG51bGwsXG5cdFx0X2xhc3REb21DaGlsZDogbnVsbCxcblx0XHRfY29tcG9uZW50OiBudWxsLFxuXHRcdGNvbnN0cnVjdG9yOiB1bmRlZmluZWRcblx0fTtcblxuXHRpZiAob3B0aW9ucy52bm9kZSkgb3B0aW9ucy52bm9kZSh2bm9kZSk7XG5cblx0cmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuXHRyZXR1cm4ge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudChwcm9wcykge1xuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0aGUgYXJndW1lbnQgaXMgYSB2YWxpZCBQcmVhY3QgVk5vZGUuXG4gKiBAcGFyYW0geyp9IHZub2RlXG4gKiBAcmV0dXJucyB7dm5vZGUgaXMgaW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkRWxlbWVudCA9IHZub2RlID0+XG5cdHZub2RlICE9IG51bGwgJiYgdm5vZGUuY29uc3RydWN0b3IgPT09IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBkaWZmLCBjb21taXRSb290IH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIEJhc2UgQ29tcG9uZW50IGNsYXNzLiBQcm92aWRlcyBgc2V0U3RhdGUoKWAgYW5kIGBmb3JjZVVwZGF0ZSgpYCwgd2hpY2hcbiAqIHRyaWdnZXIgcmVuZGVyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgVGhlIGluaXRpYWwgY29tcG9uZW50IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgaW5pdGlhbCBjb250ZXh0IGZyb20gcGFyZW50IGNvbXBvbmVudHMnXG4gKiBnZXRDaGlsZENvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuXHR0aGlzLnByb3BzID0gcHJvcHM7XG5cdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbi8qKlxuICogVXBkYXRlIGNvbXBvbmVudCBzdGF0ZSBhbmQgc2NoZWR1bGUgYSByZS1yZW5kZXIuXG4gKiBAcGFyYW0ge29iamVjdCB8ICgoczogb2JqZWN0LCBwOiBvYmplY3QpID0+IG9iamVjdCl9IHVwZGF0ZSBBIGhhc2ggb2Ygc3RhdGVcbiAqIHByb3BlcnRpZXMgdG8gdXBkYXRlIHdpdGggbmV3IHZhbHVlcyBvciBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBwcm9wcyByZXR1cm5zIGEgbmV3IHBhcnRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIGNvbXBvbmVudCBzdGF0ZSBpc1xuICogdXBkYXRlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odXBkYXRlLCBjYWxsYmFjaykge1xuXHQvLyBvbmx5IGNsb25lIHN0YXRlIHdoZW4gY29weWluZyB0byBuZXh0U3RhdGUgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBzO1xuXHRpZiAodGhpcy5fbmV4dFN0YXRlICE9PSB0aGlzLnN0YXRlKSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZTtcblx0fSBlbHNlIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdXBkYXRlID09ICdmdW5jdGlvbicpIHtcblx0XHR1cGRhdGUgPSB1cGRhdGUocywgdGhpcy5wcm9wcyk7XG5cdH1cblxuXHRpZiAodXBkYXRlKSB7XG5cdFx0YXNzaWduKHMsIHVwZGF0ZSk7XG5cdH1cblxuXHQvLyBTa2lwIHVwZGF0ZSBpZiB1cGRhdGVyIGZ1bmN0aW9uIHJldHVybmVkIG51bGxcblx0aWYgKHVwZGF0ZSA9PSBudWxsKSByZXR1cm47XG5cblx0aWYgKHRoaXMuX3Zub2RlKSB7XG5cdFx0dGhpcy5fZm9yY2UgPSBmYWxzZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudFxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpc1xuICogcmUtcmVuZGVyZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdGlmICh0aGlzLl92bm9kZSkge1xuXHRcdC8vIFNldCByZW5kZXIgbW9kZSBzbyB0aGF0IHdlIGNhbiBkaWZmZXJlbnRpYXRlIHdoZXJlIHRoZSByZW5kZXIgcmVxdWVzdFxuXHRcdC8vIGlzIGNvbWluZyBmcm9tLiBXZSBuZWVkIHRoaXMgYmVjYXVzZSBmb3JjZVVwZGF0ZSBzaG91bGQgbmV2ZXIgY2FsbFxuXHRcdC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuXHRcdHRoaXMuX2ZvcmNlID0gdHJ1ZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgYHByb3BzYCBhbmQgYHN0YXRlYCwgYW5kIHJldHVybnMgYSBuZXcgVmlydHVhbCBET00gdHJlZSB0byBidWlsZC5cbiAqIFZpcnR1YWwgRE9NIGlzIGdlbmVyYWxseSBjb25zdHJ1Y3RlZCB2aWEgW0pTWF0oaHR0cDovL2phc29uZm9ybWF0LmNvbS93dGYtaXMtanN4KS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBQcm9wcyAoZWc6IEpTWCBhdHRyaWJ1dGVzKSByZWNlaXZlZCBmcm9tIHBhcmVudFxuICogZWxlbWVudC9jb21wb25lbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSBUaGUgY29tcG9uZW50J3MgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgQ29udGV4dCBvYmplY3QsIGFzIHJldHVybmVkIGJ5IHRoZSBuZWFyZXN0XG4gKiBhbmNlc3RvcidzIGBnZXRDaGlsZENvbnRleHQoKWBcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbiB8IHZvaWR9XG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gRnJhZ21lbnQ7XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbH0gW2NoaWxkSW5kZXhdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21TaWJsaW5nKHZub2RlLCBjaGlsZEluZGV4KSB7XG5cdGlmIChjaGlsZEluZGV4ID09IG51bGwpIHtcblx0XHQvLyBVc2UgY2hpbGRJbmRleD09bnVsbCBhcyBhIHNpZ25hbCB0byByZXN1bWUgdGhlIHNlYXJjaCBmcm9tIHRoZSB2bm9kZSdzIHNpYmxpbmdcblx0XHRyZXR1cm4gdm5vZGUuX3BhcmVudFxuXHRcdFx0PyBnZXREb21TaWJsaW5nKHZub2RlLl9wYXJlbnQsIHZub2RlLl9wYXJlbnQuX2NoaWxkcmVuLmluZGV4T2Yodm5vZGUpICsgMSlcblx0XHRcdDogbnVsbDtcblx0fVxuXG5cdGxldCBzaWJsaW5nO1xuXHRmb3IgKDsgY2hpbGRJbmRleCA8IHZub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuXHRcdHNpYmxpbmcgPSB2bm9kZS5fY2hpbGRyZW5bY2hpbGRJbmRleF07XG5cblx0XHRpZiAoc2libGluZyAhPSBudWxsICYmIHNpYmxpbmcuX2RvbSAhPSBudWxsKSB7XG5cdFx0XHQvLyBTaW5jZSB1cGRhdGVQYXJlbnREb21Qb2ludGVycyBrZWVwcyBfZG9tIHBvaW50ZXIgY29ycmVjdCxcblx0XHRcdC8vIHdlIGNhbiByZWx5IG9uIF9kb20gdG8gdGVsbCB1cyBpZiB0aGlzIHN1YnRyZWUgY29udGFpbnMgYVxuXHRcdFx0Ly8gcmVuZGVyZWQgRE9NIG5vZGUsIGFuZCB3aGF0IHRoZSBmaXJzdCByZW5kZXJlZCBET00gbm9kZSBpc1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcuX2RvbTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBub3QgZm91bmQgYSBET00gbm9kZSBpbiB0aGlzIHZub2RlJ3MgY2hpbGRyZW4uXG5cdC8vIFdlIG11c3QgcmVzdW1lIGZyb20gdGhpcyB2bm9kZSdzIHNpYmxpbmcgKGluIGl0J3MgcGFyZW50IF9jaGlsZHJlbiBhcnJheSlcblx0Ly8gT25seSBjbGltYiB1cCBhbmQgc2VhcmNoIHRoZSBwYXJlbnQgaWYgd2UgYXJlbid0IHNlYXJjaGluZyB0aHJvdWdoIGEgRE9NXG5cdC8vIFZOb2RlIChtZWFuaW5nIHdlIHJlYWNoZWQgdGhlIERPTSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIHZub2RlIHRoYXQgYmVnYW5cblx0Ly8gdGhlIHNlYXJjaClcblx0cmV0dXJuIHR5cGVvZiB2bm9kZS50eXBlID09PSAnZnVuY3Rpb24nID8gZ2V0RG9tU2libGluZyh2bm9kZSkgOiBudWxsO1xufVxuXG4vKipcbiAqIFRyaWdnZXIgaW4tcGxhY2UgcmUtcmVuZGVyaW5nIG9mIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHJlcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQpIHtcblx0bGV0IHZub2RlID0gY29tcG9uZW50Ll92bm9kZSxcblx0XHRvbGREb20gPSB2bm9kZS5fZG9tLFxuXHRcdHBhcmVudERvbSA9IGNvbXBvbmVudC5fcGFyZW50RG9tO1xuXG5cdGlmIChwYXJlbnREb20pIHtcblx0XHRsZXQgY29tbWl0UXVldWUgPSBbXTtcblx0XHRsZXQgbmV3RG9tID0gZGlmZihcblx0XHRcdHBhcmVudERvbSxcblx0XHRcdHZub2RlLFxuXHRcdFx0YXNzaWduKHt9LCB2bm9kZSksXG5cdFx0XHRjb21wb25lbnQuX2NvbnRleHQsXG5cdFx0XHRwYXJlbnREb20ub3duZXJTVkdFbGVtZW50ICE9PSB1bmRlZmluZWQsXG5cdFx0XHRudWxsLFxuXHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRvbGREb20gPT0gbnVsbCA/IGdldERvbVNpYmxpbmcodm5vZGUpIDogb2xkRG9tXG5cdFx0KTtcblx0XHRjb21taXRSb290KGNvbW1pdFF1ZXVlLCB2bm9kZSk7XG5cblx0XHRpZiAobmV3RG9tICE9IG9sZERvbSkge1xuXHRcdFx0dXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKSB7XG5cdGlmICgodm5vZGUgPSB2bm9kZS5fcGFyZW50KSAhPSBudWxsICYmIHZub2RlLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdHZub2RlLl9kb20gPSB2bm9kZS5fY29tcG9uZW50LmJhc2UgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2hpbGQgPSB2bm9kZS5fY2hpbGRyZW5baV07XG5cdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCAmJiBjaGlsZC5fZG9tICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IGNoaWxkLl9kb207XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVuZGVyIHF1ZXVlXG4gKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn1cbiAqL1xubGV0IHEgPSBbXTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gKiBAdHlwZSB7KGNiOiAoKSA9PiB2b2lkKSA9PiB2b2lkfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLy8gTm90ZSB0aGUgZm9sbG93aW5nIGxpbmUgaXNuJ3QgdHJlZS1zaGFrZW4gYnkgcm9sbHVwIGN1eiBvZiByb2xsdXAvcm9sbHVwIzI1NjZcbmNvbnN0IGRlZmVyID1cblx0dHlwZW9mIFByb21pc2UgPT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXHRcdDogc2V0VGltZW91dDtcblxuLypcbiAqIFRoZSB2YWx1ZSBvZiBgQ29tcG9uZW50LmRlYm91bmNlYCBtdXN0IGFzeW5jaHJvbm91c2x5IGludm9rZSB0aGUgcGFzc2VkIGluIGNhbGxiYWNrLiBJdCBpc1xuICogaW1wb3J0YW50IHRoYXQgY29udHJpYnV0b3JzIHRvIFByZWFjdCBjYW4gY29uc2lzdGVudGx5IHJlYXNvbiBhYm91dCB3aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAsIGV0Yy5cbiAqIGRvLCBhbmQgd2hlbiB0aGVpciBlZmZlY3RzIHdpbGwgYmUgYXBwbGllZC4gU2VlIHRoZSBsaW5rcyBiZWxvdyBmb3Igc29tZSBmdXJ0aGVyIHJlYWRpbmcgb24gZGVzaWduaW5nXG4gKiBhc3luY2hyb25vdXMgQVBJcy5cbiAqICogW0Rlc2lnbmluZyBBUElzIGZvciBBc3luY2hyb255XShodHRwczovL2Jsb2cuaXpzLm1lLzIwMTMvMDgvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiAqIFtDYWxsYmFja3Mgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c10oaHR0cHM6Ly9ibG9nLm9tZXRlci5jb20vMjAxMS8wNy8yNC9jYWxsYmFja3Mtc3luY2hyb25vdXMtYW5kLWFzeW5jaHJvbm91cy8pXG4gKi9cblxubGV0IHByZXZEZWJvdW5jZTtcblxuLyoqXG4gKiBFbnF1ZXVlIGEgcmVyZW5kZXIgb2YgYSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSBjIFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVSZW5kZXIoYykge1xuXHRpZiAoXG5cdFx0KCFjLl9kaXJ0eSAmJiAoYy5fZGlydHkgPSB0cnVlKSAmJiBxLnB1c2goYykgPT09IDEpIHx8XG5cdFx0cHJldkRlYm91bmNlICE9PSBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nXG5cdCkge1xuXHRcdHByZXZEZWJvdW5jZSA9IG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmc7XG5cdFx0KHByZXZEZWJvdW5jZSB8fCBkZWZlcikocHJvY2Vzcyk7XG5cdH1cbn1cblxuLyoqIEZsdXNoIHRoZSByZW5kZXIgcXVldWUgYnkgcmVyZW5kZXJpbmcgYWxsIHF1ZXVlZCBjb21wb25lbnRzICovXG5mdW5jdGlvbiBwcm9jZXNzKCkge1xuXHRsZXQgcDtcblx0cS5zb3J0KChhLCBiKSA9PiBiLl92bm9kZS5fZGVwdGggLSBhLl92bm9kZS5fZGVwdGgpO1xuXHR3aGlsZSAoKHAgPSBxLnBvcCgpKSkge1xuXHRcdC8vIGZvcmNlVXBkYXRlJ3MgY2FsbGJhY2sgYXJndW1lbnQgaXMgcmV1c2VkIGhlcmUgdG8gaW5kaWNhdGUgYSBub24tZm9yY2VkIHVwZGF0ZS5cblx0XHRpZiAocC5fZGlydHkpIHJlbmRlckNvbXBvbmVudChwKTtcblx0fVxufVxuIiwiaW1wb3J0IHtcblx0cmVuZGVyIGFzIHByZWFjdFJlbmRlcixcblx0b3B0aW9ucyxcblx0dG9DaGlsZEFycmF5LFxuXHRDb21wb25lbnRcbn0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IGFwcGx5RXZlbnROb3JtYWxpemF0aW9uIH0gZnJvbSAnLi9ldmVudHMnO1xuXG5jb25zdCBDQU1FTF9QUk9QUyA9IC9eKD86YWNjZW50fGFsaWdubWVudHxhcmFiaWN8YmFzZWxpbmV8Y2FwfGNsaXB8Y29sb3J8ZmlsbHxmbG9vZHxmb250fGdseXBofGhvcml6fG1hcmtlcnxvdmVybGluZXxwYWludHxzdG9wfHN0cmlrZXRocm91Z2h8c3Ryb2tlfHRleHR8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eClbQS1aXS87XG5cbi8vIFNvbWUgbGlicmFyaWVzIGxpa2UgYHJlYWN0LXZpcnR1YWxpemVkYCBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGlzLlxuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgUkVBQ1RfRUxFTUVOVF9UWVBFID1cblx0KHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0U3ltYm9sLmZvciAmJlxuXHRcdFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcblx0MHhlYWM3O1xuXG4vKipcbiAqIFByb3h5IHJlbmRlcigpIHNpbmNlIFJlYWN0IHJldHVybnMgYSBDb21wb25lbnQgcmVmZXJlbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVk5vZGUgdHJlZSB0byByZW5kZXJcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gcGFyZW50IERPTSBub2RlIHRvIHJlbmRlciB2bm9kZSB0cmVlIGludG9cbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBPcHRpb25hbCBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIHJlbmRlcmluZ1xuICogQHJldHVybnMge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudCB8IG51bGx9IFRoZSByb290IGNvbXBvbmVudCByZWZlcmVuY2Ugb3IgbnVsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHZub2RlLCBwYXJlbnQsIGNhbGxiYWNrKSB7XG5cdC8vIFJlYWN0IGRlc3Ryb3lzIGFueSBleGlzdGluZyBET00gbm9kZXMsIHNlZSAjMTcyN1xuXHQvLyAuLi5idXQgb25seSBvbiB0aGUgZmlyc3QgcmVuZGVyLCBzZWUgIzE4Mjhcblx0aWYgKHBhcmVudC5fY2hpbGRyZW4gPT0gbnVsbCkge1xuXHRcdHdoaWxlIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuXHRcdFx0cGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gaHlkcmF0ZSh2bm9kZSwgcGFyZW50LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKHZub2RlLCBwYXJlbnQsIGNhbGxiYWNrKSB7XG5cdHByZWFjdFJlbmRlcih2bm9kZSwgcGFyZW50KTtcblx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcblxuXHRyZXR1cm4gdm5vZGUgPyB2bm9kZS5fY29tcG9uZW50IDogbnVsbDtcbn1cblxubGV0IG9sZEV2ZW50SG9vayA9IG9wdGlvbnMuZXZlbnQ7XG5vcHRpb25zLmV2ZW50ID0gZSA9PiB7XG5cdGlmIChvbGRFdmVudEhvb2spIGUgPSBvbGRFdmVudEhvb2soZSk7XG5cdGUucGVyc2lzdCA9ICgpID0+IHt9O1xuXHRyZXR1cm4gKGUubmF0aXZlRXZlbnQgPSBlKTtcbn07XG5cbi8vIFBhdGNoIGluIGBVTlNBRkVfKmAgbGlmZWN5Y2xlIGhvb2tzXG5mdW5jdGlvbiBzZXRTYWZlRGVzY3JpcHRvcihwcm90bywga2V5KSB7XG5cdGlmIChwcm90b1snVU5TQUZFXycgKyBrZXldICYmICFwcm90b1trZXldKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBrZXksIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzWydVTlNBRkVfJyArIGtleV07XG5cdFx0XHR9LFxuXHRcdFx0Ly8gVGhpcyBgc2V0YCBpcyBvbmx5IHVzZWQgaWYgYSB1c2VyIHNldHMgYSBsaWZlY3ljbGUgbGlrZSBjV1Vcblx0XHRcdC8vIGFmdGVyIHNldHRpbmcgYSBsaWZlY3ljbGUgbGlrZSBVTlNBRkVfY1dVLiBJIGRvdWJ0IGFueW9uZVxuXHRcdFx0Ly8gYWN0dWFsbHkgZG9lcyB0aGlzIGluIHByYWN0aWNlIHNvIG5vdCB0ZXN0aW5nIGl0XG5cdFx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdFx0c2V0KHYpIHtcblx0XHRcdFx0dGhpc1snVU5TQUZFXycgKyBrZXldID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5sZXQgY2xhc3NOYW1lRGVzY3JpcHRvciA9IHtcblx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRnZXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2xhc3M7XG5cdH1cbn07XG5cbmxldCBvbGRWTm9kZUhvb2sgPSBvcHRpb25zLnZub2RlO1xub3B0aW9ucy52bm9kZSA9IHZub2RlID0+IHtcblx0dm5vZGUuJCR0eXBlb2YgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cblx0bGV0IHR5cGUgPSB2bm9kZS50eXBlO1xuXHRsZXQgcHJvcHMgPSB2bm9kZS5wcm9wcztcblxuXHQvLyBBcHBseSBET00gVk5vZGUgY29tcGF0XG5cdGlmICh0eXBlb2YgdHlwZSAhPSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gQXBwbHkgZGVmYXVsdFZhbHVlIHRvIHZhbHVlXG5cdFx0aWYgKHByb3BzLmRlZmF1bHRWYWx1ZSkge1xuXHRcdFx0aWYgKCFwcm9wcy52YWx1ZSAmJiBwcm9wcy52YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHRwcm9wcy52YWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcblx0XHRcdH1cblx0XHRcdGRlbGV0ZSBwcm9wcy5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHN1cHBvcnQgZm9yIGFycmF5IHNlbGVjdCB2YWx1ZXM6IDxzZWxlY3QgdmFsdWU9e1tdfSAvPlxuXHRcdGlmIChBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlKSAmJiBwcm9wcy5tdWx0aXBsZSAmJiB0eXBlID09PSAnc2VsZWN0Jykge1xuXHRcdFx0dG9DaGlsZEFycmF5KHByb3BzLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcblx0XHRcdFx0aWYgKHByb3BzLnZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpICE9IC0xKSB7XG5cdFx0XHRcdFx0Y2hpbGQucHJvcHMuc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGRlbGV0ZSBwcm9wcy52YWx1ZTtcblx0XHR9XG5cblx0XHQvLyBOb3JtYWxpemUgRE9NIHZub2RlIHByb3BlcnRpZXMuXG5cdFx0bGV0IHNob3VsZFNhbml0aXplLCBhdHRycywgaTtcblx0XHRmb3IgKGkgaW4gcHJvcHMpIGlmICgoc2hvdWxkU2FuaXRpemUgPSBDQU1FTF9QUk9QUy50ZXN0KGkpKSkgYnJlYWs7XG5cdFx0aWYgKHNob3VsZFNhbml0aXplKSB7XG5cdFx0XHRhdHRycyA9IHZub2RlLnByb3BzID0ge307XG5cdFx0XHRmb3IgKGkgaW4gcHJvcHMpIHtcblx0XHRcdFx0YXR0cnNbXG5cdFx0XHRcdFx0Q0FNRUxfUFJPUFMudGVzdChpKSA/IGkucmVwbGFjZSgvKFtBLVowLTldKS8sICctJDEnKS50b0xvd2VyQ2FzZSgpIDogaVxuXHRcdFx0XHRdID0gcHJvcHNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxpYXMgYGNsYXNzYCBwcm9wIHRvIGBjbGFzc05hbWVgIGlmIGF2YWlsYWJsZVxuXHRpZiAocHJvcHMuY2xhc3MgfHwgcHJvcHMuY2xhc3NOYW1lKSB7XG5cdFx0Y2xhc3NOYW1lRGVzY3JpcHRvci5lbnVtZXJhYmxlID0gJ2NsYXNzTmFtZScgaW4gcHJvcHM7XG5cdFx0aWYgKHByb3BzLmNsYXNzTmFtZSkgcHJvcHMuY2xhc3MgPSBwcm9wcy5jbGFzc05hbWU7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lRGVzY3JpcHRvcik7XG5cdH1cblxuXHQvLyBFdmVudHNcblx0YXBwbHlFdmVudE5vcm1hbGl6YXRpb24odm5vZGUpO1xuXG5cdC8vIENvbXBvbmVudCBiYXNlIGNsYXNzIGNvbXBhdFxuXHQvLyBXZSBjYW4ndCBqdXN0IHBhdGNoIHRoZSBiYXNlIGNvbXBvbmVudCBjbGFzcywgYmVjYXVzZSBjb21wb25lbnRzIHRoYXQgdXNlXG5cdC8vIGluaGVyaXRhbmNlIGFuZCBhcmUgdHJhbnNwaWxlZCBkb3duIHRvIEVTNSB3aWxsIG92ZXJ3cml0ZSBvdXIgcGF0Y2hlZFxuXHQvLyBnZXR0ZXJzIGFuZCBzZXR0ZXJzLiBTZWUgIzE5NDFcblx0aWYgKFxuXHRcdHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmXG5cdFx0IXR5cGUuX3BhdGNoZWRMaWZlY3ljbGVzICYmXG5cdFx0dHlwZS5wcm90b3R5cGVcblx0KSB7XG5cdFx0c2V0U2FmZURlc2NyaXB0b3IodHlwZS5wcm90b3R5cGUsICdjb21wb25lbnRXaWxsTW91bnQnKTtcblx0XHRzZXRTYWZlRGVzY3JpcHRvcih0eXBlLnByb3RvdHlwZSwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKTtcblx0XHRzZXRTYWZlRGVzY3JpcHRvcih0eXBlLnByb3RvdHlwZSwgJ2NvbXBvbmVudFdpbGxVcGRhdGUnKTtcblx0XHR0eXBlLl9wYXRjaGVkTGlmZWN5Y2xlcyA9IHRydWU7XG5cdH1cblxuXHRpZiAob2xkVk5vZGVIb29rKSBvbGRWTm9kZUhvb2sodm5vZGUpO1xufTtcbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBsZXQgaSA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSkge1xuXHRjb25zdCBjdHggPSB7fTtcblxuXHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdF9pZDogJ19fY0MnICsgaSsrLFxuXHRcdF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcblx0XHRDb25zdW1lcihwcm9wcywgY29udGV4dCkge1xuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHQpO1xuXHRcdH0sXG5cdFx0UHJvdmlkZXIocHJvcHMpIHtcblx0XHRcdGlmICghdGhpcy5nZXRDaGlsZENvbnRleHQpIHtcblx0XHRcdFx0Y29uc3Qgc3VicyA9IFtdO1xuXHRcdFx0XHR0aGlzLmdldENoaWxkQ29udGV4dCA9ICgpID0+IHtcblx0XHRcdFx0XHRjdHhbY29udGV4dC5faWRdID0gdGhpcztcblx0XHRcdFx0XHRyZXR1cm4gY3R4O1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IF9wcm9wcyA9PiB7XG5cdFx0XHRcdFx0aWYgKHByb3BzLnZhbHVlICE9PSBfcHJvcHMudmFsdWUpIHtcblx0XHRcdFx0XHRcdHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdFx0Yy5jb250ZXh0ID0gX3Byb3BzLnZhbHVlO1xuXHRcdFx0XHRcdFx0XHRlbnF1ZXVlUmVuZGVyKGMpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnN1YiA9IGMgPT4ge1xuXHRcdFx0XHRcdHN1YnMucHVzaChjKTtcblx0XHRcdFx0XHRsZXQgb2xkID0gYy5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGMpLCAxKTtcblx0XHRcdFx0XHRcdG9sZCAmJiBvbGQuY2FsbChjKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuXHRcdH1cblx0fTtcblxuXHRjb250ZXh0LkNvbnN1bWVyLmNvbnRleHRUeXBlID0gY29udGV4dDtcblxuXHRyZXR1cm4gY29udGV4dDtcbn1cbiIsIi8qKlxuICogQXNzaWduIHByb3BlcnRpZXMgZnJvbSBgcHJvcHNgIHRvIGBvYmpgXG4gKiBAdGVtcGxhdGUgTywgUCBUaGUgb2JqIGFuZCBwcm9wcyB0eXBlc1xuICogQHBhcmFtIHtPfSBvYmogVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG9cbiAqIEBwYXJhbSB7UH0gcHJvcHMgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHJldHVybnMge08gJiBQfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKG9iaiwgcHJvcHMpIHtcblx0Zm9yIChsZXQgaSBpbiBwcm9wcykgb2JqW2ldID0gcHJvcHNbaV07XG5cdHJldHVybiAvKiogQHR5cGUge08gJiBQfSAqLyAob2JqKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gb2JqZWN0cyBoYXZlIGEgZGlmZmVyZW50IHNoYXBlXG4gKiBAcGFyYW0ge29iamVjdH0gYVxuICogQHBhcmFtIHtvYmplY3R9IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0RpZmZlcnMoYSwgYikge1xuXHRmb3IgKGxldCBpIGluIGEpIGlmIChpICE9PSAnX19zb3VyY2UnICYmICEoaSBpbiBiKSkgcmV0dXJuIHRydWU7XG5cdGZvciAobGV0IGkgaW4gYikgaWYgKGkgIT09ICdfX3NvdXJjZScgJiYgYVtpXSAhPT0gYltpXSkgcmV0dXJuIHRydWU7XG5cdHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IGRpZmYsIHVubW91bnQsIGFwcGx5UmVmIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IEVNUFRZX09CSiwgRU1QVFlfQVJSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHJlbW92ZU5vZGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGdldERvbVNpYmxpbmcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIERpZmYgdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHdob3NlXG4gKiBjaGlsZHJlbiBhcmUgYmVpbmcgZGlmZmVkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3UGFyZW50Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsXG4gKiBub2RlIHdob3NlIGNoaWxkcmVuIHNob3VsZCBiZSBkaWZmJ2VkIGFnYWluc3Qgb2xkUGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRQYXJlbnRWTm9kZSBUaGUgb2xkIHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBuZXdQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge05vZGUgfCBUZXh0fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoaWxkcmVuKFxuXHRwYXJlbnREb20sXG5cdG5ld1BhcmVudFZOb2RlLFxuXHRvbGRQYXJlbnRWTm9kZSxcblx0Y29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZ1xuKSB7XG5cdGxldCBpLCBqLCBvbGRWTm9kZSwgbmV3RG9tLCBzaWJEb20sIGZpcnN0Q2hpbGREb20sIHJlZnM7XG5cblx0Ly8gVGhpcyBpcyBhIGNvbXByZXNzaW9uIG9mIG9sZFBhcmVudFZOb2RlIT1udWxsICYmIG9sZFBhcmVudFZOb2RlICE9IEVNUFRZX09CSiAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4gfHwgRU1QVFlfQVJSXG5cdC8vIGFzIEVNUFRZX09CSi5fY2hpbGRyZW4gc2hvdWxkIGJlIGB1bmRlZmluZWRgLlxuXHRsZXQgb2xkQ2hpbGRyZW4gPSAob2xkUGFyZW50Vk5vZGUgJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuKSB8fCBFTVBUWV9BUlI7XG5cblx0bGV0IG9sZENoaWxkcmVuTGVuZ3RoID0gb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXG5cdC8vIE9ubHkgaW4gdmVyeSBzcGVjaWZpYyBwbGFjZXMgc2hvdWxkIHRoaXMgbG9naWMgYmUgaW52b2tlZCAodG9wIGxldmVsIGByZW5kZXJgIGFuZCBgZGlmZkVsZW1lbnROb2Rlc2ApLlxuXHQvLyBJJ20gdXNpbmcgYEVNUFRZX09CSmAgdG8gc2lnbmFsIHdoZW4gYGRpZmZDaGlsZHJlbmAgaXMgaW52b2tlZCBpbiB0aGVzZSBzaXR1YXRpb25zLiBJIGNhbid0IHVzZSBgbnVsbGBcblx0Ly8gZm9yIHRoaXMgcHVycG9zZSwgYmVjYXVzZSBgbnVsbGAgaXMgYSB2YWxpZCB2YWx1ZSBmb3IgYG9sZERvbWAgd2hpY2ggY2FuIG1lYW4gdG8gc2tpcCB0byB0aGlzIGxvZ2ljXG5cdC8vIChlLmcuIGlmIG1vdW50aW5nIGEgbmV3IHRyZWUgaW4gd2hpY2ggdGhlIG9sZCBET00gc2hvdWxkIGJlIGlnbm9yZWQgKHVzdWFsbHkgZm9yIEZyYWdtZW50cykuXG5cdGlmIChvbGREb20gPT0gRU1QVFlfT0JKKSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdG9sZERvbSA9IGV4Y2Vzc0RvbUNoaWxkcmVuWzBdO1xuXHRcdH0gZWxzZSBpZiAob2xkQ2hpbGRyZW5MZW5ndGgpIHtcblx0XHRcdG9sZERvbSA9IGdldERvbVNpYmxpbmcob2xkUGFyZW50Vk5vZGUsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvbGREb20gPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGkgPSAwO1xuXHRuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoXG5cdFx0bmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuLFxuXHRcdGNoaWxkVk5vZGUgPT4ge1xuXHRcdFx0aWYgKGNoaWxkVk5vZGUgIT0gbnVsbCkge1xuXHRcdFx0XHRjaGlsZFZOb2RlLl9wYXJlbnQgPSBuZXdQYXJlbnRWTm9kZTtcblx0XHRcdFx0Y2hpbGRWTm9kZS5fZGVwdGggPSBuZXdQYXJlbnRWTm9kZS5fZGVwdGggKyAxO1xuXG5cdFx0XHRcdC8vIENoZWNrIGlmIHdlIGZpbmQgYSBjb3JyZXNwb25kaW5nIGVsZW1lbnQgaW4gb2xkQ2hpbGRyZW4uXG5cdFx0XHRcdC8vIElmIGZvdW5kLCBkZWxldGUgdGhlIGFycmF5IGl0ZW0gYnkgc2V0dGluZyB0byBgdW5kZWZpbmVkYC5cblx0XHRcdFx0Ly8gV2UgdXNlIGB1bmRlZmluZWRgLCBhcyBgbnVsbGAgaXMgcmVzZXJ2ZWQgZm9yIGVtcHR5IHBsYWNlaG9sZGVyc1xuXHRcdFx0XHQvLyAoaG9sZXMpLlxuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRvbGRWTm9kZSA9PT0gbnVsbCB8fFxuXHRcdFx0XHRcdChvbGRWTm9kZSAmJlxuXHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdFx0XHRjaGlsZFZOb2RlLnR5cGUgPT09IG9sZFZOb2RlLnR5cGUpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdG9sZENoaWxkcmVuW2ldID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEVpdGhlciBvbGRWTm9kZSA9PT0gdW5kZWZpbmVkIG9yIG9sZENoaWxkcmVuTGVuZ3RoID4gMCxcblx0XHRcdFx0XHQvLyBzbyBhZnRlciB0aGlzIGxvb3Agb2xkVk5vZGUgPT0gbnVsbCBvciBvbGRWTm9kZSBpcyBhIHZhbGlkIHZhbHVlLlxuXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBvbGRDaGlsZHJlbkxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2pdO1xuXHRcdFx0XHRcdFx0Ly8gSWYgY2hpbGRWTm9kZSBpcyB1bmtleWVkLCB3ZSBvbmx5IG1hdGNoIHNpbWlsYXJseSB1bmtleWVkIG5vZGVzLCBvdGhlcndpc2Ugd2UgbWF0Y2ggYnkga2V5LlxuXHRcdFx0XHRcdFx0Ly8gV2UgYWx3YXlzIG1hdGNoIGJ5IHR5cGUgKGluIGVpdGhlciBjYXNlKS5cblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0b2xkVk5vZGUgJiZcblx0XHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdG9sZENoaWxkcmVuW2pdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9sZFZOb2RlID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZFZOb2RlIHx8IEVNUFRZX09CSjtcblxuXHRcdFx0XHQvLyBNb3JwaCB0aGUgb2xkIGVsZW1lbnQgaW50byB0aGUgbmV3IG9uZSwgYnV0IGRvbid0IGFwcGVuZCBpdCB0byB0aGUgZG9tIHlldFxuXHRcdFx0XHRuZXdEb20gPSBkaWZmKFxuXHRcdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdFx0b2xkRG9tLFxuXHRcdFx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKChqID0gY2hpbGRWTm9kZS5yZWYpICYmIG9sZFZOb2RlLnJlZiAhPSBqKSB7XG5cdFx0XHRcdFx0aWYgKCFyZWZzKSByZWZzID0gW107XG5cdFx0XHRcdFx0aWYgKG9sZFZOb2RlLnJlZikgcmVmcy5wdXNoKG9sZFZOb2RlLnJlZiwgbnVsbCwgY2hpbGRWTm9kZSk7XG5cdFx0XHRcdFx0cmVmcy5wdXNoKGosIGNoaWxkVk5vZGUuX2NvbXBvbmVudCB8fCBuZXdEb20sIGNoaWxkVk5vZGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT25seSBwcm9jZWVkIGlmIHRoZSB2bm9kZSBoYXMgbm90IGJlZW4gdW5tb3VudGVkIGJ5IGBkaWZmKClgIGFib3ZlLlxuXHRcdFx0XHRpZiAobmV3RG9tICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAoZmlyc3RDaGlsZERvbSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRmaXJzdENoaWxkRG9tID0gbmV3RG9tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0Ly8gT25seSBGcmFnbWVudHMgb3IgY29tcG9uZW50cyB0aGF0IHJldHVybiBGcmFnbWVudCBsaWtlIFZOb2RlcyB3aWxsXG5cdFx0XHRcdFx0XHQvLyBoYXZlIGEgbm9uLW51bGwgX2xhc3REb21DaGlsZC4gQ29udGludWUgdGhlIGRpZmYgZnJvbSB0aGUgZW5kIG9mXG5cdFx0XHRcdFx0XHQvLyB0aGlzIEZyYWdtZW50J3MgRE9NIHRyZWUuXG5cdFx0XHRcdFx0XHRuZXdEb20gPSBjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQ7XG5cblx0XHRcdFx0XHRcdC8vIEVhZ2VybHkgY2xlYW51cCBfbGFzdERvbUNoaWxkLiBXZSBkb24ndCBuZWVkIHRvIHBlcnNpc3QgdGhlIHZhbHVlIGJlY2F1c2Vcblx0XHRcdFx0XHRcdC8vIGl0IGlzIG9ubHkgdXNlZCBieSBgZGlmZkNoaWxkcmVuYCB0byBkZXRlcm1pbmUgd2hlcmUgdG8gcmVzdW1lIHRoZSBkaWZmIGFmdGVyXG5cdFx0XHRcdFx0XHQvLyBkaWZmaW5nIENvbXBvbmVudHMgYW5kIEZyYWdtZW50cy5cblx0XHRcdFx0XHRcdGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCA9IG51bGw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID09IG9sZFZOb2RlIHx8XG5cdFx0XHRcdFx0XHRuZXdEb20gIT0gb2xkRG9tIHx8XG5cdFx0XHRcdFx0XHRuZXdEb20ucGFyZW50Tm9kZSA9PSBudWxsXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHQvLyBOT1RFOiBleGNlc3NEb21DaGlsZHJlbj09b2xkVk5vZGUgYWJvdmU6XG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2YgZXhjZXNzRG9tQ2hpbGRyZW49PW51bGwgJiYgb2xkVk5vZGU9PW51bGwhXG5cdFx0XHRcdFx0XHQvLyBUaGUgdmFsdWVzIG9ubHkgaGF2ZSB0aGUgc2FtZSB0eXBlIHdoZW4gYG51bGxgLlxuXG5cdFx0XHRcdFx0XHRvdXRlcjogaWYgKG9sZERvbSA9PSBudWxsIHx8IG9sZERvbS5wYXJlbnROb2RlICE9PSBwYXJlbnREb20pIHtcblx0XHRcdFx0XHRcdFx0cGFyZW50RG9tLmFwcGVuZENoaWxkKG5ld0RvbSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBgajxvbGRDaGlsZHJlbkxlbmd0aDsgais9MmAgaXMgYW4gYWx0ZXJuYXRpdmUgdG8gYGorKzxvbGRDaGlsZHJlbkxlbmd0aC8yYFxuXHRcdFx0XHRcdFx0XHRmb3IgKFxuXHRcdFx0XHRcdFx0XHRcdHNpYkRvbSA9IG9sZERvbSwgaiA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0KHNpYkRvbSA9IHNpYkRvbS5uZXh0U2libGluZykgJiYgaiA8IG9sZENoaWxkcmVuTGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdGogKz0gMlxuXHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc2liRG9tID09IG5ld0RvbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWsgb3V0ZXI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHBhcmVudERvbS5pbnNlcnRCZWZvcmUobmV3RG9tLCBvbGREb20pO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBCcm93c2VycyB3aWxsIGluZmVyIGFuIG9wdGlvbidzIGB2YWx1ZWAgZnJvbSBgdGV4dENvbnRlbnRgIHdoZW5cblx0XHRcdFx0XHRcdC8vIG5vIHZhbHVlIGlzIHByZXNlbnQuIFRoaXMgZXNzZW50aWFsbHkgYnlwYXNzZXMgb3VyIGNvZGUgdG8gc2V0IGl0XG5cdFx0XHRcdFx0XHQvLyBsYXRlciBpbiBgZGlmZigpYC4gSXQgd29ya3MgZmluZSBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IGZvciBJRTExXG5cdFx0XHRcdFx0XHQvLyB3aGVyZSBpdCBicmVha3Mgc2V0dGluZyBgc2VsZWN0LnZhbHVlYC4gVGhlcmUgaXQgd2lsbCBiZSBhbHdheXMgc2V0XG5cdFx0XHRcdFx0XHQvLyB0byBhbiBlbXB0eSBzdHJpbmcuIFJlLWFwcGx5aW5nIGFuIG9wdGlvbnMgdmFsdWUgd2lsbCBmaXggdGhhdCwgc29cblx0XHRcdFx0XHRcdC8vIHRoZXJlIGFyZSBwcm9iYWJseSBzb21lIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyB0aGF0IGFyZW4ndFxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlZCBwcm9wZXJseS5cblx0XHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0XHQvLyBUbyBmaXggaXQgd2UgbWFrZSBzdXJlIHRvIHJlc2V0IHRoZSBpbmZlcnJlZCB2YWx1ZSwgc28gdGhhdCBvdXIgb3duXG5cdFx0XHRcdFx0XHQvLyB2YWx1ZSBjaGVjayBpbiBgZGlmZigpYCB3b24ndCBiZSBza2lwcGVkLlxuXHRcdFx0XHRcdFx0aWYgKG5ld1BhcmVudFZOb2RlLnR5cGUgPT0gJ29wdGlvbicpIHtcblx0XHRcdFx0XHRcdFx0cGFyZW50RG9tLnZhbHVlID0gJyc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGlmIGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCBleGlzdGVkLCB0aGVuXG5cdFx0XHRcdFx0XHQvLyBuZXdEb20gPSBjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQgcGVyIGxpbmUgMTAxLiBFbHNlIGl0IGlzXG5cdFx0XHRcdFx0XHQvLyB0aGUgc2FtZSBhcyBjaGlsZFZOb2RlLl9kb20sIG1lYW5pbmcgdGhpcyBjb21wb25lbnQgcmV0dXJuZWRcblx0XHRcdFx0XHRcdC8vIG9ubHkgYSBzaW5nbGUgRE9NIG5vZGVcblx0XHRcdFx0XHRcdG5ld1BhcmVudFZOb2RlLl9sYXN0RG9tQ2hpbGQgPSBuZXdEb207XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkrKztcblx0XHRcdHJldHVybiBjaGlsZFZOb2RlO1xuXHRcdH1cblx0KTtcblxuXHRuZXdQYXJlbnRWTm9kZS5fZG9tID0gZmlyc3RDaGlsZERvbTtcblxuXHQvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm90IHBhcnQgb2YgYW55IHZub2RlLlxuXHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCAmJiB0eXBlb2YgbmV3UGFyZW50Vk5vZGUudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdGZvciAoaSA9IGV4Y2Vzc0RvbUNoaWxkcmVuLmxlbmd0aDsgaS0tOyApIHtcblx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbltpXSAhPSBudWxsKSByZW1vdmVOb2RlKGV4Y2Vzc0RvbUNoaWxkcmVuW2ldKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgcmVtYWluaW5nIG9sZENoaWxkcmVuIGlmIHRoZXJlIGFyZSBhbnkuXG5cdGZvciAoaSA9IG9sZENoaWxkcmVuTGVuZ3RoOyBpLS07ICkge1xuXHRcdGlmIChvbGRDaGlsZHJlbltpXSAhPSBudWxsKSB1bm1vdW50KG9sZENoaWxkcmVuW2ldLCBvbGRDaGlsZHJlbltpXSk7XG5cdH1cblxuXHQvLyBTZXQgcmVmcyBvbmx5IGFmdGVyIHVubW91bnRcblx0aWYgKHJlZnMpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcmVmcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0YXBwbHlSZWYocmVmc1tpXSwgcmVmc1srK2ldLCByZWZzWysraV0pO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEZsYXR0ZW4gYW5kIGxvb3AgdGhyb3VnaCB0aGUgY2hpbGRyZW4gb2YgYSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbmRleCcpLkNvbXBvbmVudENoaWxkcmVufSBjaGlsZHJlbiBUaGUgdW5mbGF0dGVuZWRcbiAqIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0geyh2bm9kZTogaW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlKSA9PiBpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IFtjYWxsYmFja11cbiAqIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGNoaWxkIGJlZm9yZSBpdCBpcyBhZGRlZCB0byB0aGUgZmxhdHRlbmVkIGxpc3QuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZSB8IHN0cmluZyB8IG51bWJlcj59IFtmbGF0dGVuZWRdIEFuIGZsYXQgYXJyYXkgb2YgY2hpbGRyZW4gdG8gbW9kaWZ5XG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0NoaWxkQXJyYXkoY2hpbGRyZW4sIGNhbGxiYWNrLCBmbGF0dGVuZWQpIHtcblx0aWYgKGZsYXR0ZW5lZCA9PSBudWxsKSBmbGF0dGVuZWQgPSBbXTtcblxuXHRpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRyZW4gPT09ICdib29sZWFuJykge1xuXHRcdGlmIChjYWxsYmFjaykgZmxhdHRlbmVkLnB1c2goY2FsbGJhY2sobnVsbCkpO1xuXHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dG9DaGlsZEFycmF5KGNoaWxkcmVuW2ldLCBjYWxsYmFjaywgZmxhdHRlbmVkKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIWNhbGxiYWNrKSB7XG5cdFx0ZmxhdHRlbmVkLnB1c2goY2hpbGRyZW4pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNoaWxkcmVuID09PSAnbnVtYmVyJykge1xuXHRcdGZsYXR0ZW5lZC5wdXNoKGNhbGxiYWNrKGNyZWF0ZVZOb2RlKG51bGwsIGNoaWxkcmVuLCBudWxsLCBudWxsKSkpO1xuXHR9IGVsc2UgaWYgKGNoaWxkcmVuLl9kb20gIT0gbnVsbCB8fCBjaGlsZHJlbi5fY29tcG9uZW50ICE9IG51bGwpIHtcblx0XHRmbGF0dGVuZWQucHVzaChcblx0XHRcdGNhbGxiYWNrKGNyZWF0ZVZOb2RlKGNoaWxkcmVuLnR5cGUsIGNoaWxkcmVuLnByb3BzLCBjaGlsZHJlbi5rZXksIG51bGwpKVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0ZmxhdHRlbmVkLnB1c2goY2FsbGJhY2soY2hpbGRyZW4pKTtcblx0fVxuXG5cdHJldHVybiBmbGF0dGVuZWQ7XG59XG4iLCJpbXBvcnQgeyBJU19OT05fRElNRU5TSU9OQUwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0aGUgb2xkIGFuZCBuZXcgcHJvcGVydGllcyBvZiBhIFZOb2RlIGFuZCBhcHBseSBjaGFuZ2VzIHRvIHRoZSBET00gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gbm9kZSB0byBhcHBseVxuICogY2hhbmdlcyB0b1xuICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBUaGUgb2xkIHByb3BzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtib29sZWFufSBoeWRyYXRlIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb24gbW9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZlByb3BzKGRvbSwgbmV3UHJvcHMsIG9sZFByb3BzLCBpc1N2ZywgaHlkcmF0ZSkge1xuXHRsZXQgaTtcblxuXHRmb3IgKGkgaW4gb2xkUHJvcHMpIHtcblx0XHRpZiAoIShpIGluIG5ld1Byb3BzKSkge1xuXHRcdFx0c2V0UHJvcGVydHkoZG9tLCBpLCBudWxsLCBvbGRQcm9wc1tpXSwgaXNTdmcpO1xuXHRcdH1cblx0fVxuXG5cdGZvciAoaSBpbiBuZXdQcm9wcykge1xuXHRcdGlmIChcblx0XHRcdCghaHlkcmF0ZSB8fCB0eXBlb2YgbmV3UHJvcHNbaV0gPT0gJ2Z1bmN0aW9uJykgJiZcblx0XHRcdGkgIT09ICd2YWx1ZScgJiZcblx0XHRcdGkgIT09ICdjaGVja2VkJyAmJlxuXHRcdFx0b2xkUHJvcHNbaV0gIT09IG5ld1Byb3BzW2ldXG5cdFx0KSB7XG5cdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG5ld1Byb3BzW2ldLCBvbGRQcm9wc1tpXSwgaXNTdmcpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwga2V5LCB2YWx1ZSkge1xuXHRpZiAoa2V5WzBdID09PSAnLScpIHtcblx0XHRzdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcblx0fSBlbHNlIGlmIChcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmXG5cdFx0SVNfTk9OX0RJTUVOU0lPTkFMLnRlc3Qoa2V5KSA9PT0gZmFsc2Vcblx0KSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jztcblx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0c3R5bGVba2V5XSA9ICcnO1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlW2tleV0gPSB2YWx1ZTtcblx0fVxufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIG5vZGUgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHByb3BlcnR5IHRvXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlIFRoZSBvbGQgdmFsdWUgdGhlIHByb3BlcnR5IGhhZFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlIG9yIG5vdFxuICovXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShkb20sIG5hbWUsIHZhbHVlLCBvbGRWYWx1ZSwgaXNTdmcpIHtcblx0aWYgKGlzU3ZnKSB7XG5cdFx0aWYgKG5hbWUgPT09ICdjbGFzc05hbWUnKSB7XG5cdFx0XHRuYW1lID0gJ2NsYXNzJztcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsYXNzJykge1xuXHRcdG5hbWUgPSAnY2xhc3NOYW1lJztcblx0fVxuXG5cdGlmIChuYW1lID09PSAna2V5JyB8fCBuYW1lID09PSAnY2hpbGRyZW4nKSB7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuXHRcdGNvbnN0IHMgPSBkb20uc3R5bGU7XG5cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0cy5jc3NUZXh0ID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2Ygb2xkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHMuY3NzVGV4dCA9ICcnO1xuXHRcdFx0XHRvbGRWYWx1ZSA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvbGRWYWx1ZSkge1xuXHRcdFx0XHRmb3IgKGxldCBpIGluIG9sZFZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKCEodmFsdWUgJiYgaSBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHNldFN0eWxlKHMsIGksICcnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIW9sZFZhbHVlIHx8IHZhbHVlW2ldICE9PSBvbGRWYWx1ZVtpXSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUocywgaSwgdmFsdWVbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBCZW5jaG1hcmsgZm9yIGNvbXBhcmlzb246IGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNTc0Yzk1NGJkYjk2NWI5YTAwOTY1YWM2XG5cdGVsc2UgaWYgKG5hbWVbMF0gPT09ICdvJyAmJiBuYW1lWzFdID09PSAnbicpIHtcblx0XHRsZXQgdXNlQ2FwdHVyZSA9IG5hbWUgIT09IChuYW1lID0gbmFtZS5yZXBsYWNlKC9DYXB0dXJlJC8sICcnKSk7XG5cdFx0bGV0IG5hbWVMb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRuYW1lID0gKG5hbWVMb3dlciBpbiBkb20gPyBuYW1lTG93ZXIgOiBuYW1lKS5zbGljZSgyKTtcblxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aWYgKCFvbGRWYWx1ZSkgZG9tLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZXZlbnRQcm94eSwgdXNlQ2FwdHVyZSk7XG5cdFx0XHQoZG9tLl9saXN0ZW5lcnMgfHwgKGRvbS5fbGlzdGVuZXJzID0ge30pKVtuYW1lXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoXG5cdFx0bmFtZSAhPT0gJ2xpc3QnICYmXG5cdFx0bmFtZSAhPT0gJ3RhZ05hbWUnICYmXG5cdFx0Ly8gSFRNTEJ1dHRvbkVsZW1lbnQuZm9ybSBhbmQgSFRNTElucHV0RWxlbWVudC5mb3JtIGFyZSByZWFkLW9ubHkgYnV0IGNhbiBiZSBzZXQgdXNpbmdcblx0XHQvLyBzZXRBdHRyaWJ1dGVcblx0XHRuYW1lICE9PSAnZm9ybScgJiZcblx0XHRuYW1lICE9PSAndHlwZScgJiZcblx0XHQhaXNTdmcgJiZcblx0XHRuYW1lIGluIGRvbVxuXHQpIHtcblx0XHRkb21bbmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcblx0fSBlbHNlIGlmIChcblx0XHR0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiZcblx0XHRuYW1lICE9PSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnXG5cdCkge1xuXHRcdGlmIChuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvXnhsaW5rOj8vLCAnJykpKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZU5TKFxuXHRcdFx0XHRcdCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvbS5zZXRBdHRyaWJ1dGVOUyhcblx0XHRcdFx0XHQnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsXG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdHZhbHVlXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogUHJveHkgYW4gZXZlbnQgdG8gaG9va2VkIGV2ZW50IGhhbmRsZXJzXG4gKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBldmVudCBvYmplY3QgZnJvbSB0aGUgYnJvd3NlclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXZlbnRQcm94eShlKSB7XG5cdHRoaXMuX2xpc3RlbmVyc1tlLnR5cGVdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBkaWZmQ2hpbGRyZW4sIHRvQ2hpbGRBcnJheSB9IGZyb20gJy4vY2hpbGRyZW4nO1xuaW1wb3J0IHsgZGlmZlByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XG5pbXBvcnQgeyBhc3NpZ24sIHJlbW92ZU5vZGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4uL29wdGlvbnMnO1xuXG4vKipcbiAqIERpZmYgdHdvIHZpcnR1YWwgbm9kZXMgYW5kIGFwcGx5IHByb3BlciBjaGFuZ2VzIHRvIHRoZSBET01cbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgcGFyZW50IG9mIHRoZSBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG5ld1ZOb2RlIFRoZSBuZXcgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgZWxlbWVudCBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge0VsZW1lbnQgfCBUZXh0fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzSHlkcmF0aW5nXSBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmKFxuXHRwYXJlbnREb20sXG5cdG5ld1ZOb2RlLFxuXHRvbGRWTm9kZSxcblx0Y29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZ1xuKSB7XG5cdGxldCB0bXAsXG5cdFx0bmV3VHlwZSA9IG5ld1ZOb2RlLnR5cGU7XG5cblx0Ly8gV2hlbiBwYXNzaW5nIHRocm91Z2ggY3JlYXRlRWxlbWVudCBpdCBhc3NpZ25zIHRoZSBvYmplY3Rcblx0Ly8gY29uc3RydWN0b3IgYXMgdW5kZWZpbmVkLiBUaGlzIHRvIHByZXZlbnQgSlNPTi1pbmplY3Rpb24uXG5cdGlmIChuZXdWTm9kZS5jb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcblxuXHRpZiAoKHRtcCA9IG9wdGlvbnMuX2RpZmYpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdHRyeSB7XG5cdFx0b3V0ZXI6IGlmICh0eXBlb2YgbmV3VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0bGV0IGMsIGlzTmV3LCBvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90LCBjbGVhclByb2Nlc3NpbmdFeGNlcHRpb247XG5cdFx0XHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblxuXHRcdFx0Ly8gTmVjZXNzYXJ5IGZvciBjcmVhdGVDb250ZXh0IGFwaS4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHdpbGwgcGFzc1xuXHRcdFx0Ly8gdGhlIGNvbnRleHQgdmFsdWUgYXMgYHRoaXMuY29udGV4dGAganVzdCBmb3IgdGhpcyBjb21wb25lbnQuXG5cdFx0XHR0bXAgPSBuZXdUeXBlLmNvbnRleHRUeXBlO1xuXHRcdFx0bGV0IHByb3ZpZGVyID0gdG1wICYmIGNvbnRleHRbdG1wLl9pZF07XG5cdFx0XHRsZXQgY2N0eCA9IHRtcFxuXHRcdFx0XHQ/IHByb3ZpZGVyXG5cdFx0XHRcdFx0PyBwcm92aWRlci5wcm9wcy52YWx1ZVxuXHRcdFx0XHRcdDogdG1wLl9kZWZhdWx0VmFsdWVcblx0XHRcdFx0OiBjb250ZXh0O1xuXG5cdFx0XHQvLyBHZXQgY29tcG9uZW50IGFuZCBzZXQgaXQgdG8gYGNgXG5cdFx0XHRpZiAob2xkVk5vZGUuX2NvbXBvbmVudCkge1xuXHRcdFx0XHRjID0gbmV3Vk5vZGUuX2NvbXBvbmVudCA9IG9sZFZOb2RlLl9jb21wb25lbnQ7XG5cdFx0XHRcdGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IGMuX3Byb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wZW5kaW5nRXJyb3I7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJbnN0YW50aWF0ZSB0aGUgbmV3IGNvbXBvbmVudFxuXHRcdFx0XHRpZiAoJ3Byb3RvdHlwZScgaW4gbmV3VHlwZSAmJiBuZXdUeXBlLnByb3RvdHlwZS5yZW5kZXIpIHtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY29tcG9uZW50ID0gYyA9IG5ldyBuZXdUeXBlKG5ld1Byb3BzLCBjY3R4KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgQ29tcG9uZW50KG5ld1Byb3BzLCBjY3R4KTtcblx0XHRcdFx0XHRjLmNvbnN0cnVjdG9yID0gbmV3VHlwZTtcblx0XHRcdFx0XHRjLnJlbmRlciA9IGRvUmVuZGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcm92aWRlcikgcHJvdmlkZXIuc3ViKGMpO1xuXG5cdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0aWYgKCFjLnN0YXRlKSBjLnN0YXRlID0ge307XG5cdFx0XHRcdGMuY29udGV4dCA9IGNjdHg7XG5cdFx0XHRcdGMuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRpc05ldyA9IGMuX2RpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcblx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gbnVsbCkge1xuXHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBjLnN0YXRlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGMuX25leHRTdGF0ZSA9PSBjLnN0YXRlKSB7XG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCBjLl9uZXh0U3RhdGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduKFxuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wcywgYy5fbmV4dFN0YXRlKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRvbGRQcm9wcyA9IGMucHJvcHM7XG5cdFx0XHRvbGRTdGF0ZSA9IGMuc3RhdGU7XG5cblx0XHRcdC8vIEludm9rZSBwcmUtcmVuZGVyIGxpZmVjeWNsZSBtZXRob2RzXG5cdFx0XHRpZiAoaXNOZXcpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09IG51bGwgJiZcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5jb21wb25lbnREaWRNb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0bmV3UHJvcHMgIT09IG9sZFByb3BzICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBjY3R4KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhYy5fZm9yY2UgJiZcblx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPSBudWxsICYmXG5cdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIGMuX25leHRTdGF0ZSwgY2N0eCkgPT09IGZhbHNlXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRcdGMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRcdFx0aWYgKGMuX3JlbmRlckNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZvciAodG1wID0gMDsgdG1wIDwgbmV3Vk5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgdG1wKyspIHtcblx0XHRcdFx0XHRcdGlmIChuZXdWTm9kZS5fY2hpbGRyZW5bdG1wXSkge1xuXHRcdFx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW5bdG1wXS5fcGFyZW50ID0gbmV3Vk5vZGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50V2lsbFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUsIGNjdHgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRjLmNvbXBvbmVudERpZFVwZGF0ZShvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjLmNvbnRleHQgPSBjY3R4O1xuXHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKCh0bXAgPSBvcHRpb25zLl9yZW5kZXIpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdGMuX3BhcmVudERvbSA9IHBhcmVudERvbTtcblxuXHRcdFx0dG1wID0gYy5yZW5kZXIoYy5wcm9wcywgYy5zdGF0ZSwgYy5jb250ZXh0KTtcblx0XHRcdGxldCBpc1RvcExldmVsRnJhZ21lbnQgPVxuXHRcdFx0XHR0bXAgIT0gbnVsbCAmJiB0bXAudHlwZSA9PSBGcmFnbWVudCAmJiB0bXAua2V5ID09IG51bGw7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoXG5cdFx0XHRcdGlzVG9wTGV2ZWxGcmFnbWVudCA/IHRtcC5wcm9wcy5jaGlsZHJlbiA6IHRtcFxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKGMuZ2V0Q2hpbGRDb250ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0Y29udGV4dCA9IGFzc2lnbihhc3NpZ24oe30sIGNvbnRleHQpLCBjLmdldENoaWxkQ29udGV4dCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpc05ldyAmJiBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0c25hcHNob3QgPSBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKG9sZFByb3BzLCBvbGRTdGF0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGRpZmZDaGlsZHJlbihcblx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdGMuYmFzZSA9IG5ld1ZOb2RlLl9kb207XG5cblx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdFx0Yy5fcGVuZGluZ0Vycm9yID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMuX2ZvcmNlID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IGRpZmZFbGVtZW50Tm9kZXMoXG5cdFx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCh0bXAgPSBvcHRpb25zLmRpZmZlZCkpIHRtcChuZXdWTm9kZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIG5ld1ZOb2RlLCBvbGRWTm9kZSk7XG5cdH1cblxuXHRyZXR1cm4gbmV3Vk5vZGUuX2RvbTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCkge1xuXHRpZiAob3B0aW9ucy5fY29tbWl0KSBvcHRpb25zLl9jb21taXQocm9vdCwgY29tbWl0UXVldWUpO1xuXG5cdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbW1pdFF1ZXVlID0gYy5fcmVuZGVyQ2FsbGJhY2tzO1xuXHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGNiID0+IHtcblx0XHRcdFx0Y2IuY2FsbChjKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgYy5fdm5vZGUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyByZXByZXNlbnRpbmcgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nXG4gKiB0aGUgdmlydHVhbCBub2RlcyBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0geyp9IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZGlmZkVsZW1lbnROb2Rlcyhcblx0ZG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGNvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGk7XG5cdGxldCBvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzO1xuXHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblxuXHQvLyBUcmFja3MgZW50ZXJpbmcgYW5kIGV4aXRpbmcgU1ZHIG5hbWVzcGFjZSB3aGVuIGRlc2NlbmRpbmcgdGhyb3VnaCB0aGUgdHJlZS5cblx0aXNTdmcgPSBuZXdWTm9kZS50eXBlID09PSAnc3ZnJyB8fCBpc1N2ZztcblxuXHRpZiAoZG9tID09IG51bGwgJiYgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY2hpbGQgPSBleGNlc3NEb21DaGlsZHJlbltpXTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRjaGlsZCAhPSBudWxsICYmXG5cdFx0XHRcdChuZXdWTm9kZS50eXBlID09PSBudWxsXG5cdFx0XHRcdFx0PyBjaGlsZC5ub2RlVHlwZSA9PT0gM1xuXHRcdFx0XHRcdDogY2hpbGQubG9jYWxOYW1lID09PSBuZXdWTm9kZS50eXBlKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbSA9IGNoaWxkO1xuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbltpXSA9IG51bGw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gPT0gbnVsbCkge1xuXHRcdGlmIChuZXdWTm9kZS50eXBlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3UHJvcHMpO1xuXHRcdH1cblx0XHRkb20gPSBpc1N2Z1xuXHRcdFx0PyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmV3Vk5vZGUudHlwZSlcblx0XHRcdDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuZXdWTm9kZS50eXBlKTtcblx0XHQvLyB3ZSBjcmVhdGVkIGEgbmV3IHBhcmVudCwgc28gbm9uZSBvZiB0aGUgcHJldmlvdXNseSBhdHRhY2hlZCBjaGlsZHJlbiBjYW4gYmUgcmV1c2VkOlxuXHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gbnVsbDtcblx0fVxuXG5cdGlmIChuZXdWTm9kZS50eXBlID09PSBudWxsKSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuW2V4Y2Vzc0RvbUNoaWxkcmVuLmluZGV4T2YoZG9tKV0gPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgZG9tLmRhdGEgIT0gbmV3UHJvcHMpIHtcblx0XHRcdGRvbS5kYXRhID0gbmV3UHJvcHM7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5ld1ZOb2RlICE9PSBvbGRWTm9kZSkge1xuXHRcdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbiA9IEVNUFRZX0FSUi5zbGljZS5jYWxsKGRvbS5jaGlsZE5vZGVzKTtcblx0XHR9XG5cblx0XHRvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzIHx8IEVNUFRZX09CSjtcblxuXHRcdGxldCBvbGRIdG1sID0gb2xkUHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG5cdFx0bGV0IG5ld0h0bWwgPSBuZXdQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblxuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHByb3BzIGFyZSBub3QgZGlmZmVkIGF0IGFsbCAoaW5jbHVkaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKVxuXHRcdC8vIEBUT0RPIHdlIHNob3VsZCB3YXJuIGluIGRlYnVnIG1vZGUgd2hlbiBwcm9wcyBkb24ndCBtYXRjaCBoZXJlLlxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdGlmIChvbGRQcm9wcyA9PT0gRU1QVFlfT0JKKSB7XG5cdFx0XHRcdG9sZFByb3BzID0ge307XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvbGRQcm9wc1tkb20uYXR0cmlidXRlc1tpXS5uYW1lXSA9IGRvbS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZXdIdG1sIHx8IG9sZEh0bWwpIHtcblx0XHRcdFx0Ly8gQXZvaWQgcmUtYXBwbHlpbmcgdGhlIHNhbWUgJ19faHRtbCcgaWYgaXQgZGlkIG5vdCBjaGFuZ2VkIGJldHdlZW4gcmUtcmVuZGVyXG5cdFx0XHRcdGlmICghbmV3SHRtbCB8fCAhb2xkSHRtbCB8fCBuZXdIdG1sLl9faHRtbCAhPSBvbGRIdG1sLl9faHRtbCkge1xuXHRcdFx0XHRcdGRvbS5pbm5lckhUTUwgPSAobmV3SHRtbCAmJiBuZXdIdG1sLl9faHRtbCkgfHwgJyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBpc0h5ZHJhdGluZyk7XG5cblx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBuZXdWTm9kZS5wcm9wcy5jaGlsZHJlbjtcblxuXHRcdC8vIElmIHRoZSBuZXcgdm5vZGUgZGlkbid0IGhhdmUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIGRpZmYgaXRzIGNoaWxkcmVuXG5cdFx0aWYgKCFuZXdIdG1sKSB7XG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdGRvbSxcblx0XHRcdFx0bmV3Vk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XHRuZXdWTm9kZS50eXBlID09PSAnZm9yZWlnbk9iamVjdCcgPyBmYWxzZSA6IGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdEVNUFRZX09CSixcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gKGFzIGFib3ZlLCBkb24ndCBkaWZmIHByb3BzIGR1cmluZyBoeWRyYXRpb24pXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQndmFsdWUnIGluIG5ld1Byb3BzICYmXG5cdFx0XHRcdG5ld1Byb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0bmV3UHJvcHMudmFsdWUgIT09IGRvbS52YWx1ZVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbS52YWx1ZSA9IG5ld1Byb3BzLnZhbHVlID09IG51bGwgPyAnJyA6IG5ld1Byb3BzLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHQnY2hlY2tlZCcgaW4gbmV3UHJvcHMgJiZcblx0XHRcdFx0bmV3UHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdG5ld1Byb3BzLmNoZWNrZWQgIT09IGRvbS5jaGVja2VkXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tLmNoZWNrZWQgPSBuZXdQcm9wcy5jaGVja2VkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkb207XG59XG5cbi8qKlxuICogSW52b2tlIG9yIHVwZGF0ZSBhIHJlZiwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaXMgYSBmdW5jdGlvbiBvciBvYmplY3QgcmVmLlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHJlZlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUsIHZub2RlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykgcmVmKHZhbHVlKTtcblx0XHRlbHNlIHJlZi5jdXJyZW50ID0gdmFsdWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFVubW91bnQgYSB2aXJ0dWFsIG5vZGUgZnJvbSB0aGUgdHJlZSBhbmQgYXBwbHkgRE9NIGNoYW5nZXNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHVubW91bnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBwYXJlbnRWTm9kZSBUaGUgcGFyZW50IG9mIHRoZSBWTm9kZSB0aGF0XG4gKiBpbml0aWF0ZWQgdGhlIHVubW91bnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBSZW1vdmVdIEZsYWcgdGhhdCBpbmRpY2F0ZXMgdGhhdCBhIHBhcmVudCBub2RlIG9mIHRoZVxuICogY3VycmVudCBlbGVtZW50IGlzIGFscmVhZHkgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpIHtcblx0bGV0IHI7XG5cdGlmIChvcHRpb25zLnVubW91bnQpIG9wdGlvbnMudW5tb3VudCh2bm9kZSk7XG5cblx0aWYgKChyID0gdm5vZGUucmVmKSkge1xuXHRcdGlmICghci5jdXJyZW50IHx8IHIuY3VycmVudCA9PT0gdm5vZGUuX2RvbSkgYXBwbHlSZWYociwgbnVsbCwgcGFyZW50Vk5vZGUpO1xuXHR9XG5cblx0bGV0IGRvbTtcblx0aWYgKCFza2lwUmVtb3ZlICYmIHR5cGVvZiB2bm9kZS50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0c2tpcFJlbW92ZSA9IChkb20gPSB2bm9kZS5fZG9tKSAhPSBudWxsO1xuXHR9XG5cblx0dm5vZGUuX2RvbSA9IHZub2RlLl9sYXN0RG9tQ2hpbGQgPSBudWxsO1xuXG5cdGlmICgociA9IHZub2RlLl9jb21wb25lbnQpICE9IG51bGwpIHtcblx0XHRpZiAoci5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHBhcmVudFZOb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyLmJhc2UgPSByLl9wYXJlbnREb20gPSBudWxsO1xuXHR9XG5cblx0aWYgKChyID0gdm5vZGUuX2NoaWxkcmVuKSkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHJbaV0pIHVubW91bnQocltpXSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gIT0gbnVsbCkgcmVtb3ZlTm9kZShkb20pO1xufVxuXG4vKiogVGhlIGAucmVuZGVyKClgIG1ldGhvZCBmb3IgYSBQRkMgYmFja2luZyBpbnN0YW5jZS4gKi9cbmZ1bmN0aW9uIGRvUmVuZGVyKHByb3BzLCBzdGF0ZSwgY29udGV4dCkge1xuXHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG59XG4iLCJpbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgRU1QVFlfQVJSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY3JlYXRlVk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1lbGVtZW50JztcblxuLyoqXG4gKiBDbG9uZXMgdGhlIGdpdmVuIFZOb2RlLCBvcHRpb25hbGx5IGFkZGluZyBhdHRyaWJ1dGVzL3Byb3BzIGFuZCByZXBsYWNpbmcgaXRzIGNoaWxkcmVuLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZpcnR1YWwgRE9NIGVsZW1lbnQgdG8gY2xvbmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBBdHRyaWJ1dGVzL3Byb3BzIHRvIGFkZCB3aGVuIGNsb25pbmdcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW4+fSByZXN0IEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHVzZWQgYXMgcmVwbGFjZW1lbnQgY2hpbGRyZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVsZW1lbnQodm5vZGUsIHByb3BzKSB7XG5cdHByb3BzID0gYXNzaWduKGFzc2lnbih7fSwgdm5vZGUucHJvcHMpLCBwcm9wcyk7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikgcHJvcHMuY2hpbGRyZW4gPSBFTVBUWV9BUlIuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRyZXR1cm4gY3JlYXRlVk5vZGUoXG5cdFx0dm5vZGUudHlwZSxcblx0XHRwcm9wcyxcblx0XHRwcm9wcy5rZXkgfHwgdm5vZGUua2V5LFxuXHRcdHByb3BzLnJlZiB8fCB2bm9kZS5yZWZcblx0KTtcbn1cbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIEZpbmQgdGhlIGNsb3Nlc3QgZXJyb3IgYm91bmRhcnkgdG8gYSB0aHJvd24gZXJyb3IgYW5kIGNhbGwgaXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBlcnJvciBUaGUgdGhyb3duIHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZub2RlIHRoYXQgdGhyZXdcbiAqIHRoZSBlcnJvciB0aGF0IHdhcyBjYXVnaHQgKGV4Y2VwdCBmb3IgdW5tb3VudGluZyB3aGVuIHRoaXMgcGFyYW1ldGVyXG4gKiBpcyB0aGUgaGlnaGVzdCBwYXJlbnQgdGhhdCB3YXMgYmVpbmcgdW5tb3VudGVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoRXJyb3IoZXJyb3IsIHZub2RlKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0bGV0IGNvbXBvbmVudCwgaGFzQ2F1Z2h0O1xuXG5cdGZvciAoOyAodm5vZGUgPSB2bm9kZS5fcGFyZW50KTsgKSB7XG5cdFx0aWYgKChjb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50KSAmJiAhY29tcG9uZW50Ll9wcm9jZXNzaW5nRXhjZXB0aW9uKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yICYmXG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGhhc0NhdWdodCA9IHRydWU7XG5cdFx0XHRcdFx0Y29tcG9uZW50LnNldFN0YXRlKFxuXHRcdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aGFzQ2F1Z2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhhc0NhdWdodClcblx0XHRcdFx0XHRyZXR1cm4gZW5xdWV1ZVJlbmRlcigoY29tcG9uZW50Ll9wZW5kaW5nRXJyb3IgPSBjb21wb25lbnQpKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IGVycm9yO1xufVxuIiwiaW1wb3J0IHtcblx0Y3JlYXRlRWxlbWVudCxcblx0cmVuZGVyIGFzIHByZWFjdFJlbmRlcixcblx0Y2xvbmVFbGVtZW50IGFzIHByZWFjdENsb25lRWxlbWVudCxcblx0Y3JlYXRlUmVmLFxuXHRDb21wb25lbnQsXG5cdGNyZWF0ZUNvbnRleHQsXG5cdEZyYWdtZW50XG59IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQge1xuXHR1c2VTdGF0ZSxcblx0dXNlUmVkdWNlcixcblx0dXNlRWZmZWN0LFxuXHR1c2VMYXlvdXRFZmZlY3QsXG5cdHVzZVJlZixcblx0dXNlSW1wZXJhdGl2ZUhhbmRsZSxcblx0dXNlTWVtbyxcblx0dXNlQ2FsbGJhY2ssXG5cdHVzZUNvbnRleHQsXG5cdHVzZURlYnVnVmFsdWVcbn0gZnJvbSAncHJlYWN0L2hvb2tzJztcbmltcG9ydCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICcuL1B1cmVDb21wb25lbnQnO1xuaW1wb3J0IHsgbWVtbyB9IGZyb20gJy4vbWVtbyc7XG5pbXBvcnQgeyBmb3J3YXJkUmVmIH0gZnJvbSAnLi9mb3J3YXJkUmVmJztcbmltcG9ydCB7IENoaWxkcmVuIH0gZnJvbSAnLi9DaGlsZHJlbic7XG5pbXBvcnQgeyBTdXNwZW5zZSwgbGF6eSB9IGZyb20gJy4vc3VzcGVuc2UnO1xuaW1wb3J0IHsgU3VzcGVuc2VMaXN0IH0gZnJvbSAnLi9zdXNwZW5zZS1saXN0JztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJy4vcG9ydGFscyc7XG5pbXBvcnQgeyBoeWRyYXRlLCByZW5kZXIsIFJFQUNUX0VMRU1FTlRfVFlQRSB9IGZyb20gJy4vcmVuZGVyJztcblxuY29uc3QgdmVyc2lvbiA9ICcxNi44LjAnOyAvLyB0cmljayBsaWJyYXJpZXMgdG8gdGhpbmsgd2UgYXJlIHJlYWN0XG5cbi8qKlxuICogTGVnYWN5IHZlcnNpb24gb2YgY3JlYXRlRWxlbWVudC5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGVbXCJ0eXBlXCJdfSB0eXBlIFRoZSBub2RlIG5hbWUgb3IgQ29tcG9uZW50IGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZhY3RvcnkodHlwZSkge1xuXHRyZXR1cm4gY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBwYXNzZWQgZWxlbWVudCBpcyBhIHZhbGlkIChwKXJlYWN0IG5vZGUuXG4gKiBAcGFyYW0geyp9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChlbGVtZW50KSB7XG5cdHJldHVybiAhIWVsZW1lbnQgJiYgZWxlbWVudC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuXG4vKipcbiAqIFdyYXAgYGNsb25lRWxlbWVudGAgdG8gYWJvcnQgaWYgdGhlIHBhc3NlZCBlbGVtZW50IGlzIG5vdCBhIHZhbGlkIGVsZW1lbnQgYW5kIGFwcGx5XG4gKiBhbGwgdm5vZGUgbm9ybWFsaXphdGlvbnMuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSBlbGVtZW50IFRoZSB2bm9kZSB0byBjbG9uZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIFByb3BzIHRvIGFkZCB3aGVuIGNsb25pbmdcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Q2hpbGRyZW4+fSByZXN0IE9wdGlvbmFsIGNvbXBvbmVudCBjaGlsZHJlblxuICovXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoZWxlbWVudCkge1xuXHRpZiAoIWlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDtcblx0cmV0dXJuIHByZWFjdENsb25lRWxlbWVudC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGNvbXBvbmVudCB0cmVlIGZyb20gdGhlIERPTSwgaW5jbHVkaW5nIHN0YXRlIGFuZCBldmVudCBoYW5kbGVycy5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gY29udGFpbmVyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXIpIHtcblx0aWYgKGNvbnRhaW5lci5fY2hpbGRyZW4pIHtcblx0XHRwcmVhY3RSZW5kZXIobnVsbCwgY29udGFpbmVyKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogR2V0IHRoZSBtYXRjaGluZyBET00gbm9kZSBmb3IgYSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50IHwgbnVsbH1cbiAqL1xuZnVuY3Rpb24gZmluZERPTU5vZGUoY29tcG9uZW50KSB7XG5cdHJldHVybiAoXG5cdFx0KGNvbXBvbmVudCAmJlxuXHRcdFx0KGNvbXBvbmVudC5iYXNlIHx8IChjb21wb25lbnQubm9kZVR5cGUgPT09IDEgJiYgY29tcG9uZW50KSkpIHx8XG5cdFx0bnVsbFxuXHQpO1xufVxuXG4vKipcbiAqIERlcHJlY2F0ZWQgd2F5IHRvIGNvbnRyb2wgYmF0Y2hlZCByZW5kZXJpbmcgaW5zaWRlIHRoZSByZWNvbmNpbGVyLCBidXQgd2VcbiAqIGFscmVhZHkgc2NoZWR1bGUgaW4gYmF0Y2hlcyBpbnNpZGUgb3VyIHJlbmRlcmluZyBjb2RlXG4gKiBAdGVtcGxhdGUgQXJnXG4gKiBAcGFyYW0geyhhcmc6IEFyZykgPT4gdm9pZH0gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB0cmlnZ2VycyB0aGUgdXBkYXRlZFxuICogQHBhcmFtIHtBcmd9IFthcmddIE9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuY29uc3QgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSAoY2FsbGJhY2ssIGFyZykgPT4gY2FsbGJhY2soYXJnKTtcblxuZXhwb3J0ICogZnJvbSAncHJlYWN0L2hvb2tzJztcbmV4cG9ydCB7XG5cdHZlcnNpb24sXG5cdENoaWxkcmVuLFxuXHRyZW5kZXIsXG5cdGh5ZHJhdGUsXG5cdHVubW91bnRDb21wb25lbnRBdE5vZGUsXG5cdGNyZWF0ZVBvcnRhbCxcblx0Y3JlYXRlRWxlbWVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0Y3JlYXRlRmFjdG9yeSxcblx0Y2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdEZyYWdtZW50LFxuXHRpc1ZhbGlkRWxlbWVudCxcblx0ZmluZERPTU5vZGUsXG5cdENvbXBvbmVudCxcblx0UHVyZUNvbXBvbmVudCxcblx0bWVtbyxcblx0Zm9yd2FyZFJlZixcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHR1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyxcblx0U3VzcGVuc2UsXG5cdFN1c3BlbnNlTGlzdCxcblx0bGF6eVxufTtcblxuLy8gUmVhY3QgY29waWVzIHRoZSBuYW1lZCBleHBvcnRzIHRvIHRoZSBkZWZhdWx0IG9uZS5cbmV4cG9ydCBkZWZhdWx0IHtcblx0dXNlU3RhdGUsXG5cdHVzZVJlZHVjZXIsXG5cdHVzZUVmZmVjdCxcblx0dXNlTGF5b3V0RWZmZWN0LFxuXHR1c2VSZWYsXG5cdHVzZUltcGVyYXRpdmVIYW5kbGUsXG5cdHVzZU1lbW8sXG5cdHVzZUNhbGxiYWNrLFxuXHR1c2VDb250ZXh0LFxuXHR1c2VEZWJ1Z1ZhbHVlLFxuXHR2ZXJzaW9uLFxuXHRDaGlsZHJlbixcblx0cmVuZGVyLFxuXHRoeWRyYXRlOiByZW5kZXIsXG5cdHVubW91bnRDb21wb25lbnRBdE5vZGUsXG5cdGNyZWF0ZVBvcnRhbCxcblx0Y3JlYXRlRWxlbWVudCxcblx0Y3JlYXRlQ29udGV4dCxcblx0Y3JlYXRlRmFjdG9yeSxcblx0Y2xvbmVFbGVtZW50LFxuXHRjcmVhdGVSZWYsXG5cdEZyYWdtZW50LFxuXHRpc1ZhbGlkRWxlbWVudCxcblx0ZmluZERPTU5vZGUsXG5cdENvbXBvbmVudCxcblx0UHVyZUNvbXBvbmVudCxcblx0bWVtbyxcblx0Zm9yd2FyZFJlZixcblx0dW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMsXG5cdFN1c3BlbnNlLFxuXHRTdXNwZW5zZUxpc3QsXG5cdGxhenlcbn07XG4iLCJ2YXIgcj17ZGF0YTpcIlwifSxlPWZ1bmN0aW9uKGUpe3RyeXt2YXIgdD1lP2UucXVlcnlTZWxlY3RvcihcIiNfZ29vYmVyXCIpOnNlbGYuX2dvb2JlcjtyZXR1cm4gdHx8KCh0PShlfHxkb2N1bWVudC5oZWFkKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikpKS5pbm5lckhUTUw9XCIgXCIsdC5pZD1cIl9nb29iZXJcIiksdC5maXJzdENoaWxkfWNhdGNoKHIpe31yZXR1cm4gcn0sdD1mdW5jdGlvbihyKXt2YXIgdD1lKHIpLGE9dC5kYXRhO3JldHVybiB0LmRhdGE9XCJcIixhfSxhPS8oPzooW2EtejAtOS0lQF0rKSAqOj8gKihbXns7XSs/KTt8KFteO317XSo/KSAreyl8KH0pL2dpLG49L1xcL1xcKi4qP1xcKlxcL3xcXHN7Mix9fFxcbi9nbSxjPWZ1bmN0aW9uKHIsZSx0KXt2YXIgYT1cIlwiLG49XCJcIixpPVwiXCI7aWYoL15AW2t8Zl0vLnRlc3QodCkpcmV0dXJuIHQrSlNPTi5zdHJpbmdpZnkocikucmVwbGFjZSgvXCIsXCIvZyxcIjtcIikucmVwbGFjZSgvXCJ8LFwiL2csXCJcIikucmVwbGFjZSgvOnsvZyxcIntcIik7Zm9yKHZhciBvIGluIHIpe3ZhciB1PXJbb107aWYoXCJvYmplY3RcIj09dHlwZW9mIHUpe3ZhciBzPWUrXCIgXCIrbzsvJi9nLnRlc3QobykmJihzPW8ucmVwbGFjZSgvJi9nLGUpKSxcIkBcIj09b1swXSYmKHM9ZSksbis9Yyh1LHMscz09ZT9vOnR8fFwiXCIpfWVsc2UvXkBpLy50ZXN0KG8pP2k9bytcIiBcIit1K1wiO1wiOmErPW8ucmVwbGFjZSgvW0EtWl0vZyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpK1wiOlwiK3UrXCI7XCJ9aWYoYS5jaGFyQ29kZUF0KDApKXt2YXIgZj1lK1wie1wiK2ErXCJ9XCI7cmV0dXJuIHQ/bit0K1wie1wiK2YrXCJ9XCI6aStmK259cmV0dXJuIGkrbn0saT17YzowfSxvPWZ1bmN0aW9uKHIsZSx0LG8pe3ZhciB1PUpTT04uc3RyaW5naWZ5KHIpLHM9aVt1XXx8KGlbdV09dD9cIlwiOlwiLmdvXCIrdS5zcGxpdChcIlwiKS5yZWR1Y2UoZnVuY3Rpb24ocixlKXtyZXR1cm4gcitlLmNoYXJDb2RlQXQoMCl8OH0sNCkpO3JldHVybiBmdW5jdGlvbihyLGUsdCl7ZS5kYXRhLmluZGV4T2Yocik8MCYmKGUuZGF0YT10P3IrZS5kYXRhOmUuZGF0YStyKX0oaVtzXXx8KGlbc109YyhyWzBdP2Z1bmN0aW9uKHIpe2Zvcih2YXIgZSx0PVt7fV07ZT1hLmV4ZWMoci5yZXBsYWNlKG4sXCJcIikpOyllWzRdJiZ0LnNoaWZ0KCksZVszXT90LnVuc2hpZnQodFswXVtlWzNdXT17fSk6ZVs0XXx8KHRbMF1bZVsxXV09ZVsyXSk7cmV0dXJuIHRbMF19KHIpOnIscykpLGUsbykscy5zbGljZSgxKX0sdT1mdW5jdGlvbihyLGUsdCl7cmV0dXJuIHIucmVkdWNlKGZ1bmN0aW9uKHIsYSxuKXt2YXIgYz1lW25dO2lmKGMmJmMuY2FsbCl7dmFyIGk9Yyh0KSxvPWkmJmkucHJvcHMmJmkucHJvcHMuY2xhc3NOYW1lfHwvXmdvLy50ZXN0KGkpJiZpO2M9bz9cIi5cIitvOmkmJmkucHJvcHM/XCJcIjppfXJldHVybiByK2ErKGN8fFwiXCIpfSxcIlwiKX07ZnVuY3Rpb24gcyhyKXt2YXIgdD10aGlzfHx7fSxhPXIuY2FsbD9yKHQucCk6cjtyZXR1cm4gbyhhLm1hcD91KGEsW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksdC5wKTphLGUodC50YXJnZXQpLHQuZyx0Lm8pfXZhciBmLGwscCxnPXMuYmluZCh7ZzoxfSksZD1mdW5jdGlvbihyLGUsdCl7Zj1yLGw9ZSxwPXR9O2Z1bmN0aW9uIHYocil7dmFyIGU9dGhpc3x8e307cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzO2Z1bmN0aW9uIGEoYSxuKXt2YXIgYz1lLnA9T2JqZWN0LmFzc2lnbihwP3t0aGVtZTpwKCl9Ont9LGEpLGk9Yy5jbGFzc05hbWU7cmV0dXJuIGUubz0vXFxzKmdvWzAtOV0rL2cudGVzdChpKSxjLmNsYXNzTmFtZT1zLmFwcGx5KGUsdCkrKGk/XCIgXCIraTpcIlwiKSxjLnJlZj1uLGYocixjKX1yZXR1cm4gbD9sKGEpOmF9fWV4cG9ydHt2IGFzIHN0eWxlZCxkIGFzIHNldHVwLHQgYXMgZXh0cmFjdENzcyxzIGFzIGNzcyxnIGFzIGdsb2J9O1xuIiwiZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgcmV0dXJuIHN0cmluZ3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlOyIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyBzaGFsbG93RGlmZmVycyB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQ29tcG9uZW50IGNsYXNzIHdpdGggYSBwcmVkZWZpbmVkIGBzaG91bGRDb21wb25lbnRVcGRhdGVgIGltcGxlbWVudGF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBQdXJlQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IocHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cdFx0Ly8gU29tZSB0aGlyZC1wYXJ0eSBsaWJyYXJpZXMgY2hlY2sgaWYgdGhpcyBwcm9wZXJ0eSBpcyBwcmVzZW50XG5cdFx0dGhpcy5pc1B1cmVSZWFjdENvbXBvbmVudCA9IHRydWU7XG5cdH1cblxuXHRzaG91bGRDb21wb25lbnRVcGRhdGUocHJvcHMsIHN0YXRlKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdHNoYWxsb3dEaWZmZXJzKHRoaXMucHJvcHMsIHByb3BzKSB8fCBzaGFsbG93RGlmZmVycyh0aGlzLnN0YXRlLCBzdGF0ZSlcblx0XHQpO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBvcHRpb25zIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5cbmxldCBvbGRWTm9kZUhvb2sgPSBvcHRpb25zLnZub2RlO1xub3B0aW9ucy52bm9kZSA9IHZub2RlID0+IHtcblx0aWYgKHZub2RlLnR5cGUgJiYgdm5vZGUudHlwZS5fZm9yd2FyZGVkICYmIHZub2RlLnJlZikge1xuXHRcdHZub2RlLnByb3BzLnJlZiA9IHZub2RlLnJlZjtcblx0XHR2bm9kZS5yZWYgPSBudWxsO1xuXHR9XG5cblx0aWYgKG9sZFZOb2RlSG9vaykgb2xkVk5vZGVIb29rKHZub2RlKTtcbn07XG5cbi8qKlxuICogUGFzcyByZWYgZG93biB0byBhIGNoaWxkLiBUaGlzIGlzIG1haW5seSB1c2VkIGluIGxpYnJhcmllcyB3aXRoIEhPQ3MgdGhhdFxuICogd3JhcCBjb21wb25lbnRzLiBVc2luZyBgZm9yd2FyZFJlZmAgdGhlcmUgaXMgYW4gZWFzeSB3YXkgdG8gZ2V0IGEgcmVmZXJlbmNlXG4gKiBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnQgaW5zdGVhZCBvZiBvbmUgb2YgdGhlIHdyYXBwZXIgaXRzZWxmLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW5kZXgnKS5Gb3J3YXJkRm59IGZuXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuRnVuY3Rpb25hbENvbXBvbmVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmRSZWYoZm4pIHtcblx0ZnVuY3Rpb24gRm9yd2FyZGVkKHByb3BzKSB7XG5cdFx0bGV0IGNsb25lID0gYXNzaWduKHt9LCBwcm9wcyk7XG5cdFx0ZGVsZXRlIGNsb25lLnJlZjtcblx0XHRyZXR1cm4gZm4oY2xvbmUsIHByb3BzLnJlZik7XG5cdH1cblx0Rm9yd2FyZGVkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblx0Rm9yd2FyZGVkLl9mb3J3YXJkZWQgPSB0cnVlO1xuXHRGb3J3YXJkZWQuZGlzcGxheU5hbWUgPSAnRm9yd2FyZFJlZignICsgKGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUpICsgJyknO1xuXHRyZXR1cm4gRm9yd2FyZGVkO1xufVxuIiwiaW1wb3J0IHsgdG9DaGlsZEFycmF5IH0gZnJvbSAncHJlYWN0JztcblxuY29uc3QgbWFwRm4gPSAoY2hpbGRyZW4sIGZuKSA9PiB7XG5cdGlmICghY2hpbGRyZW4pIHJldHVybiBudWxsO1xuXHRyZXR1cm4gdG9DaGlsZEFycmF5KGNoaWxkcmVuKS5tYXAoZm4pO1xufTtcblxuLy8gVGhpcyBBUEkgaXMgY29tcGxldGVseSB1bm5lY2Vzc2FyeSBmb3IgUHJlYWN0LCBzbyBpdCdzIGJhc2ljYWxseSBwYXNzdGhyb3VnaC5cbmV4cG9ydCBjb25zdCBDaGlsZHJlbiA9IHtcblx0bWFwOiBtYXBGbixcblx0Zm9yRWFjaDogbWFwRm4sXG5cdGNvdW50KGNoaWxkcmVuKSB7XG5cdFx0cmV0dXJuIGNoaWxkcmVuID8gdG9DaGlsZEFycmF5KGNoaWxkcmVuKS5sZW5ndGggOiAwO1xuXHR9LFxuXHRvbmx5KGNoaWxkcmVuKSB7XG5cdFx0Y2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoY2hpbGRyZW4pO1xuXHRcdGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDEpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2hpbGRyZW4ub25seSgpIGV4cGVjdHMgb25seSBvbmUgY2hpbGQuJyk7XG5cdFx0fVxuXHRcdHJldHVybiBjaGlsZHJlblswXTtcblx0fSxcblx0dG9BcnJheTogdG9DaGlsZEFycmF5XG59O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50LCBvcHRpb25zIH0gZnJvbSAncHJlYWN0JztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IG9sZENhdGNoRXJyb3IgPSBvcHRpb25zLl9jYXRjaEVycm9yO1xub3B0aW9ucy5fY2F0Y2hFcnJvciA9IGZ1bmN0aW9uKGVycm9yLCBuZXdWTm9kZSwgb2xkVk5vZGUpIHtcblx0aWYgKGVycm9yLnRoZW4pIHtcblx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0XHRsZXQgY29tcG9uZW50O1xuXHRcdGxldCB2bm9kZSA9IG5ld1ZOb2RlO1xuXG5cdFx0Zm9yICg7ICh2bm9kZSA9IHZub2RlLl9wYXJlbnQpOyApIHtcblx0XHRcdGlmICgoY29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudCkgJiYgY29tcG9uZW50Ll9jaGlsZERpZFN1c3BlbmQpIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY2FsbCBvbGRDYXRjaEVycm9yIGlmIHdlIGZvdW5kIGEgU3VzcGVuc2Vcblx0XHRcdFx0cmV0dXJuIGNvbXBvbmVudC5fY2hpbGREaWRTdXNwZW5kKGVycm9yLCBuZXdWTm9kZS5fY29tcG9uZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0b2xkQ2F0Y2hFcnJvcihlcnJvciwgbmV3Vk5vZGUsIG9sZFZOb2RlKTtcbn07XG5cbmZ1bmN0aW9uIGRldGFjaGVkQ2xvbmUodm5vZGUpIHtcblx0aWYgKHZub2RlKSB7XG5cdFx0dm5vZGUgPSBhc3NpZ24oe30sIHZub2RlKTtcblx0XHR2bm9kZS5fY29tcG9uZW50ID0gbnVsbDtcblx0XHR2bm9kZS5fY2hpbGRyZW4gPSB2bm9kZS5fY2hpbGRyZW4gJiYgdm5vZGUuX2NoaWxkcmVuLm1hcChkZXRhY2hlZENsb25lKTtcblx0fVxuXHRyZXR1cm4gdm5vZGU7XG59XG5cbi8vIGhhdmluZyBjdXN0b20gaW5oZXJpdGFuY2UgaW5zdGVhZCBvZiBhIGNsYXNzIGhlcmUgc2F2ZXMgYSBsb3Qgb2YgYnl0ZXNcbmV4cG9ydCBmdW5jdGlvbiBTdXNwZW5zZShwcm9wcykge1xuXHQvLyB3ZSBkbyBub3QgY2FsbCBzdXBlciBoZXJlIHRvIGdvbGYgc29tZSBieXRlcy4uLlxuXHR0aGlzLl9zdXNwZW5zaW9ucyA9IDA7XG5cdHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlciA9IG51bGw7XG59XG5cbi8vIFRoaW5ncyB3ZSBkbyBoZXJlIHRvIHNhdmUgc29tZSBieXRlcyBidXQgYXJlIG5vdCBwcm9wZXIgSlMgaW5oZXJpdGFuY2U6XG4vLyAtIGNhbGwgYG5ldyBDb21wb25lbnQoKWAgYXMgdGhlIHByb3RvdHlwZVxuLy8gLSBkbyBub3Qgc2V0IGBTdXNwZW5zZS5wcm90b3R5cGUuY29uc3RydWN0b3JgIHRvIGBTdXNwZW5zZWBcblN1c3BlbnNlLnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnQoKTtcblxuLyoqXG4gKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2UgVGhlIHRocm93biBwcm9taXNlXG4gKiBAcGFyYW0ge0NvbXBvbmVudDxhbnksIGFueT59IHN1c3BlbmRpbmdDb21wb25lbnQgVGhlIHN1c3BlbmRpbmcgY29tcG9uZW50XG4gKi9cblN1c3BlbnNlLnByb3RvdHlwZS5fY2hpbGREaWRTdXNwZW5kID0gZnVuY3Rpb24ocHJvbWlzZSwgc3VzcGVuZGluZ0NvbXBvbmVudCkge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlN1c3BlbnNlQ29tcG9uZW50fSAqL1xuXHRjb25zdCBjID0gdGhpcztcblxuXHRjb25zdCByZXNvbHZlID0gc3VzcGVuZGVkKGMuX3Zub2RlKTtcblxuXHRsZXQgcmVzb2x2ZWQgPSBmYWxzZTtcblx0Y29uc3Qgb25SZXNvbHZlZCA9ICgpID0+IHtcblx0XHRpZiAocmVzb2x2ZWQpIHJldHVybjtcblxuXHRcdHJlc29sdmVkID0gdHJ1ZTtcblxuXHRcdGlmIChyZXNvbHZlKSB7XG5cdFx0XHRyZXNvbHZlKG9uU3VzcGVuc2lvbkNvbXBsZXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b25TdXNwZW5zaW9uQ29tcGxldGUoKTtcblx0XHR9XG5cdH07XG5cblx0c3VzcGVuZGluZ0NvbXBvbmVudC5fc3VzcGVuZGVkQ29tcG9uZW50V2lsbFVubW91bnQgPVxuXHRcdHN1c3BlbmRpbmdDb21wb25lbnQuY29tcG9uZW50V2lsbFVubW91bnQ7XG5cdHN1c3BlbmRpbmdDb21wb25lbnQuY29tcG9uZW50V2lsbFVubW91bnQgPSAoKSA9PiB7XG5cdFx0b25SZXNvbHZlZCgpO1xuXG5cdFx0aWYgKHN1c3BlbmRpbmdDb21wb25lbnQuX3N1c3BlbmRlZENvbXBvbmVudFdpbGxVbm1vdW50KSB7XG5cdFx0XHRzdXNwZW5kaW5nQ29tcG9uZW50Ll9zdXNwZW5kZWRDb21wb25lbnRXaWxsVW5tb3VudCgpO1xuXHRcdH1cblx0fTtcblxuXHRjb25zdCBvblN1c3BlbnNpb25Db21wbGV0ZSA9ICgpID0+IHtcblx0XHRpZiAoIS0tYy5fc3VzcGVuc2lvbnMpIHtcblx0XHRcdGMuX3Zub2RlLl9jaGlsZHJlblswXSA9IGMuc3RhdGUuX3N1c3BlbmRlZDtcblx0XHRcdGMuc2V0U3RhdGUoeyBfc3VzcGVuZGVkOiAoYy5fZGV0YWNoT25OZXh0UmVuZGVyID0gbnVsbCkgfSk7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICghYy5fc3VzcGVuc2lvbnMrKykge1xuXHRcdGMuc2V0U3RhdGUoeyBfc3VzcGVuZGVkOiAoYy5fZGV0YWNoT25OZXh0UmVuZGVyID0gYy5fdm5vZGUuX2NoaWxkcmVuWzBdKSB9KTtcblx0fVxuXHRwcm9taXNlLnRoZW4ob25SZXNvbHZlZCwgb25SZXNvbHZlZCk7XG59O1xuXG5TdXNwZW5zZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ocHJvcHMsIHN0YXRlKSB7XG5cdGlmICh0aGlzLl9kZXRhY2hPbk5leHRSZW5kZXIpIHtcblx0XHR0aGlzLl92bm9kZS5fY2hpbGRyZW5bMF0gPSBkZXRhY2hlZENsb25lKHRoaXMuX2RldGFjaE9uTmV4dFJlbmRlcik7XG5cdFx0dGhpcy5fZGV0YWNoT25OZXh0UmVuZGVyID0gbnVsbDtcblx0fVxuXG5cdHJldHVybiBbXG5cdFx0Y3JlYXRlRWxlbWVudChDb21wb25lbnQsIG51bGwsIHN0YXRlLl9zdXNwZW5kZWQgPyBudWxsIDogcHJvcHMuY2hpbGRyZW4pLFxuXHRcdHN0YXRlLl9zdXNwZW5kZWQgJiYgcHJvcHMuZmFsbGJhY2tcblx0XTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGFuZCBjYWxscyB0aGUgcGFyZW50IGNvbXBvbmVudCdzIF9zdXNwZW5kZWQgbWV0aG9kLCBwYXNzaW5nIGluIHRoZVxuICogc3VzcGVuZGVkIHZub2RlLiBUaGlzIGlzIGEgd2F5IGZvciBhIHBhcmVudCAoZS5nLiBTdXNwZW5zZUxpc3QpIHRvIGdldCBub3RpZmllZFxuICogdGhhdCBvbmUgb2YgaXRzIGNoaWxkcmVuL2Rlc2NlbmRhbnRzIHN1c3BlbmRlZC5cbiAqXG4gKiBUaGUgcGFyZW50IE1BWSByZXR1cm4gYSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIHdpbGwgZ2V0IGNhbGxlZCB3aGVuIHRoZVxuICogc3VzcGVuc2lvbiByZXNvbHZlcywgbm90aWZ5aW5nIHRoZSBwYXJlbnQgb2YgdGhlIGZhY3QuXG4gKiBNb3Jlb3ZlciwgdGhlIGNhbGxiYWNrIGdldHMgZnVuY3Rpb24gYHVuc3VzcGVuZGAgYXMgYSBwYXJhbWV0ZXIuIFRoZSByZXNvbHZlZFxuICogY2hpbGQgZGVzY2VuZGFudCB3aWxsIG5vdCBhY3R1YWxseSBnZXQgdW5zdXNwZW5kZWQgdW50aWwgYHVuc3VzcGVuZGAgZ2V0cyBjYWxsZWQuXG4gKiBUaGlzIGlzIGEgd2F5IGZvciB0aGUgcGFyZW50IHRvIGRlbGF5IHVuc3VzcGVuZGluZy5cbiAqXG4gKiBJZiB0aGUgcGFyZW50IGRvZXMgbm90IHJldHVybiBhIGNhbGxiYWNrIHRoZW4gdGhlIHJlc29sdmVkIHZub2RlXG4gKiBnZXRzIHVuc3VzcGVuZGVkIGltbWVkaWF0ZWx5IHdoZW4gaXQgcmVzb2x2ZXMuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4uL3NyYy9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZVxuICogQHJldHVybnMgeygodW5zdXNwZW5kOiAoKSA9PiB2b2lkKSA9PiB2b2lkKT99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXNwZW5kZWQodm5vZGUpIHtcblx0bGV0IGNvbXBvbmVudCA9IHZub2RlLl9wYXJlbnQuX2NvbXBvbmVudDtcblx0cmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQuX3N1c3BlbmRlZCAmJiBjb21wb25lbnQuX3N1c3BlbmRlZCh2bm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYXp5KGxvYWRlcikge1xuXHRsZXQgcHJvbTtcblx0bGV0IGNvbXBvbmVudDtcblx0bGV0IGVycm9yO1xuXG5cdGZ1bmN0aW9uIExhenkocHJvcHMpIHtcblx0XHRpZiAoIXByb20pIHtcblx0XHRcdHByb20gPSBsb2FkZXIoKTtcblx0XHRcdHByb20udGhlbihcblx0XHRcdFx0ZXhwb3J0cyA9PiB7XG5cdFx0XHRcdFx0Y29tcG9uZW50ID0gZXhwb3J0cy5kZWZhdWx0IHx8IGV4cG9ydHM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGUgPT4ge1xuXHRcdFx0XHRcdGVycm9yID0gZTtcblx0XHRcdFx0fVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblxuXHRcdGlmICghY29tcG9uZW50KSB7XG5cdFx0XHR0aHJvdyBwcm9tO1xuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuXHR9XG5cblx0TGF6eS5kaXNwbGF5TmFtZSA9ICdMYXp5Jztcblx0TGF6eS5fZm9yd2FyZGVkID0gdHJ1ZTtcblx0cmV0dXJuIExhenk7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIHRvQ2hpbGRBcnJheSB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyBzdXNwZW5kZWQgfSBmcm9tICcuL3N1c3BlbnNlLmpzJztcblxuLy8gSW5kZXhlcyB0byBsaW5rZWQgbGlzdCBub2RlcyAobm9kZXMgYXJlIHN0b3JlZCBhcyBhcnJheXMgdG8gc2F2ZSBieXRlcykuXG5jb25zdCBTVVNQRU5ERURfQ09VTlQgPSAwO1xuY29uc3QgUkVTT0xWRURfQ09VTlQgPSAxO1xuY29uc3QgTkVYVF9OT0RFID0gMjtcblxuLy8gSGF2aW5nIGN1c3RvbSBpbmhlcml0YW5jZSBpbnN0ZWFkIG9mIGEgY2xhc3MgaGVyZSBzYXZlcyBhIGxvdCBvZiBieXRlcy5cbmV4cG9ydCBmdW5jdGlvbiBTdXNwZW5zZUxpc3QoKSB7XG5cdHRoaXMuX25leHQgPSBudWxsO1xuXHR0aGlzLl9tYXAgPSBudWxsO1xufVxuXG4vLyBNYXJrIG9uZSBvZiBjaGlsZCdzIGVhcmxpZXIgc3VzcGVuc2lvbnMgYXMgcmVzb2x2ZWQuXG4vLyBTb21lIHBlbmRpbmcgY2FsbGJhY2tzIG1heSBiZWNvbWUgY2FsbGFibGUgZHVlIHRvIHRoaXNcbi8vIChlLmcuIHRoZSBsYXN0IHN1c3BlbmRlZCBkZXNjZW5kYW50IGdldHMgcmVzb2x2ZWQgd2hlblxuLy8gcmV2ZWFsT3JkZXIgPT09ICd0b2dldGhlcicpLiBQcm9jZXNzIHRob3NlIGNhbGxiYWNrcyBhcyB3ZWxsLlxuY29uc3QgcmVzb2x2ZSA9IChsaXN0LCBjaGlsZCwgbm9kZSkgPT4ge1xuXHRpZiAoKytub2RlW1JFU09MVkVEX0NPVU5UXSA9PT0gbm9kZVtTVVNQRU5ERURfQ09VTlRdKSB7XG5cdFx0Ly8gVGhlIG51bWJlciBhIGNoaWxkIChvciBhbnkgb2YgaXRzIGRlc2NlbmRhbnRzKSBoYXMgYmVlbiBzdXNwZW5kZWRcblx0XHQvLyBtYXRjaGVzIHRoZSBudW1iZXIgb2YgdGltZXMgaXQncyBiZWVuIHJlc29sdmVkLiBUaGVyZWZvcmUgd2Vcblx0XHQvLyBtYXJrIHRoZSBjaGlsZCBhcyBjb21wbGV0ZWx5IHJlc29sdmVkIGJ5IGRlbGV0aW5nIGl0IGZyb20gLl9tYXAuXG5cdFx0Ly8gVGhpcyBpcyB1c2VkIHRvIGZpZ3VyZSBvdXQgd2hlbiAqYWxsKiBjaGlsZHJlbiBoYXZlIGJlZW4gY29tcGxldGVseVxuXHRcdC8vIHJlc29sdmVkIHdoZW4gcmV2ZWFsT3JkZXIgaXMgJ3RvZ2V0aGVyJy5cblx0XHRsaXN0Ll9tYXAuZGVsZXRlKGNoaWxkKTtcblx0fVxuXG5cdC8vIElmIHJldmVhbE9yZGVyIGlzIGZhbHN5IHRoZW4gd2UgY2FuIGRvIGFuIGVhcmx5IGV4aXQsIGFzIHRoZVxuXHQvLyBjYWxsYmFja3Mgd29uJ3QgZ2V0IHF1ZXVlZCBpbiB0aGUgbm9kZSBhbnl3YXkuXG5cdC8vIElmIHJldmVhbE9yZGVyIGlzICd0b2dldGhlcicgdGhlbiBhbHNvIGRvIGFuIGVhcmx5IGV4aXRcblx0Ly8gaWYgYWxsIHN1c3BlbmRlZCBkZXNjZW5kYW50cyBoYXZlIG5vdCB5ZXQgYmVlbiByZXNvbHZlZC5cblx0aWYgKFxuXHRcdCFsaXN0LnByb3BzLnJldmVhbE9yZGVyIHx8XG5cdFx0KGxpc3QucHJvcHMucmV2ZWFsT3JkZXJbMF0gPT09ICd0JyAmJiBsaXN0Ll9tYXAuc2l6ZSlcblx0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gV2FsayB0aGUgY3VycmVudGx5IHN1c3BlbmRlZCBjaGlsZHJlbiBpbiBvcmRlciwgY2FsbGluZyB0aGVpclxuXHQvLyBzdG9yZWQgY2FsbGJhY2tzIG9uIHRoZSB3YXkuIFN0b3AgaWYgd2UgZW5jb3VudGVyIGEgY2hpbGQgdGhhdFxuXHQvLyBoYXMgbm90IGJlZW4gY29tcGxldGVseSByZXNvbHZlZCB5ZXQuXG5cdG5vZGUgPSBsaXN0Ll9uZXh0O1xuXHR3aGlsZSAobm9kZSkge1xuXHRcdHdoaWxlIChub2RlLmxlbmd0aCA+IDMpIHtcblx0XHRcdG5vZGUucG9wKCkoKTtcblx0XHR9XG5cdFx0aWYgKG5vZGVbUkVTT0xWRURfQ09VTlRdIDwgbm9kZVtTVVNQRU5ERURfQ09VTlRdKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0bGlzdC5fbmV4dCA9IG5vZGUgPSBub2RlW05FWFRfTk9ERV07XG5cdH1cbn07XG5cbi8vIFRoaW5ncyB3ZSBkbyBoZXJlIHRvIHNhdmUgc29tZSBieXRlcyBidXQgYXJlIG5vdCBwcm9wZXIgSlMgaW5oZXJpdGFuY2U6XG4vLyAtIGNhbGwgYG5ldyBDb21wb25lbnQoKWAgYXMgdGhlIHByb3RvdHlwZVxuLy8gLSBkbyBub3Qgc2V0IGBTdXNwZW5zZS5wcm90b3R5cGUuY29uc3RydWN0b3JgIHRvIGBTdXNwZW5zZWBcblN1c3BlbnNlTGlzdC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50KCk7XG5cblN1c3BlbnNlTGlzdC5wcm90b3R5cGUuX3N1c3BlbmRlZCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG5cdGNvbnN0IGxpc3QgPSB0aGlzO1xuXHRjb25zdCBkZWxlZ2F0ZWQgPSBzdXNwZW5kZWQobGlzdC5fdm5vZGUpO1xuXG5cdGxldCBub2RlID0gbGlzdC5fbWFwLmdldChjaGlsZCk7XG5cdG5vZGVbU1VTUEVOREVEX0NPVU5UXSsrO1xuXG5cdHJldHVybiB1bnN1c3BlbmQgPT4ge1xuXHRcdGNvbnN0IHdyYXBwZWRVbnN1c3BlbmQgPSAoKSA9PiB7XG5cdFx0XHRpZiAoIWxpc3QucHJvcHMucmV2ZWFsT3JkZXIpIHtcblx0XHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRoZSB1bmRlZmluZWQgKGZhbHN5KSByZXZlYWxPcmRlciwgYXMgdGhlcmVcblx0XHRcdFx0Ly8gaXMgbm8gbmVlZCB0byBjb29yZGluYXRlIGEgc3BlY2lmaWMgb3JkZXIgb3IgdW5zdXNwZW5kcy5cblx0XHRcdFx0dW5zdXNwZW5kKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub2RlLnB1c2godW5zdXNwZW5kKTtcblx0XHRcdFx0cmVzb2x2ZShsaXN0LCBjaGlsZCwgbm9kZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAoZGVsZWdhdGVkKSB7XG5cdFx0XHRkZWxlZ2F0ZWQod3JhcHBlZFVuc3VzcGVuZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdyYXBwZWRVbnN1c3BlbmQoKTtcblx0XHR9XG5cdH07XG59O1xuXG5TdXNwZW5zZUxpc3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdHRoaXMuX25leHQgPSBudWxsO1xuXHR0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG5cblx0Y29uc3QgY2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkocHJvcHMuY2hpbGRyZW4pO1xuXHRpZiAocHJvcHMucmV2ZWFsT3JkZXIgJiYgcHJvcHMucmV2ZWFsT3JkZXJbMF0gPT09ICdiJykge1xuXHRcdC8vIElmIG9yZGVyID09PSAnYmFja3dhcmRzJyAob3IsIHdlbGwsIGFueXRoaW5nIHN0YXJ0aW5nIHdpdGggYSAnYicpXG5cdFx0Ly8gdGhlbiBmbGlwIHRoZSBjaGlsZCBsaXN0IGFyb3VuZCBzbyB0aGF0IHRoZSBsYXN0IGNoaWxkIHdpbGwgYmVcblx0XHQvLyB0aGUgZmlyc3QgaW4gdGhlIGxpbmtlZCBsaXN0LlxuXHRcdGNoaWxkcmVuLnJldmVyc2UoKTtcblx0fVxuXHQvLyBCdWlsZCB0aGUgbGlua2VkIGxpc3QuIEl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gaW4gcmV2ZXJzZSBvcmRlclxuXHQvLyBzbyB0aGF0IGBfbmV4dGAgcG9pbnRzIHRvIHRoZSBmaXJzdCBsaW5rZWQgbGlzdCBub2RlIHRvIGJlIHJlc29sdmVkLlxuXHRmb3IgKGxldCBpID0gY2hpbGRyZW4ubGVuZ3RoOyBpLS07ICkge1xuXHRcdC8vIENyZWF0ZSBhIG5ldyBsaW5rZWQgbGlzdCBub2RlIGFzIGFuIGFycmF5IG9mIGZvcm06XG5cdFx0Ly8gXHRbc3VzcGVuZGVkX2NvdW50LCByZXNvbHZlZF9jb3VudCwgbmV4dF9ub2RlXVxuXHRcdC8vIHdoZXJlIHN1c3BlbmRlZF9jb3VudCBhbmQgcmVzb2x2ZWRfY291bnQgYXJlIG51bWVyaWMgY291bnRlcnMgZm9yXG5cdFx0Ly8ga2VlcGluZyB0cmFjayBob3cgbWFueSB0aW1lcyBhIG5vZGUgaGFzIGJlZW4gc3VzcGVuZGVkIGFuZCByZXNvbHZlZC5cblx0XHQvL1xuXHRcdC8vIE5vdGUgdGhhdCBzdXNwZW5kZWRfY291bnQgc3RhcnRzIGZyb20gMSBpbnN0ZWFkIG9mIDAsIHNvIHdlIGNhbiBibG9ja1xuXHRcdC8vIHByb2Nlc3NpbmcgY2FsbGJhY2tzIHVudGlsIGNvbXBvbmVudERpZE1vdW50IGhhcyBiZWVuIGNhbGxlZC4gSW4gYSBzZW5zZVxuXHRcdC8vIG5vZGUgaXMgc3VzcGVuZGVkIGF0IGxlYXN0IHVudGlsIGNvbXBvbmVudERpZE1vdW50IGdldHMgY2FsbGVkIVxuXHRcdC8vXG5cdFx0Ly8gUGVuZGluZyBjYWxsYmFja3MgYXJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIG5vZGU6XG5cdFx0Ly8gXHRbc3VzcGVuZGVkX2NvdW50LCByZXNvbHZlZF9jb3VudCwgbmV4dF9ub2RlLCBjYWxsYmFja18wLCBjYWxsYmFja18xLCAuLi5dXG5cdFx0dGhpcy5fbWFwLnNldChjaGlsZHJlbltpXSwgKHRoaXMuX25leHQgPSBbMSwgMCwgdGhpcy5fbmV4dF0pKTtcblx0fVxuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59O1xuXG5TdXNwZW5zZUxpc3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IFN1c3BlbnNlTGlzdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcblx0Ly8gSXRlcmF0ZSB0aHJvdWdoIGFsbCBjaGlsZHJlbiBhZnRlciBtb3VudGluZyBmb3IgdHdvIHJlYXNvbnM6XG5cdC8vIDEuIEFzIGVhY2ggbm9kZVtTVVNQRU5ERURfQ09VTlRdIHN0YXJ0cyBmcm9tIDEsIHRoaXMgaXRlcmF0aW9uIGluY3JlYXNlc1xuXHQvLyAgICBlYWNoIG5vZGVbUkVMRUFTRURfQ09VTlRdIGJ5IDEsIHRoZXJlZm9yZSBiYWxhbmNpbmcgdGhlIGNvdW50ZXJzLlxuXHQvLyAgICBUaGUgbm9kZXMgY2FuIG5vdyBiZSBjb21wbGV0ZWx5IGNvbnN1bWVkIGZyb20gdGhlIGxpbmtlZCBsaXN0LlxuXHQvLyAyLiBIYW5kbGUgbm9kZXMgdGhhdCBtaWdodCBoYXZlIGdvdHRlbiByZXNvbHZlZCBiZXR3ZWVuIHJlbmRlciBhbmRcblx0Ly8gICAgY29tcG9uZW50RGlkTW91bnQuXG5cdGNvbnN0IGxpc3QgPSB0aGlzO1xuXHRsaXN0Ll9tYXAuZm9yRWFjaCgobm9kZSwgY2hpbGQpID0+IHtcblx0XHRyZXNvbHZlKGxpc3QsIGNoaWxkLCBub2RlKTtcblx0fSk7XG59O1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgaHlkcmF0ZSwgcmVuZGVyLCBfdW5tb3VudCB9IGZyb20gJ3ByZWFjdCc7XG5cbmNsYXNzIENvbnRleHRQcm92aWRlciB7XG5cdGdldENoaWxkQ29udGV4dCgpIHtcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5jb250ZXh0O1xuXHR9XG5cdHJlbmRlcihwcm9wcykge1xuXHRcdHJldHVybiBwcm9wcy5jaGlsZHJlbjtcblx0fVxufVxuXG4vKipcbiAqIFBvcnRhbCBjb21wb25lbnRcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbCB8IHVuZGVmaW5lZH0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gUG9ydGFsKHByb3BzKSB7XG5cdGxldCBfdGhpcyA9IHRoaXM7XG5cdGxldCBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXI7XG5cdGxldCB3cmFwID0gY3JlYXRlRWxlbWVudChcblx0XHRDb250ZXh0UHJvdmlkZXIsXG5cdFx0eyBjb250ZXh0OiBfdGhpcy5jb250ZXh0IH0sXG5cdFx0cHJvcHMudm5vZGVcblx0KTtcblxuXHQvLyBXaGVuIHdlIGNoYW5nZSBjb250YWluZXIgd2Ugc2hvdWxkIGNsZWFyIG91ciBvbGQgY29udGFpbmVyIGFuZFxuXHQvLyBpbmRpY2F0ZSBhIG5ldyBtb3VudC5cblx0aWYgKF90aGlzLl9jb250YWluZXIgJiYgX3RoaXMuX2NvbnRhaW5lciAhPT0gY29udGFpbmVyKSB7XG5cdFx0aWYgKF90aGlzLl90ZW1wLnBhcmVudE5vZGUpIF90aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQoX3RoaXMuX3RlbXApO1xuXHRcdF91bm1vdW50KF90aGlzLl93cmFwKTtcblx0XHRfdGhpcy5faGFzTW91bnRlZCA9IGZhbHNlO1xuXHR9XG5cblx0Ly8gV2hlbiBwcm9wcy52bm9kZSBpcyB1bmRlZmluZWQvZmFsc2UvbnVsbCB3ZSBhcmUgZGVhbGluZyB3aXRoIHNvbWUga2luZCBvZlxuXHQvLyBjb25kaXRpb25hbCB2bm9kZS4gVGhpcyBzaG91bGQgbm90IHRyaWdnZXIgYSByZW5kZXIuXG5cdGlmIChwcm9wcy52bm9kZSkge1xuXHRcdGlmICghX3RoaXMuX2hhc01vdW50ZWQpIHtcblx0XHRcdC8vIENyZWF0ZSBhIHBsYWNlaG9sZGVyIHRoYXQgd2UgY2FuIHVzZSB0byBpbnNlcnQgaW50by5cblx0XHRcdF90aGlzLl90ZW1wID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuXHRcdFx0Ly8gSHlkcmF0ZSBleGlzdGluZyBub2RlcyB0byBrZWVwIHRoZSBkb20gaW50YWN0LCB3aGVuIHJlbmRlcmluZ1xuXHRcdFx0Ly8gd3JhcCBpbnRvIHRoZSBjb250YWluZXIuXG5cdFx0XHRoeWRyYXRlKCcnLCBjb250YWluZXIpO1xuXHRcdFx0Ly8gQXBwZW5kIHRvIHRoZSBjb250YWluZXIgKHRoaXMgbWF0Y2hlcyBSZWFjdCdzIGJlaGF2aW9yKVxuXHRcdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKF90aGlzLl90ZW1wKTtcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBtb3VudGVkIGFuZCBzaG91bGQgc2V0IG91ciBjb250YWluZXIuXG5cdFx0XHRfdGhpcy5faGFzTW91bnRlZCA9IHRydWU7XG5cdFx0XHRfdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuXHRcdFx0Ly8gUmVuZGVyIG91ciB3cmFwcGluZyBlbGVtZW50IGludG8gdGVtcC5cblx0XHRcdHJlbmRlcih3cmFwLCBjb250YWluZXIsIF90aGlzLl90ZW1wKTtcblx0XHRcdF90aGlzLl9jaGlsZHJlbiA9IHRoaXMuX3RlbXAuX2NoaWxkcmVuO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBXaGVuIHdlIGhhdmUgbW91bnRlZCBhbmQgdGhlIHZub2RlIGlzIHByZXNlbnQgaXQgbWVhbnMgdGhlXG5cdFx0XHQvLyBwcm9wcyBoYXZlIGNoYW5nZWQgb3IgYSBwYXJlbnQgaXMgdHJpZ2dlcmluZyBhIHJlcmVuZGVyLlxuXHRcdFx0Ly8gVGhpcyBpbXBsaWVzIHdlIG9ubHkgbmVlZCB0byBjYWxsIHJlbmRlci4gQnV0IHdlIG5lZWQgdG8ga2VlcFxuXHRcdFx0Ly8gdGhlIG9sZCB0cmVlIGFyb3VuZCwgb3RoZXJ3aXNlIHdpbGwgdHJlYXQgdGhlIHZub2RlcyBhcyBuZXcgYW5kXG5cdFx0XHQvLyB3aWxsIHdyb25nbHkgY2FsbCBgY29tcG9uZW50RGlkTW91bnRgIG9uIHRoZW1cblx0XHRcdGNvbnRhaW5lci5fY2hpbGRyZW4gPSBfdGhpcy5fY2hpbGRyZW47XG5cdFx0XHRyZW5kZXIod3JhcCwgY29udGFpbmVyKTtcblx0XHRcdF90aGlzLl9jaGlsZHJlbiA9IGNvbnRhaW5lci5fY2hpbGRyZW47XG5cdFx0fVxuXHR9XG5cdC8vIFdoZW4gd2UgY29tZSBmcm9tIGEgY29uZGl0aW9uYWwgcmVuZGVyLCBvbiBhIG1vdW50ZWRcblx0Ly8gcG9ydGFsIHdlIHNob3VsZCBjbGVhciB0aGUgRE9NLlxuXHRlbHNlIGlmIChfdGhpcy5faGFzTW91bnRlZCkge1xuXHRcdGlmIChfdGhpcy5fdGVtcC5wYXJlbnROb2RlKSBfdGhpcy5fY29udGFpbmVyLnJlbW92ZUNoaWxkKF90aGlzLl90ZW1wKTtcblx0XHRfdW5tb3VudChfdGhpcy5fd3JhcCk7XG5cdH1cblx0Ly8gU2V0IHRoZSB3cmFwcGluZyBlbGVtZW50IGZvciBmdXR1cmUgdW5tb3VudGluZy5cblx0X3RoaXMuX3dyYXAgPSB3cmFwO1xuXG5cdF90aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdGlmIChfdGhpcy5fdGVtcC5wYXJlbnROb2RlKSBfdGhpcy5fY29udGFpbmVyLnJlbW92ZUNoaWxkKF90aGlzLl90ZW1wKTtcblx0XHRfdW5tb3VudChfdGhpcy5fd3JhcCk7XG5cdH07XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYFBvcnRhbGAgdG8gY29udGludWUgcmVuZGVyaW5nIHRoZSB2bm9kZSB0cmVlIGF0IGEgZGlmZmVyZW50IERPTSBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdm5vZGUgdG8gcmVuZGVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgRE9NIG5vZGUgdG8gY29udGludWUgcmVuZGVyaW5nIGluIHRvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9ydGFsKHZub2RlLCBjb250YWluZXIpIHtcblx0cmV0dXJuIGNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7IHZub2RlLCBjb250YWluZXIgfSk7XG59XG4iLCIvKipcbiAqIE5vcm1hbGl6ZSBldmVudCBoYW5kbGVycyBsaWtlIHJlYWN0IGRvZXMuIE1vc3QgZmFtb3VzbHkgaXQgdXNlcyBgb25DaGFuZ2VgIGZvciBhbnkgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlIFRoZSB2bm9kZSB0byBub3JtYWxpemUgZXZlbnRzIG9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUV2ZW50Tm9ybWFsaXphdGlvbih7IHR5cGUsIHByb3BzIH0pIHtcblx0aWYgKCFwcm9wcyB8fCB0eXBlb2YgdHlwZSAhPSAnc3RyaW5nJykgcmV0dXJuO1xuXHRsZXQgbmV3UHJvcHMgPSB7fTtcblxuXHRmb3IgKGxldCBpIGluIHByb3BzKSB7XG5cdFx0aWYgKC9eb24oQW5pfFRyYXxUb3UpLy50ZXN0KGkpKSB7XG5cdFx0XHRwcm9wc1tpLnRvTG93ZXJDYXNlKCldID0gcHJvcHNbaV07XG5cdFx0XHRkZWxldGUgcHJvcHNbaV07XG5cdFx0fVxuXHRcdG5ld1Byb3BzW2kudG9Mb3dlckNhc2UoKV0gPSBpO1xuXHR9XG5cdGlmIChuZXdQcm9wcy5vbmRvdWJsZWNsaWNrKSB7XG5cdFx0cHJvcHMub25kYmxjbGljayA9IHByb3BzW25ld1Byb3BzLm9uZG91YmxlY2xpY2tdO1xuXHRcdGRlbGV0ZSBwcm9wc1tuZXdQcm9wcy5vbmRvdWJsZWNsaWNrXTtcblx0fVxuXHRpZiAobmV3UHJvcHMub25iZWZvcmVpbnB1dCkge1xuXHRcdHByb3BzLm9uYmVmb3JlaW5wdXQgPSBwcm9wc1tuZXdQcm9wcy5vbmJlZm9yZWlucHV0XTtcblx0XHRkZWxldGUgcHJvcHNbbmV3UHJvcHMub25iZWZvcmVpbnB1dF07XG5cdH1cblx0Ly8gZm9yICp0ZXh0dWFsIGlucHV0cyogKGluY2wgdGV4dGFyZWEpLCBub3JtYWxpemUgYG9uQ2hhbmdlYCAtPiBgb25JbnB1dGA6XG5cdGlmIChcblx0XHRuZXdQcm9wcy5vbmNoYW5nZSAmJlxuXHRcdCh0eXBlID09PSAndGV4dGFyZWEnIHx8XG5cdFx0XHQodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmICEvXmZpbHxjaGV8cmEvaS50ZXN0KHByb3BzLnR5cGUpKSlcblx0KSB7XG5cdFx0bGV0IG5vcm1hbGl6ZWQgPSBuZXdQcm9wcy5vbmlucHV0IHx8ICdvbmlucHV0Jztcblx0XHRpZiAoIXByb3BzW25vcm1hbGl6ZWRdKSB7XG5cdFx0XHRwcm9wc1tub3JtYWxpemVkXSA9IHByb3BzW25ld1Byb3BzLm9uY2hhbmdlXTtcblx0XHRcdGRlbGV0ZSBwcm9wc1tuZXdQcm9wcy5vbmNoYW5nZV07XG5cdFx0fVxuXHR9XG59XG4iLCIhZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcmVhY3RcIikpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXCJwcmVhY3RcIl0sdCk7ZWxzZXt2YXIgbj10KFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP3JlcXVpcmUoXCJwcmVhY3RcIik6ZS5wcmVhY3QpO2Zvcih2YXIgbyBpbiBuKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW29dPW5bb119fSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG8pe2lmKG5bb10pcmV0dXJuIG5bb10uZXhwb3J0czt2YXIgcj1uW29dPXtleHBvcnRzOnt9LGlkOm8sbG9hZGVkOiExfTtyZXR1cm4gZVtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyx0KSxyLmxvYWRlZD0hMCxyLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyhcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOmEodCkpKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfWZ1bmN0aW9uIHUoZSx0LG4pe3ZhciB1PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHUoKXtvKHRoaXMsdSk7dmFyIHQ9UmVmbGVjdC5jb25zdHJ1Y3QoSFRNTEVsZW1lbnQsW10sdSk7cmV0dXJuIHQuX3Zkb21Db21wb25lbnQ9ZSx0fXJldHVybiByKHUsdCkscyh1LFt7a2V5OlwiY29ubmVjdGVkQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe2kuYXBwbHkodGhpcyl9fSx7a2V5OlwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsdmFsdWU6ZnVuY3Rpb24oKXtpLmFwcGx5KHRoaXMpfX0se2tleTpcImRldGFjaGVkQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe2YuYXBwbHkodGhpcyl9fV0sW3trZXk6XCJvYnNlcnZlZEF0dHJpYnV0ZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn19XSksdX0oSFRNTEVsZW1lbnQpO3JldHVybiB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHR8fGUuZGlzcGxheU5hbWV8fGUubmFtZSx1KX1mdW5jdGlvbiBpKCl7dGhpcy5fcm9vdD0oMCxsLnJlbmRlcikoYyh0aGlzLHRoaXMuX3Zkb21Db21wb25lbnQpLHRoaXMsdGhpcy5fcm9vdCl9ZnVuY3Rpb24gZigpeygwLGwucmVuZGVyKSgoMCxsLmgpKHApLHRoaXMsdGhpcy5fcm9vdCl9ZnVuY3Rpb24gYyhlLHQpe2lmKDM9PT1lLm5vZGVUeXBlKXJldHVybiBlLm5vZGVWYWx1ZTtpZigxIT09ZS5ub2RlVHlwZSlyZXR1cm4gbnVsbDt2YXIgbj1bXSxvPXt9LHI9MCx1PWUuYXR0cmlidXRlcyxpPWUuY2hpbGROb2Rlcztmb3Iocj11Lmxlbmd0aDtyLS07KW9bdVtyXS5uYW1lXT11W3JdLnZhbHVlO2ZvcihyPWkubGVuZ3RoO3ItLTspbltyXT1jKGlbcl0pO3JldHVybigwLGwuaCkodHx8ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLG8sbil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07dFtcImRlZmF1bHRcIl09dTt2YXIgbD1uKDEpLHA9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfV0pfSk7IiwiXG5jb25zdCBjb2xvcnMgPSB7XG4gICREMTA6IFwiIzE2MkQzRFwiLCAvLyBNYWluIGlucHV0IHRleHQsIHRpdGxlc1xuICAkRDIwOiBcIiMzMjUzNkFcIiwgLy8gVGl0bGVzLCB0ZXh0c1xuICAkRDMwOiBcIiM1NzcwODNcIiwgLy8gVGV4dHNcbiAgJEQ0MDogXCIjN0E5MkE1XCIsIC8vIERpdmlkZXJzLCB0ZXh0cywgUGxhY2Vob2xkZXJcbiAgJEQ1MDogXCIjQjZDMUNEXCIsIC8vIERpdmlkZXJzLCB0ZXh0c1xuICAkRDU1OiBcIiNDQkQzRENcIiwgLy8gRGlzYWJsZWQgYnV0dG9uIC0gbmV3IHZlcnNpb24gLSBuYW1pbmcgbm90IGZpbmFsXG4gICRENjA6IFwiI0RGRTVFQlwiLCAvLyBEaXZpZGVyc1xuICAkRDcwOiBcIiNGMEY0RjdcIiwgLy8gUGFnZSBiYWNrZ3JvdW5kLCBkaXZpZGVyc1xuICAkRDgwOiBcIiNGRkZGRkZcIiwgLy8gQ29udGVudCBib3ggYmFja2dyb3VuZFxuXG4gICRCMDA6IFwiIzJCODFDQlwiLCAvLyBCdXR0b25zXG4gICRCMDU6IFwiIzMwOERERFwiLCAvLyBDVEFcbiAgJEIxMDogXCIjMzg5OUVDXCIsIC8vIE1haW4gYWN0aW9uIGNvbG9yLCBhY3RpdmUsIGJ1dHRvbnNcbiAgJEIyMDogXCIjNEVCN0Y1XCIsIC8vIEhvdmVyIGZvciBlbGVtZW50cyB3aXRoIEIxMCwgYnV0dG9uc1xuICAkQjI1OiBcIiNBMUQ3RkJcIixcbiAgJEIyNzogXCIjQjNFMEZCXCIsXG4gICRCMzA6IFwiI0MxRTRGRVwiLCAvLyBOb3RpZmljYXRpb25zXG4gICRCNDA6IFwiI0RBRUZGRVwiLCAvLyBEaXZpZGVycywgdGFibGUgc2VsZWN0ZWQsIHRhYmxlIGhlYWRlcnNcbiAgJEI1MDogXCIjRUFGN0ZGXCIsIC8vIERpdmlkZXJzXG4gICRCNjA6IFwiI0Y0RkFGRVwiLCAvLyBUYWJsZSBob3ZlclxufTtcblxuY29uc3Qgc2lkZWJhciA9IHtcbiAgY29sb3JzOiB7XG4gICAgJGJnOiBcIiMyMzI2M2VcIixcbiAgICAkZGl2aWRlcjogXCIjNDM0NTY3XCIsXG4gICAgJGJnSG92ZXI6IFwiIzJlMzI0OVwiLFxuICAgICRiZ0FjdGl2ZTogXCIjMzkzZjU5XCIsXG4gIH0sXG59XG5jb25zdCB0aGVtZSA9IHtcbiAgY29sb3JzLFxuICBzaWRlYmFyLFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCB0aGVtZTtcbiIsImltcG9ydCB7XG4gaCwgY3JlYXRlQ29udGV4dCwgQ29tcG9uZW50Q2hpbGRyZW4sIEZ1bmN0aW9uQ29tcG9uZW50LFxufSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmLCB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcbmltcG9ydCB7IHN0eWxlZCwgc2V0dXAgfSBmcm9tIFwiQG5rc2FyYWYvZ29vYmVyXCI7XG5pbXBvcnQgdGhlbWUgZnJvbSBcIi4vdXRpbHMvZ2xvYmFsU3R5bGVzXCI7XG5cbmNvbnN0IFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodGhlbWUpO1xuY29uc3QgdXNlVGhlbWUgPSAoKSA9PiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5zZXR1cChoLCBmb3J3YXJkUmVmLCB1c2VUaGVtZSk7XG5cblxuY29uc3QgQXBwOiBGdW5jdGlvbkNvbXBvbmVudCA9ICh7IGNoaWxkcmVuIH0pID0+IDxTdHlsZWRCYXNlPntjaGlsZHJlbn08L1N0eWxlZEJhc2U+O1xuXG5cbmNvbnN0IFN0eWxlZEJhc2UgPSBzdHlsZWQ8eyBjaGlsZHJlbjogQ29tcG9uZW50Q2hpbGRyZW4gfT4oXCJkaXZcIilgXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiXG5jb25zdCB1c2VDdXN0b21FdmVudCA9ICh7IHJlZiwgZXZlbnROYW1lLCBkYXRhIH0pID0+IHtcbiAgICBjb25zdCBjdXN0b21FdmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcbiAgICAgICAgZGV0YWlsOiBkYXRhLFxuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZGlzcGF0Y2hFdmVudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHJlZi5jdXJyZW50KSByZWYuY3VycmVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnRcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlQ3VzdG9tRXZlbnQ7XG4iLCJpbXBvcnQgeyBoLCBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIkBua3NhcmFmL2dvb2JlclwiXG5pbXBvcnQgcmVnaXN0ZXIgZnJvbSAncHJlYWN0LWN1c3RvbS1lbGVtZW50JztcbmltcG9ydCBBcHAgZnJvbSAnLi4vLi4vQXBwJztcbmltcG9ydCB1c2VDdXN0b21FdmVudCBmcm9tICcuLi8uLi91dGlscy91c2VDdXN0b21FdmVudCc7XG5cblxudHlwZSBUYWIgPSB7XG4gIGxhYmVsOiBzdHJpbmcsXG4gIGlkPzogc3RyaW5nXG59O1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgZGF0YTogc3RyaW5nLFxuICBhY3RpdmV0YWI6IFN0cmluZ1xufVxuXG5jb25zdCBUYWIgPSAoeyBpdGVtLCBpc0FjdGl2ZSwgY2xpY2tIYW5kbGVyIH0pID0+IChcbiAgPFN0eWxlZExpIGlzQWN0aXZlPXtpc0FjdGl2ZX0+XG4gICAgPGJ1dHRvblxuICAgICAgb25DbGljaz17KCkgPT4gY2xpY2tIYW5kbGVyKGl0ZW0pfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgPlxuICAgICAge2l0ZW0ubGFiZWx9XG4gICAgPC9idXR0b24+XG4gIDwvU3R5bGVkTGk+XG4pO1xuXG5cbmNvbnN0IFRhYnM6IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7IGRhdGEsIGFjdGl2ZXRhYiB9KSA9PiB7XG4gIGNvbnN0IFtkYXRhU3RhdGUsIHNldERhdGFdID0gdXNlU3RhdGU8VGFiW10gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlXSA9IHVzZVN0YXRlPGFueT4oe30pO1xuXG4gIGNvbnN0IGNvbXBvbmVudFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIHNldERhdGEocGFyc2VkRGF0YS5tYXAoKHRhYikgPT4gKHsgbGFiZWw6IHRhYiwgaWQ6IHRhYi50b0xvd2VyQ2FzZSgpIH0pKSk7XG4gICAgfVxuICB9LCBbZGF0YV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGFjdGl2ZXRhYiAmJiBkYXRhU3RhdGUpIHtcbiAgICAgIHNldEFjdGl2ZShkYXRhU3RhdGUuZmlsdGVyKCh0YWIpID0+IHRhYi5pZCA9PT0gYWN0aXZldGFiLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjb25zdCBmbGF0dGVuID0gYWNjLmNvbmNhdChpdGVtKTtcbiAgICAgICAgICByZXR1cm4gZmxhdHRlbjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgfSwgW2RhdGFTdGF0ZV0pO1xuXG4gIGNvbnN0IGRpc3BhdGNoRXZlbnQgPSB1c2VDdXN0b21FdmVudCh7XG4gICAgcmVmOiBjb21wb25lbnRSZWYsXG4gICAgZGF0YTogYWN0aXZlLFxuICAgIGV2ZW50TmFtZTogJ3RhYkl0ZW1DbGlja2VkJyxcbiAgfSk7XG5cbiAgY29uc3QgY2xpY2tIYW5kbGVyID0gKGl0ZW0pID0+IHtcbiAgICBzZXRBY3RpdmUoaXRlbSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaEV2ZW50KClcbiAgfSwgW2FjdGl2ZV0pO1xuXG4gIGlmICghZGF0YVN0YXRlKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIChcbiAgICA8QXBwPlxuICAgICAgPGRpdiByZWY9e2NvbXBvbmVudFJlZn0+XG4gICAgICAgIDxTdHlsZWRVbD5cbiAgICAgICAgICB7ZGF0YVN0YXRlLm1hcCgodGFiKSA9PiAoXG4gICAgICAgICAgICA8VGFiXG4gICAgICAgICAgICAgIGtleT17dGFiLmxhYmVsfVxuICAgICAgICAgICAgICBpdGVtPXt0YWJ9XG4gICAgICAgICAgICAgIGNsaWNrSGFuZGxlcj17Y2xpY2tIYW5kbGVyfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17YWN0aXZlLmlkID09PSB0YWIuaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgICAgPC9TdHlsZWRVbD5cbiAgICAgIDwvZGl2PlxuICAgIDwvQXBwPlxuICApO1xufTtcblxuY29uc3QgU3R5bGVkVWw6IGFueSA9IHN0eWxlZCgndWwnKWBcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBoZWlnaHQ6IDYwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZm9udC1mYW1pbHk6ICRGb250Um9tYW47XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5gO1xuXG5jb25zdCBTdHlsZWRMaTogYW55ID0gc3R5bGVkPHsgaXNBY3RpdmU6IGJvb2xlYW4gfT4oJ2xpJylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIG1hcmdpbjogMCAxOHB4IDAgMDtcblxuICAmOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbjogMDtcbiAgfVxuXG4gICYgYnV0dG9uIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgcGFkZGluZzogMDtcbiAgICBjb2xvcjogJEIxMDtcbiAgICBjb2xvcjogJHsocHJvcHMpID0+IChwcm9wcy5pc0FjdGl2ZSA/IHByb3BzLnRoZW1lLmNvbG9ycy4kQjEwIDogcHJvcHMudGhlbWUuY29sb3JzLiREMTApfTtcbiAgICBib3gtc2hhZG93OiAkeyhwcm9wcykgPT4gKHByb3BzLmlzQWN0aXZlXG4gICAgICAgID8gYGluc2V0IDAgLTJweCAwIDAgJHtwcm9wcy50aGVtZS5jb2xvcnMuJEIxMH1gXG4gICAgICAgIDogXCJpbnNldCAwIDBweCAwIDAgYmx1ZVwiKX07XG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogJHsocHJvcHMpID0+IHByb3BzLnRoZW1lLmNvbG9ycy4kQjEwfTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gIH1cbmA7XG5cbnJlZ2lzdGVyKFRhYnMsICd4LXRhYnMnLCBbJ2RhdGEnLCAnYWN0aXZldGFiJ10pO1xuXG5leHBvcnQgZGVmYXVsdCBUYWJzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
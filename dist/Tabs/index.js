!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=30)}({0:function(n,e,t){"use strict";t.r(e),t.d(e,"render",(function(){return B})),t.d(e,"hydrate",(function(){return T})),t.d(e,"createElement",(function(){return h})),t.d(e,"h",(function(){return h})),t.d(e,"Fragment",(function(){return y})),t.d(e,"createRef",(function(){return m})),t.d(e,"isValidElement",(function(){return o})),t.d(e,"Component",(function(){return b})),t.d(e,"cloneElement",(function(){return H})),t.d(e,"createContext",(function(){return L})),t.d(e,"toChildArray",(function(){return E})),t.d(e,"_unmount",(function(){return A})),t.d(e,"options",(function(){return r}));var r,o,u,i,l,c,f,_={},a=[],s=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function p(n,e){for(var t in e)n[t]=e[t];return n}function d(n){var e=n.parentNode;e&&e.removeChild(n)}function h(n,e,t){var r,o=arguments,u={};for(r in e)"key"!==r&&"ref"!==r&&(u[r]=e[r]);if(arguments.length>3)for(t=[t],r=3;r<arguments.length;r++)t.push(o[r]);if(null!=t&&(u.children=t),"function"==typeof n&&null!=n.defaultProps)for(r in n.defaultProps)void 0===u[r]&&(u[r]=n.defaultProps[r]);return v(n,u,e&&e.key,e&&e.ref)}function v(n,e,t,o){var u={type:n,props:e,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:null,__c:null,constructor:void 0};return r.vnode&&r.vnode(u),u}function m(){return{}}function y(n){return n.children}function b(n,e){this.props=n,this.context=e}function g(n,e){if(null==e)return n.__?g(n.__,n.__.__k.indexOf(n)+1):null;for(var t;e<n.__k.length;e++)if(null!=(t=n.__k[e])&&null!=t.__e)return t.__e;return"function"==typeof n.type?g(n):null}function k(n){var e,t;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,e=0;e<n.__k.length;e++)if(null!=(t=n.__k[e])&&null!=t.__e){n.__e=n.__c.base=t.__e;break}return k(n)}}function x(n){(!n.__d&&(n.__d=!0)&&1===u.push(n)||l!==r.debounceRendering)&&((l=r.debounceRendering)||i)(C)}function C(){var n,e,t,r,o,i,l;for(u.sort((function(n,e){return e.__v.__b-n.__v.__b}));n=u.pop();)n.__d&&(t=void 0,r=void 0,i=(o=(e=n).__v).__e,(l=e.__P)&&(t=[],r=O(l,o,p({},o),e.__n,void 0!==l.ownerSVGElement,null,t,null==i?g(o):i),N(t,o),r!=i&&k(o)))}function w(n,e,t,r,o,u,i,l,c){var f,s,p,h,v,m,y,b=t&&t.__k||a,k=b.length;if(l==_&&(l=null!=u?u[0]:k?g(t,0):null),f=0,e.__k=E(e.__k,(function(t){if(null!=t){if(t.__=e,t.__b=e.__b+1,null===(p=b[f])||p&&t.key==p.key&&t.type===p.type)b[f]=void 0;else for(s=0;s<k;s++){if((p=b[s])&&t.key==p.key&&t.type===p.type){b[s]=void 0;break}p=null}if(h=O(n,t,p=p||_,r,o,u,i,l,c),(s=t.ref)&&p.ref!=s&&(y||(y=[]),p.ref&&y.push(p.ref,null,t),y.push(s,t.__c||h,t)),null!=h){if(null==m&&(m=h),null!=t.__d)h=t.__d,t.__d=null;else if(u==p||h!=l||null==h.parentNode){n:if(null==l||l.parentNode!==n)n.appendChild(h);else{for(v=l,s=0;(v=v.nextSibling)&&s<k;s+=2)if(v==h)break n;n.insertBefore(h,l)}"option"==e.type&&(n.value="")}l=h.nextSibling,"function"==typeof e.type&&(e.__d=h)}}return f++,t})),e.__e=m,null!=u&&"function"!=typeof e.type)for(f=u.length;f--;)null!=u[f]&&d(u[f]);for(f=k;f--;)null!=b[f]&&A(b[f],b[f]);if(y)for(f=0;f<y.length;f++)$(y[f],y[++f],y[++f])}function E(n,e,t){if(null==t&&(t=[]),null==n||"boolean"==typeof n)e&&t.push(e(null));else if(Array.isArray(n))for(var r=0;r<n.length;r++)E(n[r],e,t);else t.push(e?e("string"==typeof n||"number"==typeof n?v(null,n,null,null):null!=n.__e||null!=n.__c?v(n.type,n.props,n.key,null):n):n);return t}function D(n,e,t){"-"===e[0]?n.setProperty(e,t):n[e]="number"==typeof t&&!1===s.test(e)?t+"px":null==t?"":t}function S(n,e,t,r,o){var u,i,l,c,f;if(o?"className"===e&&(e="class"):"class"===e&&(e="className"),"key"===e||"children"===e);else if("style"===e)if(u=n.style,"string"==typeof t)u.cssText=t;else{if("string"==typeof r&&(u.cssText="",r=null),r)for(i in r)t&&i in t||D(u,i,"");if(t)for(l in t)r&&t[l]===r[l]||D(u,l,t[l])}else"o"===e[0]&&"n"===e[1]?(c=e!==(e=e.replace(/Capture$/,"")),f=e.toLowerCase(),e=(f in n?f:e).slice(2),t?(r||n.addEventListener(e,F,c),(n.l||(n.l={}))[e]=t):n.removeEventListener(e,F,c)):"list"!==e&&"tagName"!==e&&"form"!==e&&"type"!==e&&!o&&e in n?n[e]=null==t?"":t:"function"!=typeof t&&"dangerouslySetInnerHTML"!==e&&(e!==(e=e.replace(/^xlink:?/,""))?null==t||!1===t?n.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):n.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),t):null==t||!1===t?n.removeAttribute(e):n.setAttribute(e,t))}function F(n){this.l[n.type](r.event?r.event(n):n)}function O(n,e,t,o,u,i,l,c,f){var _,a,s,d,h,v,m,g,k,x,C=e.type;if(void 0!==e.constructor)return null;(_=r.__b)&&_(e);try{n:if("function"==typeof C){if(g=e.props,k=(_=C.contextType)&&o[_.__c],x=_?k?k.props.value:_.__:o,t.__c?m=(a=e.__c=t.__c).__=a.__E:("prototype"in C&&C.prototype.render?e.__c=a=new C(g,x):(e.__c=a=new b(g,x),a.constructor=C,a.render=P),k&&k.sub(a),a.props=g,a.state||(a.state={}),a.context=x,a.__n=o,s=a.__d=!0,a.__h=[]),null==a.__s&&(a.__s=a.state),null!=C.getDerivedStateFromProps&&(a.__s==a.state&&(a.__s=p({},a.__s)),p(a.__s,C.getDerivedStateFromProps(g,a.__s))),d=a.props,h=a.state,s)null==C.getDerivedStateFromProps&&null!=a.componentWillMount&&a.componentWillMount(),null!=a.componentDidMount&&a.__h.push(a.componentDidMount);else{if(null==C.getDerivedStateFromProps&&g!==d&&null!=a.componentWillReceiveProps&&a.componentWillReceiveProps(g,x),!a.__e&&null!=a.shouldComponentUpdate&&!1===a.shouldComponentUpdate(g,a.__s,x)){for(a.props=g,a.state=a.__s,a.__d=!1,a.__v=e,e.__e=t.__e,e.__k=t.__k,a.__h.length&&l.push(a),_=0;_<e.__k.length;_++)e.__k[_]&&(e.__k[_].__=e);break n}null!=a.componentWillUpdate&&a.componentWillUpdate(g,a.__s,x),null!=a.componentDidUpdate&&a.__h.push((function(){a.componentDidUpdate(d,h,v)}))}a.context=x,a.props=g,a.state=a.__s,(_=r.__r)&&_(e),a.__d=!1,a.__v=e,a.__P=n,_=a.render(a.props,a.state,a.context),e.__k=E(null!=_&&_.type==y&&null==_.key?_.props.children:_),null!=a.getChildContext&&(o=p(p({},o),a.getChildContext())),s||null==a.getSnapshotBeforeUpdate||(v=a.getSnapshotBeforeUpdate(d,h)),w(n,e,t,o,u,i,l,c,f),a.base=e.__e,a.__h.length&&l.push(a),m&&(a.__E=a.__=null),a.__e=null}else e.__e=j(t.__e,e,t,o,u,i,l,f);(_=r.diffed)&&_(e)}catch(n){r.__e(n,e,t)}return e.__e}function N(n,e){r.__c&&r.__c(e,n),n.some((function(e){try{n=e.__h,e.__h=[],n.some((function(n){n.call(e)}))}catch(n){r.__e(n,e.__v)}}))}function j(n,e,t,r,o,u,i,l){var c,f,s,p,d,h=t.props,v=e.props;if(o="svg"===e.type||o,null==n&&null!=u)for(c=0;c<u.length;c++)if(null!=(f=u[c])&&(null===e.type?3===f.nodeType:f.localName===e.type)){n=f,u[c]=null;break}if(null==n){if(null===e.type)return document.createTextNode(v);n=o?document.createElementNS("http://www.w3.org/2000/svg",e.type):document.createElement(e.type),u=null}if(null===e.type)null!=u&&(u[u.indexOf(n)]=null),h!==v&&n.data!=v&&(n.data=v);else if(e!==t){if(null!=u&&(u=a.slice.call(n.childNodes)),s=(h=t.props||_).dangerouslySetInnerHTML,p=v.dangerouslySetInnerHTML,!l){if(h===_)for(h={},d=0;d<n.attributes.length;d++)h[n.attributes[d].name]=n.attributes[d].value;(p||s)&&(p&&s&&p.__html==s.__html||(n.innerHTML=p&&p.__html||""))}(function(n,e,t,r,o){var u;for(u in t)u in e||S(n,u,null,t[u],r);for(u in e)o&&"function"!=typeof e[u]||"value"===u||"checked"===u||t[u]===e[u]||S(n,u,e[u],t[u],r)})(n,v,h,o,l),e.__k=e.props.children,p||w(n,e,t,r,"foreignObject"!==e.type&&o,u,i,_,l),l||("value"in v&&void 0!==v.value&&v.value!==n.value&&(n.value=null==v.value?"":v.value),"checked"in v&&void 0!==v.checked&&v.checked!==n.checked&&(n.checked=v.checked))}return n}function $(n,e,t){try{"function"==typeof n?n(e):n.current=e}catch(n){r.__e(n,t)}}function A(n,e,t){var o,u,i;if(r.unmount&&r.unmount(n),(o=n.ref)&&(o.current&&o.current!==n.__e||$(o,null,e)),t||"function"==typeof n.type||(t=null!=(u=n.__e)),n.__e=n.__d=null,null!=(o=n.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(n){r.__e(n,e)}o.base=o.__P=null}if(o=n.__k)for(i=0;i<o.length;i++)o[i]&&A(o[i],e,t);null!=u&&d(u)}function P(n,e,t){return this.constructor(n,t)}function B(n,e,t){var o,u,i;r.__&&r.__(n,e),u=(o=t===c)?null:t&&t.__k||e.__k,n=h(y,null,[n]),i=[],O(e,(o?e:t||e).__k=n,u||_,_,void 0!==e.ownerSVGElement,t&&!o?[t]:u?null:a.slice.call(e.childNodes),i,t||_,o),N(i,n)}function T(n,e){B(n,e,c)}function H(n,e){return e=p(p({},n.props),e),arguments.length>2&&(e.children=a.slice.call(arguments,2)),v(n.type,e,e.key||n.key,e.ref||n.ref)}function L(n){var e={},t={__c:"__cC"+f++,__:n,Consumer:function(n,e){return n.children(e)},Provider:function(n){var r,o=this;return this.getChildContext||(r=[],this.getChildContext=function(){return e[t.__c]=o,e},this.shouldComponentUpdate=function(e){n.value!==e.value&&r.some((function(n){n.context=e.value,x(n)}))},this.sub=function(n){r.push(n);var e=n.componentWillUnmount;n.componentWillUnmount=function(){r.splice(r.indexOf(n),1),e&&e.call(n)}}),n.children}};return t.Consumer.contextType=t,t}r={__e:function(n,e){for(var t,r;e=e.__;)if((t=e.__c)&&!t.__)try{if(t.constructor&&null!=t.constructor.getDerivedStateFromError&&(r=!0,t.setState(t.constructor.getDerivedStateFromError(n))),null!=t.componentDidCatch&&(r=!0,t.componentDidCatch(n)),r)return x(t.__E=t)}catch(e){n=e}throw n}},o=function(n){return null!=n&&void 0===n.constructor},b.prototype.setState=function(n,e){var t;t=this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof n&&(n=n(t,this.props)),n&&p(t,n),null!=n&&this.__v&&(this.__e=!1,e&&this.__h.push(e),x(this))},b.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),x(this))},b.prototype.render=y,u=[],i="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,c=_,f=0},1:function(n,e,t){"use strict";t.d(e,"j",(function(){return p})),t.d(e,"h",(function(){return d})),t.d(e,"d",(function(){return h})),t.d(e,"f",(function(){return v})),t.d(e,"i",(function(){return m})),t.d(e,"e",(function(){return y})),t.d(e,"g",(function(){return b})),t.d(e,"a",(function(){return g})),t.d(e,"b",(function(){return k})),t.d(e,"c",(function(){return x}));var r,o,u,i=t(0),l=[],c=i.options.__r,f=i.options.diffed,_=i.options.__c,a=i.options.unmount;function s(n){i.options.__h&&i.options.__h(o);var e=o.__H||(o.__H={t:[],u:[]});return n>=e.t.length&&e.t.push({}),e.t[n]}function p(n){return d(S,n)}function d(n,e,t){var u=s(r++);return u.__c||(u.__c=o,u.i=[t?t(e):S(void 0,e),function(e){var t=n(u.i[0],e);u.i[0]!==t&&(u.i[0]=t,u.__c.setState({}))}]),u.i}function h(n,e){var t=s(r++);D(t.o,e)&&(t.i=n,t.o=e,o.__H.u.push(t))}function v(n,e){var t=s(r++);D(t.o,e)&&(t.i=n,t.o=e,o.__h.push(t))}function m(n){return b((function(){return{current:n}}),[])}function y(n,e,t){v((function(){"function"==typeof n?n(e()):n&&(n.current=e())}),null==t?t:t.concat(n))}function b(n,e){var t=s(r++);return D(t.o,e)?(t.o=e,t.v=n,t.i=n()):t.i}function g(n,e){return b((function(){return n}),e)}function k(n){var e=o.context[n.__c];if(!e)return n.__;var t=s(r++);return null==t.i&&(t.i=!0,e.sub(o)),e.props.value}function x(n,e){i.options.useDebugValue&&i.options.useDebugValue(e?e(n):n)}function C(){l.some((function(n){n.__P&&(n.__H.u.forEach(w),n.__H.u.forEach(E),n.__H.u=[])})),l=[]}function w(n){n.m&&n.m()}function E(n){var e=n.i();"function"==typeof e&&(n.m=e)}function D(n,e){return!n||e.some((function(e,t){return e!==n[t]}))}function S(n,e){return"function"==typeof e?e(n):e}i.options.__r=function(n){c&&c(n),r=0,(o=n.__c).__H&&(o.__H.u.forEach(w),o.__H.u.forEach(E),o.__H.u=[])},i.options.diffed=function(n){f&&f(n);var e=n.__c;if(e){var t=e.__H;t&&t.u.length&&(1!==l.push(e)&&u===i.options.requestAnimationFrame||((u=i.options.requestAnimationFrame)||function(n){var e,t=function(){clearTimeout(r),cancelAnimationFrame(e),setTimeout(n)},r=setTimeout(t,100);"undefined"!=typeof window&&(e=requestAnimationFrame(t))})(C))}},i.options.__c=function(n,e){e.some((function(n){n.__h.forEach(w),n.__h=n.__h.filter((function(n){return!n.i||E(n)}))})),_&&_(n,e)},i.options.unmount=function(n){a&&a(n);var e=n.__c;if(e){var t=e.__H;t&&t.t.forEach((function(n){return n.m&&n.m()}))}}},2:function(n,e,t){"use strict";t.r(e);var r={Colors:{$D10:"#162D3D",$D20:"#32536A",$D30:"#577083",$D40:"#7A92A5",$D50:"#B6C1CD",$D55:"#CBD3DC",$D60:"#DFE5EB",$D70:"#F0F4F7",$D80:"#FFFFFF",$B00:"#2B81CB",$B05:"#308DDD",$B10:"#3899EC",$B20:"#4EB7F5",$B25:"#A1D7FB",$B27:"#B3E0FB",$B30:"#C1E4FE",$B40:"#DAEFFE",$B50:"#EAF7FF",$B60:"#F4FAFE"}};e.default=r},30:function(n,e,t){"use strict";t.r(e);var r=t(7),o=t.n(r),u=t(0),i=t(1),l={data:""},c=function(n){try{var e=n?n.querySelector("#_goober"):self._goober;return e||((e=(n||document.head).appendChild(document.createElement("style"))).innerHTML=" ",e.id="_goober"),e.firstChild}catch(n){}return l},f=/(?:([a-z0-9-%@]+) *:? *([^{;]+?);|([^;}{]*?) +{)|(})/gi,_=/\/\*.*?\*\/|\s{2,}|\n/gm,a={},s=function(n,e,t,r){var o=JSON.stringify(n),u=a[o]||(a[o]=t?"":".go"+o.split("").reduce((function(n,e){return 101*n+e.charCodeAt(0)>>>0}),11));return function(n,e,t){e.data.indexOf(n)<0&&(e.data=t?n+e.data:e.data+n)}(a[u]||(a[u]=function n(e,t,r){var o="",u="",i="";for(var l in e){var c=e[l];if("object"==typeof c){var f=t+" "+l;/&/g.test(l)&&(f=l.replace(/&/g,t)),"@"==l[0]&&(f=t,"f"==l[1]&&(f=l)),/@k/.test(l)?u+=l+"{"+n(c,"","")+"}":u+=n(c,f,f==t?l:r||"")}else/^@i/.test(l)?i=l+" "+c+";":o+=l.replace(/[A-Z]/g,"-$&").toLowerCase()+":"+c+";"}if(o.charCodeAt(0)){var _=t+"{"+o+"}";return r?u+r+"{"+_+"}":i+_+u}return i+u}(n[0]?function(n){for(var e,t=[{}];e=f.exec(n.replace(_,""));)e[4]&&t.shift(),e[3]?t.unshift(t[0][e[3]]={}):e[4]||(t[0][e[1]]=e[2]);return t[0]}(n):n,u)),e,r),u.slice(1)},p=function(n,e,t){return n.reduce((function(n,r,o){var u=e[o];if(u&&u.call){var i=u(t),l=i&&i.props&&i.props.className||/^go/.test(i)&&i;u=l?"."+l:i&&i.props?"":i}return n+r+(u||"")}),"")};function d(n){var e=this||{},t=n.call?n(e.p):n;return s(t.map?p(t,[].slice.call(arguments,1),e.p):t,c(e.target),e.g,e.o)}var h;d.bind({g:1});function v(n){var e=this||{};return function(){var t=arguments;return function(r){var o=e.p=Object.assign({},r),u=o.className;return e.o=/\s*go[0-9]+/g.test(u),o.className=d.apply(e,t)+(u?" "+u:""),h(n,o)}}}var m=t(8),y=t.n(m),b=t(2),g="/Users/igors/Development/pc-comonents/src/components/Tabs/index.tsx";function k(){var n=o()([" \nheight: 100%;\ndisplay: flex;\njustify-content: center;\nmargin: 0 18px 0 0;\n\n  &:last-child {\n    margin: 0;\n  }\n\n& button {\n  border: none;\n  background: none;\n  font-size: 14px;\n  padding: 0;\n  color: $B10;\n  color: ",";\n  box-shadow: ",";\n    &:hover {\n      color: ","; \n      cursor: pointer;\n    }\n}\n"]);return k=function(){return n},n}function x(){var n=o()(["\nlist-style: none;\ndisplay: flex;\nflex-direction: row;\npadding: 0;\nmargin: 0;\nheight: 60px;\nposition: relative;\nfont-family: $FontRoman;\nbox-sizing: border-box;\n"]);return x=function(){return n},n}!function(n){h=n}(u.h);var C=function(n){var e=n.item,t=n.isActive,r=n.clickHandler;return Object(u.h)(D,{isActive:t,__source:{fileName:g,lineNumber:12}},Object(u.h)("button",{onClick:function(){return r(e)},type:"button",__source:{fileName:g,lineNumber:13}},e.label))},w=function(n){var e=n.data,t=n.activetab,r=Object(i.j)(null),o=r[0],l=r[1],c=Object(i.j)({}),f=c[0],_=c[1],a=Object(i.i)();Object(i.d)((function(){if(e){var n=JSON.parse(e);l(n.map((function(n){return{label:n,id:n.toLowerCase()}})))}}),[e]),Object(i.d)((function(){t&&o&&_(o.filter((function(n){return n.id===t.toLowerCase()})).reduce((function(n,e){return n.concat(e)})))}),[o]);var s=new CustomEvent("tabItemClicked",{detail:f,bubbles:!0}),p=function(n){_(n)};return Object(i.d)((function(){a.current&&a.current.dispatchEvent(s)}),[f]),o?Object(u.h)("div",{ref:a,__source:{fileName:g,lineNumber:76}},Object(u.h)(E,{__source:{fileName:g,lineNumber:78}},o.map((function(n){return Object(u.h)(C,{item:n,clickHandler:p,isActive:f.id===n.id,__source:{fileName:g,lineNumber:80}})})))):null},E=v("ul")(x()),D=v("li")(k(),(function(n){return n.isActive?b.default.Colors.$B10:b.default.Colors.$D10}),(function(n){return n.isActive?"inset 0 -2px 0 0 "+b.default.Colors.$B10:"inset 0 0px 0 0 blue"}),b.default.Colors.$B10);y()(w,"x-tabs",["data","activetab"]);e.default=w},7:function(n,e){n.exports=function(n,e){return e||(e=n.slice(0)),n.raw=e,n}},8:function(n,e,t){var r;n.exports=(r=t(0),function(n){function e(r){if(t[r])return t[r].exports;var o=t[r]={exports:{},id:r,loaded:!1};return n[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var t={};return e.m=n,e.c=t,e.p="",e(0)}([function(n,e,t){"use strict";function r(){this._root=(0,i.render)(function n(e,t){if(3===e.nodeType)return e.nodeValue;if(1!==e.nodeType)return null;var r=[],o={},u=0,l=e.attributes,c=e.childNodes;for(u=l.length;u--;)o[l[u].name]=l[u].value;for(u=c.length;u--;)r[u]=n(c[u]);return(0,i.h)(t||e.nodeName.toLowerCase(),o,r)}(this,this._vdomComponent),this,this._root)}function o(){(0,i.render)((0,i.h)(l),this,this._root)}Object.defineProperty(e,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};e.default=function(n,e,t){var i=function(e){function i(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i);var e=Reflect.construct(HTMLElement,[],i);return e._vdomComponent=n,e}return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":u(e)));n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e)}(i,HTMLElement),c(i,[{key:"connectedCallback",value:function(){r.apply(this)}},{key:"attributeChangedCallback",value:function(){r.apply(this)}},{key:"detachedCallback",value:function(){o.apply(this)}}],[{key:"observedAttributes",get:function(){return t}}]),i}();return window.customElements.define(e||n.displayName||n.name,i)};var i=t(1),l=function(){return null},c=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}()},function(n,e){n.exports=r}]))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9vcHRpb25zLmpzIiwid2VicGFjazovLy8uLi9zcmMvY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jcmVhdGUtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kaWZmL2NoaWxkcmVuLmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RpZmYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jbG9uZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9zcmMvZGlmZi9jYXRjaC1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9nbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvb2Jlci9kaXN0L2dvb2Jlci5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVGFicy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC1jdXN0b20tZWxlbWVudC9kaXN0L2J1bmRsZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm9wdGlvbnMiLCJpc1ZhbGlkRWxlbWVudCIsInEiLCJkZWZlciIsInByZXZEZWJvdW5jZSIsIklTX0hZRFJBVEUiLCJFTVBUWV9PQkoiLCJFTVBUWV9BUlIiLCJJU19OT05fRElNRU5TSU9OQUwiLCJhc3NpZ24iLCJvYmoiLCJwcm9wcyIsInJlbW92ZU5vZGUiLCJub2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGlsZHJlbiIsIm5vcm1hbGl6ZWRQcm9wcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInB1c2giLCJkZWZhdWx0UHJvcHMiLCJjcmVhdGVWTm9kZSIsInJlZiIsInZub2RlIiwiX2NoaWxkcmVuIiwiX3BhcmVudCIsIl9kZXB0aCIsIl9kb20iLCJfbGFzdERvbUNoaWxkIiwiX2NvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwidW5kZWZpbmVkIiwiY3JlYXRlUmVmIiwiRnJhZ21lbnQiLCJDb21wb25lbnQiLCJjb250ZXh0IiwiZ2V0RG9tU2libGluZyIsImNoaWxkSW5kZXgiLCJpbmRleE9mIiwic2libGluZyIsInVwZGF0ZVBhcmVudERvbVBvaW50ZXJzIiwiY2hpbGQiLCJiYXNlIiwiZW5xdWV1ZVJlbmRlciIsIl9kaXJ0eSIsImRlYm91bmNlUmVuZGVyaW5nIiwicHJvY2VzcyIsImNvbXBvbmVudCIsImNvbW1pdFF1ZXVlIiwibmV3RG9tIiwib2xkRG9tIiwicGFyZW50RG9tIiwic29ydCIsImEiLCJiIiwiX3Zub2RlIiwicG9wIiwiX3BhcmVudERvbSIsImRpZmYiLCJfY29udGV4dCIsIm93bmVyU1ZHRWxlbWVudCIsImNvbW1pdFJvb3QiLCJkaWZmQ2hpbGRyZW4iLCJuZXdQYXJlbnRWTm9kZSIsIm9sZFBhcmVudFZOb2RlIiwiaXNTdmciLCJleGNlc3NEb21DaGlsZHJlbiIsImlzSHlkcmF0aW5nIiwiaiIsIm9sZFZOb2RlIiwic2liRG9tIiwiZmlyc3RDaGlsZERvbSIsInJlZnMiLCJvbGRDaGlsZHJlbiIsIm9sZENoaWxkcmVuTGVuZ3RoIiwidG9DaGlsZEFycmF5IiwiY2hpbGRWTm9kZSIsIm91dGVyIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInVubW91bnQiLCJhcHBseVJlZiIsImNhbGxiYWNrIiwiZmxhdHRlbmVkIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0U3R5bGUiLCJzdHlsZSIsInNldFByb3BlcnR5IiwidGVzdCIsImRvbSIsIm9sZFZhbHVlIiwidXNlQ2FwdHVyZSIsIm5hbWVMb3dlciIsImNzc1RleHQiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudFByb3h5IiwiX2xpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZSIsImV2ZW50IiwibmV3Vk5vZGUiLCJ0bXAiLCJpc05ldyIsIm9sZFByb3BzIiwib2xkU3RhdGUiLCJzbmFwc2hvdCIsImNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbiIsIm5ld1Byb3BzIiwicHJvdmlkZXIiLCJjY3R4IiwibmV3VHlwZSIsIl9kaWZmIiwiY29udGV4dFR5cGUiLCJfaWQiLCJfZGVmYXVsdFZhbHVlIiwiX3Byb2Nlc3NpbmdFeGNlcHRpb24iLCJfcGVuZGluZ0Vycm9yIiwicmVuZGVyIiwiZG9SZW5kZXIiLCJzdWIiLCJzdGF0ZSIsIl9yZW5kZXJDYWxsYmFja3MiLCJfbmV4dFN0YXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiX2ZvcmNlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl9yZW5kZXIiLCJnZXRDaGlsZENvbnRleHQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImRpZmZFbGVtZW50Tm9kZXMiLCJkaWZmZWQiLCJfY2F0Y2hFcnJvciIsInJvb3QiLCJfY29tbWl0Iiwic29tZSIsImNiIiwib2xkSHRtbCIsIm5ld0h0bWwiLCJub2RlVHlwZSIsImxvY2FsTmFtZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVFbGVtZW50TlMiLCJkYXRhIiwiY2hpbGROb2RlcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYXR0cmlidXRlcyIsIl9faHRtbCIsImlubmVySFRNTCIsImh5ZHJhdGUiLCJkaWZmUHJvcHMiLCJjaGVja2VkIiwiY3VycmVudCIsInBhcmVudFZOb2RlIiwic2tpcFJlbW92ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidGhpcyIsInJlcGxhY2VOb2RlIiwiX3Jvb3QiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY3R4IiwiQ29uc3VtZXIiLCJQcm92aWRlciIsInN1YnMiLCJfdGhpcyIsIl9wcm9wcyIsIm9sZCIsInNwbGljZSIsImVycm9yIiwiaGFzQ2F1Z2h0IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsInVwZGF0ZSIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsInRoZW4iLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImN1cnJlbnRJbmRleCIsImN1cnJlbnRDb21wb25lbnQiLCJwcmV2UmFmIiwiYWZ0ZXJQYWludEVmZmVjdHMiLCJvbGRCZWZvcmVSZW5kZXIiLCJvbGRBZnRlckRpZmYiLCJvbGRDb21taXQiLCJvbGRCZWZvcmVVbm1vdW50IiwiZ2V0SG9va1N0YXRlIiwiaW5kZXgiLCJfaG9vayIsImhvb2tzIiwiX19ob29rcyIsIl9saXN0IiwiX3BlbmRpbmdFZmZlY3RzIiwidXNlU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJ1c2VSZWR1Y2VyIiwiaW52b2tlT3JSZXR1cm4iLCJyZWR1Y2VyIiwiaW5pdCIsImhvb2tTdGF0ZSIsIl92YWx1ZSIsIm5leHRWYWx1ZSIsImFjdGlvbiIsInVzZUVmZmVjdCIsImFyZ3MiLCJhcmdzQ2hhbmdlZCIsIl9hcmdzIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlUmVmIiwiaW5pdGlhbFZhbHVlIiwidXNlTWVtbyIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJjcmVhdGVIYW5kbGUiLCJjb25jYXQiLCJmYWN0b3J5IiwiX2ZhY3RvcnkiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwiZm9ybWF0dGVyIiwiZmx1c2hBZnRlclBhaW50RWZmZWN0cyIsImZvckVhY2giLCJpbnZva2VDbGVhbnVwIiwiaW52b2tlRWZmZWN0IiwiaG9vayIsIl9jbGVhbnVwIiwicmVzdWx0Iiwib2xkQXJncyIsIm5ld0FyZ3MiLCJhcmciLCJmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmFmIiwiZG9uZSIsImNsZWFyVGltZW91dCIsInRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndpbmRvdyIsImZpbHRlciIsIlRoZW1lIiwiQ29sb3JzIiwiJEQxMCIsIiREMjAiLCIkRDMwIiwiJEQ0MCIsIiRENTAiLCIkRDU1IiwiJEQ2MCIsIiRENzAiLCIkRDgwIiwiJEIwMCIsIiRCMDUiLCIkQjEwIiwiJEIyMCIsIiRCMjUiLCIkQjI3IiwiJEIzMCIsIiRCNDAiLCIkQjUwIiwiJEI2MCIsInF1ZXJ5U2VsZWN0b3IiLCJzZWxmIiwiX2dvb2JlciIsImhlYWQiLCJpZCIsImZpcnN0Q2hpbGQiLCJ1IiwiSlNPTiIsInN0cmluZ2lmeSIsInNwbGl0IiwicmVkdWNlIiwiY2hhckNvZGVBdCIsImV4ZWMiLCJzaGlmdCIsInVuc2hpZnQiLCJjbGFzc05hbWUiLCJtYXAiLCJ0YXJnZXQiLCJnIiwiYXBwbHkiLCJzZXRQcmFnbWEiLCJoIiwiVGFiIiwiaXRlbSIsImlzQWN0aXZlIiwiY2xpY2tIYW5kbGVyIiwiU3R5bGVkTGkiLCJvbkNsaWNrIiwibGFiZWwiLCJUYWJzIiwiYWN0aXZldGFiIiwiZGF0YVN0YXRlIiwic2V0RGF0YSIsImFjdGl2ZSIsInNldEFjdGl2ZSIsImNvbXBvbmVudFJlZiIsInBhcnNlZERhdGEiLCJwYXJzZSIsInRhYiIsImFjYyIsImNsaWNrRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwiU3R5bGVkVWwiLCJzdHlsZWQiLCJyZWdpc3RlciIsInN0cmluZ3MiLCJyYXciLCJyZXF1aXJlIiwibG9hZGVkIiwibm9kZVZhbHVlIiwibm9kZU5hbWUiLCJfdmRvbUNvbXBvbmVudCIsIml0ZXJhdG9yIiwiVHlwZUVycm9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIkhUTUxFbGVtZW50Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiZGlzcGxheU5hbWUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxR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QUFNOUgsUUFBUSxDQUFDdEwsSUFBSSxtQkFBbUJOLE1BQU0sV0FBV3lRLEVBQUVpRCxNQUFNOUgsU0FBUyxDQUFDLENBQUN0TCxJQUFJLHFCQUFxQlYsSUFBSSxXQUFXLE9BQU9ZLE1BQU1xUyxFQUF4VyxHQUF3WCxPQUFPN0IsT0FBT3VGLGVBQWVDLE9BQU92VyxHQUFHNEgsRUFBRTRPLGFBQWE1TyxFQUFFdkksS0FBS3VULElBQTBwQixJQUFJN1QsRUFBRXdCLEVBQUUsR0FBR0ssRUFBRSxXQUFXLE9BQU8sTUFBTUMsRUFBRSxXQUFXLFNBQVMrRyxFQUFFQSxFQUFFNUgsR0FBRyxJQUFJLElBQUlPLEVBQUUsRUFBRUEsRUFBRVAsRUFBRW1DLE9BQU81QixJQUFJLENBQUMsSUFBSWhCLEVBQUVTLEVBQUVPLEdBQUdoQixFQUFFRyxXQUFXSCxFQUFFRyxhQUFZLEVBQUdILEVBQUU0VyxjQUFhLEVBQUcsVUFBVTVXLElBQUlBLEVBQUUyVyxVQUFTLEdBQUkxVyxPQUFPQyxlQUFlbUksRUFBRXJJLEVBQUVjLElBQUlkLElBQUksT0FBTyxTQUFTUyxFQUFFTyxFQUFFaEIsR0FBRyxPQUFPZ0IsR0FBR3FILEVBQUU1SCxFQUFFVSxVQUFVSCxHQUFHaEIsR0FBR3FJLEVBQUU1SCxFQUFFVCxHQUFHUyxHQUE3TyxJQUFvUCxTQUFTQSxFQUFFTyxHQUFHUCxFQUFFcEIsUUFBUWdKIiwiZmlsZSI6IlRhYnMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzApO1xuIiwiZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuZXhwb3J0IGNvbnN0IEVNUFRZX0FSUiA9IFtdO1xuZXhwb3J0IGNvbnN0IElTX05PTl9ESU1FTlNJT05BTCA9IC9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkL2k7XG4iLCJpbXBvcnQgeyBfY2F0Y2hFcnJvciB9IGZyb20gJy4vZGlmZi9jYXRjaC1lcnJvcic7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuT3B0aW9uc30gICovXG5jb25zdCBvcHRpb25zID0ge1xuXHRfY2F0Y2hFcnJvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIHZpcnR1YWwgbm9kZSAodXNlZCBmb3IgSlNYKVxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZVtcInR5cGVcIl19IHR5cGUgVGhlIG5vZGUgbmFtZSBvciBDb21wb25lbnRcbiAqIGNvbnN0cnVjdG9yIGZvciB0aGlzIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsIHwgdW5kZWZpbmVkfSBbcHJvcHNdIFRoZSBwcm9wZXJ0aWVzIG9mIHRoZSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuJykuQ29tcG9uZW50Q2hpbGRyZW4+fSBbY2hpbGRyZW5dIFRoZSBjaGlsZHJlbiBvZiB0aGUgdmlydHVhbCBub2RlXG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuXHRsZXQgbm9ybWFsaXplZFByb3BzID0ge30sXG5cdFx0aTtcblx0Zm9yIChpIGluIHByb3BzKSB7XG5cdFx0aWYgKGkgIT09ICdrZXknICYmIGkgIT09ICdyZWYnKSBub3JtYWxpemVkUHJvcHNbaV0gPSBwcm9wc1tpXTtcblx0fVxuXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMykge1xuXHRcdGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcHJlYWN0anMvcHJlYWN0L2lzc3Vlcy8xOTE2XG5cdFx0Zm9yIChpID0gMzsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hpbGRyZW4ucHVzaChhcmd1bWVudHNbaV0pO1xuXHRcdH1cblx0fVxuXHRpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdG5vcm1hbGl6ZWRQcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHR9XG5cblx0Ly8gSWYgYSBDb21wb25lbnQgVk5vZGUsIGNoZWNrIGZvciBhbmQgYXBwbHkgZGVmYXVsdFByb3BzXG5cdC8vIE5vdGU6IHR5cGUgbWF5IGJlIHVuZGVmaW5lZCBpbiBkZXZlbG9wbWVudCwgbXVzdCBuZXZlciBlcnJvciBoZXJlLlxuXHRpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZS5kZWZhdWx0UHJvcHMgIT0gbnVsbCkge1xuXHRcdGZvciAoaSBpbiB0eXBlLmRlZmF1bHRQcm9wcykge1xuXHRcdFx0aWYgKG5vcm1hbGl6ZWRQcm9wc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZWRQcm9wc1tpXSA9IHR5cGUuZGVmYXVsdFByb3BzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjcmVhdGVWTm9kZShcblx0XHR0eXBlLFxuXHRcdG5vcm1hbGl6ZWRQcm9wcyxcblx0XHRwcm9wcyAmJiBwcm9wcy5rZXksXG5cdFx0cHJvcHMgJiYgcHJvcHMucmVmXG5cdCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgVk5vZGUgKHVzZWQgaW50ZXJuYWxseSBieSBQcmVhY3QpXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1widHlwZVwiXX0gdHlwZSBUaGUgbm9kZSBuYW1lIG9yIENvbXBvbmVudFxuICogQ29uc3RydWN0b3IgZm9yIHRoaXMgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdCB8IHN0cmluZyB8IG51bWJlciB8IG51bGx9IHByb3BzIFRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdmlydHVhbCBub2RlLlxuICogSWYgdGhpcyB2aXJ0dWFsIG5vZGUgcmVwcmVzZW50cyBhIHRleHQgbm9kZSwgdGhpcyBpcyB0aGUgdGV4dCBvZiB0aGUgbm9kZSAoc3RyaW5nIG9yIG51bWJlcikuXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IG51bGx9IGtleSBUaGUga2V5IGZvciB0aGlzIHZpcnR1YWwgbm9kZSwgdXNlZCB3aGVuXG4gKiBkaWZmaW5nIGl0IGFnYWluc3QgaXRzIGNoaWxkcmVuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlZOb2RlW1wicmVmXCJdfSByZWYgVGhlIHJlZiBwcm9wZXJ0eSB0aGF0IHdpbGxcbiAqIHJlY2VpdmUgYSByZWZlcmVuY2UgdG8gaXRzIGNyZWF0ZWQgY2hpbGRcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBrZXksIHJlZikge1xuXHQvLyBWOCBzZWVtcyB0byBiZSBiZXR0ZXIgYXQgZGV0ZWN0aW5nIHR5cGUgc2hhcGVzIGlmIHRoZSBvYmplY3QgaXMgYWxsb2NhdGVkIGZyb20gdGhlIHNhbWUgY2FsbCBzaXRlXG5cdC8vIERvIG5vdCBpbmxpbmUgaW50byBjcmVhdGVFbGVtZW50IGFuZCBjb2VyY2VUb1ZOb2RlIVxuXHRjb25zdCB2bm9kZSA9IHtcblx0XHR0eXBlLFxuXHRcdHByb3BzLFxuXHRcdGtleSxcblx0XHRyZWYsXG5cdFx0X2NoaWxkcmVuOiBudWxsLFxuXHRcdF9wYXJlbnQ6IG51bGwsXG5cdFx0X2RlcHRoOiAwLFxuXHRcdF9kb206IG51bGwsXG5cdFx0X2xhc3REb21DaGlsZDogbnVsbCxcblx0XHRfY29tcG9uZW50OiBudWxsLFxuXHRcdGNvbnN0cnVjdG9yOiB1bmRlZmluZWRcblx0fTtcblxuXHRpZiAob3B0aW9ucy52bm9kZSkgb3B0aW9ucy52bm9kZSh2bm9kZSk7XG5cblx0cmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuXHRyZXR1cm4ge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudChwcm9wcykge1xuXHRyZXR1cm4gcHJvcHMuY2hpbGRyZW47XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0aGUgYXJndW1lbnQgaXMgYSB2YWxpZCBQcmVhY3QgVk5vZGUuXG4gKiBAcGFyYW0geyp9IHZub2RlXG4gKiBAcmV0dXJucyB7dm5vZGUgaXMgaW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkRWxlbWVudCA9IHZub2RlID0+XG5cdHZub2RlICE9IG51bGwgJiYgdm5vZGUuY29uc3RydWN0b3IgPT09IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBkaWZmLCBjb21taXRSb290IH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xuXG4vKipcbiAqIEJhc2UgQ29tcG9uZW50IGNsYXNzLiBQcm92aWRlcyBgc2V0U3RhdGUoKWAgYW5kIGBmb3JjZVVwZGF0ZSgpYCwgd2hpY2hcbiAqIHRyaWdnZXIgcmVuZGVyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgVGhlIGluaXRpYWwgY29tcG9uZW50IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgaW5pdGlhbCBjb250ZXh0IGZyb20gcGFyZW50IGNvbXBvbmVudHMnXG4gKiBnZXRDaGlsZENvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCkge1xuXHR0aGlzLnByb3BzID0gcHJvcHM7XG5cdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbi8qKlxuICogVXBkYXRlIGNvbXBvbmVudCBzdGF0ZSBhbmQgc2NoZWR1bGUgYSByZS1yZW5kZXIuXG4gKiBAcGFyYW0ge29iamVjdCB8ICgoczogb2JqZWN0LCBwOiBvYmplY3QpID0+IG9iamVjdCl9IHVwZGF0ZSBBIGhhc2ggb2Ygc3RhdGVcbiAqIHByb3BlcnRpZXMgdG8gdXBkYXRlIHdpdGggbmV3IHZhbHVlcyBvciBhIGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFuZCBwcm9wcyByZXR1cm5zIGEgbmV3IHBhcnRpYWwgc3RhdGVcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gW2NhbGxiYWNrXSBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbmNlIGNvbXBvbmVudCBzdGF0ZSBpc1xuICogdXBkYXRlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odXBkYXRlLCBjYWxsYmFjaykge1xuXHQvLyBvbmx5IGNsb25lIHN0YXRlIHdoZW4gY29weWluZyB0byBuZXh0U3RhdGUgdGhlIGZpcnN0IHRpbWUuXG5cdGxldCBzO1xuXHRpZiAodGhpcy5fbmV4dFN0YXRlICE9PSB0aGlzLnN0YXRlKSB7XG5cdFx0cyA9IHRoaXMuX25leHRTdGF0ZTtcblx0fSBlbHNlIHtcblx0XHRzID0gdGhpcy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdXBkYXRlID09ICdmdW5jdGlvbicpIHtcblx0XHR1cGRhdGUgPSB1cGRhdGUocywgdGhpcy5wcm9wcyk7XG5cdH1cblxuXHRpZiAodXBkYXRlKSB7XG5cdFx0YXNzaWduKHMsIHVwZGF0ZSk7XG5cdH1cblxuXHQvLyBTa2lwIHVwZGF0ZSBpZiB1cGRhdGVyIGZ1bmN0aW9uIHJldHVybmVkIG51bGxcblx0aWYgKHVwZGF0ZSA9PSBudWxsKSByZXR1cm47XG5cblx0aWYgKHRoaXMuX3Zub2RlKSB7XG5cdFx0dGhpcy5fZm9yY2UgPSBmYWxzZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudFxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpc1xuICogcmUtcmVuZGVyZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdGlmICh0aGlzLl92bm9kZSkge1xuXHRcdC8vIFNldCByZW5kZXIgbW9kZSBzbyB0aGF0IHdlIGNhbiBkaWZmZXJlbnRpYXRlIHdoZXJlIHRoZSByZW5kZXIgcmVxdWVzdFxuXHRcdC8vIGlzIGNvbWluZyBmcm9tLiBXZSBuZWVkIHRoaXMgYmVjYXVzZSBmb3JjZVVwZGF0ZSBzaG91bGQgbmV2ZXIgY2FsbFxuXHRcdC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuXHRcdHRoaXMuX2ZvcmNlID0gdHJ1ZTtcblx0XHRpZiAoY2FsbGJhY2spIHRoaXMuX3JlbmRlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0XHRlbnF1ZXVlUmVuZGVyKHRoaXMpO1xuXHR9XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgYHByb3BzYCBhbmQgYHN0YXRlYCwgYW5kIHJldHVybnMgYSBuZXcgVmlydHVhbCBET00gdHJlZSB0byBidWlsZC5cbiAqIFZpcnR1YWwgRE9NIGlzIGdlbmVyYWxseSBjb25zdHJ1Y3RlZCB2aWEgW0pTWF0oaHR0cDovL2phc29uZm9ybWF0LmNvbS93dGYtaXMtanN4KS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBQcm9wcyAoZWc6IEpTWCBhdHRyaWJ1dGVzKSByZWNlaXZlZCBmcm9tIHBhcmVudFxuICogZWxlbWVudC9jb21wb25lbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSBUaGUgY29tcG9uZW50J3MgY3VycmVudCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgQ29udGV4dCBvYmplY3QsIGFzIHJldHVybmVkIGJ5IHRoZSBuZWFyZXN0XG4gKiBhbmNlc3RvcidzIGBnZXRDaGlsZENvbnRleHQoKWBcbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4vaW5kZXgnKS5Db21wb25lbnRDaGlsZHJlbiB8IHZvaWR9XG4gKi9cbkNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gRnJhZ21lbnQ7XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbH0gW2NoaWxkSW5kZXhdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21TaWJsaW5nKHZub2RlLCBjaGlsZEluZGV4KSB7XG5cdGlmIChjaGlsZEluZGV4ID09IG51bGwpIHtcblx0XHQvLyBVc2UgY2hpbGRJbmRleD09bnVsbCBhcyBhIHNpZ25hbCB0byByZXN1bWUgdGhlIHNlYXJjaCBmcm9tIHRoZSB2bm9kZSdzIHNpYmxpbmdcblx0XHRyZXR1cm4gdm5vZGUuX3BhcmVudFxuXHRcdFx0PyBnZXREb21TaWJsaW5nKHZub2RlLl9wYXJlbnQsIHZub2RlLl9wYXJlbnQuX2NoaWxkcmVuLmluZGV4T2Yodm5vZGUpICsgMSlcblx0XHRcdDogbnVsbDtcblx0fVxuXG5cdGxldCBzaWJsaW5nO1xuXHRmb3IgKDsgY2hpbGRJbmRleCA8IHZub2RlLl9jaGlsZHJlbi5sZW5ndGg7IGNoaWxkSW5kZXgrKykge1xuXHRcdHNpYmxpbmcgPSB2bm9kZS5fY2hpbGRyZW5bY2hpbGRJbmRleF07XG5cblx0XHRpZiAoc2libGluZyAhPSBudWxsICYmIHNpYmxpbmcuX2RvbSAhPSBudWxsKSB7XG5cdFx0XHQvLyBTaW5jZSB1cGRhdGVQYXJlbnREb21Qb2ludGVycyBrZWVwcyBfZG9tIHBvaW50ZXIgY29ycmVjdCxcblx0XHRcdC8vIHdlIGNhbiByZWx5IG9uIF9kb20gdG8gdGVsbCB1cyBpZiB0aGlzIHN1YnRyZWUgY29udGFpbnMgYVxuXHRcdFx0Ly8gcmVuZGVyZWQgRE9NIG5vZGUsIGFuZCB3aGF0IHRoZSBmaXJzdCByZW5kZXJlZCBET00gbm9kZSBpc1xuXHRcdFx0cmV0dXJuIHNpYmxpbmcuX2RvbTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB3ZSBnZXQgaGVyZSwgd2UgaGF2ZSBub3QgZm91bmQgYSBET00gbm9kZSBpbiB0aGlzIHZub2RlJ3MgY2hpbGRyZW4uXG5cdC8vIFdlIG11c3QgcmVzdW1lIGZyb20gdGhpcyB2bm9kZSdzIHNpYmxpbmcgKGluIGl0J3MgcGFyZW50IF9jaGlsZHJlbiBhcnJheSlcblx0Ly8gT25seSBjbGltYiB1cCBhbmQgc2VhcmNoIHRoZSBwYXJlbnQgaWYgd2UgYXJlbid0IHNlYXJjaGluZyB0aHJvdWdoIGEgRE9NXG5cdC8vIFZOb2RlIChtZWFuaW5nIHdlIHJlYWNoZWQgdGhlIERPTSBwYXJlbnQgb2YgdGhlIG9yaWdpbmFsIHZub2RlIHRoYXQgYmVnYW5cblx0Ly8gdGhlIHNlYXJjaClcblx0cmV0dXJuIHR5cGVvZiB2bm9kZS50eXBlID09PSAnZnVuY3Rpb24nID8gZ2V0RG9tU2libGluZyh2bm9kZSkgOiBudWxsO1xufVxuXG4vKipcbiAqIFRyaWdnZXIgaW4tcGxhY2UgcmUtcmVuZGVyaW5nIG9mIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHJlcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQpIHtcblx0bGV0IHZub2RlID0gY29tcG9uZW50Ll92bm9kZSxcblx0XHRvbGREb20gPSB2bm9kZS5fZG9tLFxuXHRcdHBhcmVudERvbSA9IGNvbXBvbmVudC5fcGFyZW50RG9tO1xuXG5cdGlmIChwYXJlbnREb20pIHtcblx0XHRsZXQgY29tbWl0UXVldWUgPSBbXTtcblx0XHRsZXQgbmV3RG9tID0gZGlmZihcblx0XHRcdHBhcmVudERvbSxcblx0XHRcdHZub2RlLFxuXHRcdFx0YXNzaWduKHt9LCB2bm9kZSksXG5cdFx0XHRjb21wb25lbnQuX2NvbnRleHQsXG5cdFx0XHRwYXJlbnREb20ub3duZXJTVkdFbGVtZW50ICE9PSB1bmRlZmluZWQsXG5cdFx0XHRudWxsLFxuXHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRvbGREb20gPT0gbnVsbCA/IGdldERvbVNpYmxpbmcodm5vZGUpIDogb2xkRG9tXG5cdFx0KTtcblx0XHRjb21taXRSb290KGNvbW1pdFF1ZXVlLCB2bm9kZSk7XG5cblx0XHRpZiAobmV3RG9tICE9IG9sZERvbSkge1xuXHRcdFx0dXBkYXRlUGFyZW50RG9tUG9pbnRlcnModm5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuVk5vZGV9IHZub2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVBhcmVudERvbVBvaW50ZXJzKHZub2RlKSB7XG5cdGlmICgodm5vZGUgPSB2bm9kZS5fcGFyZW50KSAhPSBudWxsICYmIHZub2RlLl9jb21wb25lbnQgIT0gbnVsbCkge1xuXHRcdHZub2RlLl9kb20gPSB2bm9kZS5fY29tcG9uZW50LmJhc2UgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2hpbGQgPSB2bm9kZS5fY2hpbGRyZW5baV07XG5cdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCAmJiBjaGlsZC5fZG9tICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuX2RvbSA9IHZub2RlLl9jb21wb25lbnQuYmFzZSA9IGNoaWxkLl9kb207XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVQYXJlbnREb21Qb2ludGVycyh2bm9kZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgcmVuZGVyIHF1ZXVlXG4gKiBAdHlwZSB7QXJyYXk8aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50Pn1cbiAqL1xubGV0IHEgPSBbXTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gKiBAdHlwZSB7KGNiOiAoKSA9PiB2b2lkKSA9PiB2b2lkfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLy8gTm90ZSB0aGUgZm9sbG93aW5nIGxpbmUgaXNuJ3QgdHJlZS1zaGFrZW4gYnkgcm9sbHVwIGN1eiBvZiByb2xsdXAvcm9sbHVwIzI1NjZcbmNvbnN0IGRlZmVyID1cblx0dHlwZW9mIFByb21pc2UgPT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXHRcdDogc2V0VGltZW91dDtcblxuLypcbiAqIFRoZSB2YWx1ZSBvZiBgQ29tcG9uZW50LmRlYm91bmNlYCBtdXN0IGFzeW5jaHJvbm91c2x5IGludm9rZSB0aGUgcGFzc2VkIGluIGNhbGxiYWNrLiBJdCBpc1xuICogaW1wb3J0YW50IHRoYXQgY29udHJpYnV0b3JzIHRvIFByZWFjdCBjYW4gY29uc2lzdGVudGx5IHJlYXNvbiBhYm91dCB3aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAsIGV0Yy5cbiAqIGRvLCBhbmQgd2hlbiB0aGVpciBlZmZlY3RzIHdpbGwgYmUgYXBwbGllZC4gU2VlIHRoZSBsaW5rcyBiZWxvdyBmb3Igc29tZSBmdXJ0aGVyIHJlYWRpbmcgb24gZGVzaWduaW5nXG4gKiBhc3luY2hyb25vdXMgQVBJcy5cbiAqICogW0Rlc2lnbmluZyBBUElzIGZvciBBc3luY2hyb255XShodHRwczovL2Jsb2cuaXpzLm1lLzIwMTMvMDgvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiAqIFtDYWxsYmFja3Mgc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91c10oaHR0cHM6Ly9ibG9nLm9tZXRlci5jb20vMjAxMS8wNy8yNC9jYWxsYmFja3Mtc3luY2hyb25vdXMtYW5kLWFzeW5jaHJvbm91cy8pXG4gKi9cblxubGV0IHByZXZEZWJvdW5jZTtcblxuLyoqXG4gKiBFbnF1ZXVlIGEgcmVyZW5kZXIgb2YgYSBjb21wb25lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuQ29tcG9uZW50fSBjIFRoZSBjb21wb25lbnQgdG8gcmVyZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVSZW5kZXIoYykge1xuXHRpZiAoXG5cdFx0KCFjLl9kaXJ0eSAmJiAoYy5fZGlydHkgPSB0cnVlKSAmJiBxLnB1c2goYykgPT09IDEpIHx8XG5cdFx0cHJldkRlYm91bmNlICE9PSBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nXG5cdCkge1xuXHRcdHByZXZEZWJvdW5jZSA9IG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmc7XG5cdFx0KHByZXZEZWJvdW5jZSB8fCBkZWZlcikocHJvY2Vzcyk7XG5cdH1cbn1cblxuLyoqIEZsdXNoIHRoZSByZW5kZXIgcXVldWUgYnkgcmVyZW5kZXJpbmcgYWxsIHF1ZXVlZCBjb21wb25lbnRzICovXG5mdW5jdGlvbiBwcm9jZXNzKCkge1xuXHRsZXQgcDtcblx0cS5zb3J0KChhLCBiKSA9PiBiLl92bm9kZS5fZGVwdGggLSBhLl92bm9kZS5fZGVwdGgpO1xuXHR3aGlsZSAoKHAgPSBxLnBvcCgpKSkge1xuXHRcdC8vIGZvcmNlVXBkYXRlJ3MgY2FsbGJhY2sgYXJndW1lbnQgaXMgcmV1c2VkIGhlcmUgdG8gaW5kaWNhdGUgYSBub24tZm9yY2VkIHVwZGF0ZS5cblx0XHRpZiAocC5fZGlydHkpIHJlbmRlckNvbXBvbmVudChwKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgRU1QVFlfT0JKLCBFTVBUWV9BUlIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBjb21taXRSb290LCBkaWZmIH0gZnJvbSAnLi9kaWZmL2luZGV4JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAnLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL29wdGlvbnMnO1xuXG5jb25zdCBJU19IWURSQVRFID0gRU1QVFlfT0JKO1xuXG4vKipcbiAqIFJlbmRlciBhIFByZWFjdCB2aXJ0dWFsIG5vZGUgaW50byBhIERPTSBlbGVtZW50XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLkNvbXBvbmVudENoaWxkfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHJlbmRlclxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHRvXG4gKiByZW5kZXIgaW50b1xuICogQHBhcmFtIHtFbGVtZW50IHwgVGV4dH0gW3JlcGxhY2VOb2RlXSBBdHRlbXB0IHRvIHJlLXVzZSBhblxuICogZXhpc3RpbmcgRE9NIHRyZWUgcm9vdGVkIGF0IGByZXBsYWNlTm9kZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih2bm9kZSwgcGFyZW50RG9tLCByZXBsYWNlTm9kZSkge1xuXHRpZiAob3B0aW9ucy5fcm9vdCkgb3B0aW9ucy5fcm9vdCh2bm9kZSwgcGFyZW50RG9tKTtcblxuXHRsZXQgaXNIeWRyYXRpbmcgPSByZXBsYWNlTm9kZSA9PT0gSVNfSFlEUkFURTtcblx0bGV0IG9sZFZOb2RlID0gaXNIeWRyYXRpbmdcblx0XHQ/IG51bGxcblx0XHQ6IChyZXBsYWNlTm9kZSAmJiByZXBsYWNlTm9kZS5fY2hpbGRyZW4pIHx8IHBhcmVudERvbS5fY2hpbGRyZW47XG5cdHZub2RlID0gY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgW3Zub2RlXSk7XG5cblx0bGV0IGNvbW1pdFF1ZXVlID0gW107XG5cdGRpZmYoXG5cdFx0cGFyZW50RG9tLFxuXHRcdCgoaXNIeWRyYXRpbmcgPyBwYXJlbnREb20gOiByZXBsYWNlTm9kZSB8fCBwYXJlbnREb20pLl9jaGlsZHJlbiA9IHZub2RlKSxcblx0XHRvbGRWTm9kZSB8fCBFTVBUWV9PQkosXG5cdFx0RU1QVFlfT0JKLFxuXHRcdHBhcmVudERvbS5vd25lclNWR0VsZW1lbnQgIT09IHVuZGVmaW5lZCxcblx0XHRyZXBsYWNlTm9kZSAmJiAhaXNIeWRyYXRpbmdcblx0XHRcdD8gW3JlcGxhY2VOb2RlXVxuXHRcdFx0OiBvbGRWTm9kZVxuXHRcdFx0PyBudWxsXG5cdFx0XHQ6IEVNUFRZX0FSUi5zbGljZS5jYWxsKHBhcmVudERvbS5jaGlsZE5vZGVzKSxcblx0XHRjb21taXRRdWV1ZSxcblx0XHRyZXBsYWNlTm9kZSB8fCBFTVBUWV9PQkosXG5cdFx0aXNIeWRyYXRpbmdcblx0KTtcblx0Y29tbWl0Um9vdChjb21taXRRdWV1ZSwgdm5vZGUpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBhbiBleGlzdGluZyBET00gZWxlbWVudCB3aXRoIGRhdGEgZnJvbSBhIFByZWFjdCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2luZGV4JykuQ29tcG9uZW50Q2hpbGR9IHZub2RlIFRoZSB2aXJ0dWFsIG5vZGUgdG8gcmVuZGVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgRE9NIGVsZW1lbnQgdG9cbiAqIHVwZGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZSh2bm9kZSwgcGFyZW50RG9tKSB7XG5cdHJlbmRlcih2bm9kZSwgcGFyZW50RG9tLCBJU19IWURSQVRFKTtcbn1cbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBsZXQgaSA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSkge1xuXHRjb25zdCBjdHggPSB7fTtcblxuXHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdF9pZDogJ19fY0MnICsgaSsrLFxuXHRcdF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcblx0XHRDb25zdW1lcihwcm9wcywgY29udGV4dCkge1xuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuKGNvbnRleHQpO1xuXHRcdH0sXG5cdFx0UHJvdmlkZXIocHJvcHMpIHtcblx0XHRcdGlmICghdGhpcy5nZXRDaGlsZENvbnRleHQpIHtcblx0XHRcdFx0Y29uc3Qgc3VicyA9IFtdO1xuXHRcdFx0XHR0aGlzLmdldENoaWxkQ29udGV4dCA9ICgpID0+IHtcblx0XHRcdFx0XHRjdHhbY29udGV4dC5faWRdID0gdGhpcztcblx0XHRcdFx0XHRyZXR1cm4gY3R4O1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IF9wcm9wcyA9PiB7XG5cdFx0XHRcdFx0aWYgKHByb3BzLnZhbHVlICE9PSBfcHJvcHMudmFsdWUpIHtcblx0XHRcdFx0XHRcdHN1YnMuc29tZShjID0+IHtcblx0XHRcdFx0XHRcdFx0Yy5jb250ZXh0ID0gX3Byb3BzLnZhbHVlO1xuXHRcdFx0XHRcdFx0XHRlbnF1ZXVlUmVuZGVyKGMpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnN1YiA9IGMgPT4ge1xuXHRcdFx0XHRcdHN1YnMucHVzaChjKTtcblx0XHRcdFx0XHRsZXQgb2xkID0gYy5jb21wb25lbnRXaWxsVW5tb3VudDtcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gKCkgPT4ge1xuXHRcdFx0XHRcdFx0c3Vicy5zcGxpY2Uoc3Vicy5pbmRleE9mKGMpLCAxKTtcblx0XHRcdFx0XHRcdG9sZCAmJiBvbGQuY2FsbChjKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHByb3BzLmNoaWxkcmVuO1xuXHRcdH1cblx0fTtcblxuXHRjb250ZXh0LkNvbnN1bWVyLmNvbnRleHRUeXBlID0gY29udGV4dDtcblxuXHRyZXR1cm4gY29udGV4dDtcbn1cbiIsIi8qKlxuICogQXNzaWduIHByb3BlcnRpZXMgZnJvbSBgcHJvcHNgIHRvIGBvYmpgXG4gKiBAdGVtcGxhdGUgTywgUCBUaGUgb2JqIGFuZCBwcm9wcyB0eXBlc1xuICogQHBhcmFtIHtPfSBvYmogVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG9cbiAqIEBwYXJhbSB7UH0gcHJvcHMgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHJldHVybnMge08gJiBQfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKG9iaiwgcHJvcHMpIHtcblx0Zm9yIChsZXQgaSBpbiBwcm9wcykgb2JqW2ldID0gcHJvcHNbaV07XG5cdHJldHVybiAvKiogQHR5cGUge08gJiBQfSAqLyAob2JqKTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBjaGlsZCBub2RlIGZyb20gaXRzIHBhcmVudCBpZiBhdHRhY2hlZC4gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yXG4gKiBJRTExIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydCBgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlKClgLiBVc2luZyB0aGlzIGZ1bmN0aW9uXG4gKiBpcyBzbWFsbGVyIHRoYW4gaW5jbHVkaW5nIGEgZGVkaWNhdGVkIHBvbHlmaWxsLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG5cdGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbiIsImltcG9ydCB7IGRpZmYsIHVubW91bnQsIGFwcGx5UmVmIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBjcmVhdGVWTm9kZSB9IGZyb20gJy4uL2NyZWF0ZS1lbGVtZW50JztcbmltcG9ydCB7IEVNUFRZX09CSiwgRU1QVFlfQVJSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHJlbW92ZU5vZGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGdldERvbVNpYmxpbmcgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIERpZmYgdGhlIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5QcmVhY3RFbGVtZW50fSBwYXJlbnREb20gVGhlIERPTSBlbGVtZW50IHdob3NlXG4gKiBjaGlsZHJlbiBhcmUgYmVpbmcgZGlmZmVkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gbmV3UGFyZW50Vk5vZGUgVGhlIG5ldyB2aXJ0dWFsXG4gKiBub2RlIHdob3NlIGNoaWxkcmVuIHNob3VsZCBiZSBkaWZmJ2VkIGFnYWluc3Qgb2xkUGFyZW50Vk5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBvbGRQYXJlbnRWTm9kZSBUaGUgb2xkIHZpcnR1YWxcbiAqIG5vZGUgd2hvc2UgY2hpbGRyZW4gc2hvdWxkIGJlIGRpZmYnZWQgYWdhaW5zdCBuZXdQYXJlbnRWTm9kZVxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgVGhlIGN1cnJlbnQgY29udGV4dCBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdmcgV2hldGhlciBvciBub3QgdGhpcyBET00gbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge05vZGUgfCBUZXh0fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNIeWRyYXRpbmcgV2hldGhlciBvciBub3Qgd2UgYXJlIGluIGh5ZHJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZkNoaWxkcmVuKFxuXHRwYXJlbnREb20sXG5cdG5ld1BhcmVudFZOb2RlLFxuXHRvbGRQYXJlbnRWTm9kZSxcblx0Y29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZ1xuKSB7XG5cdGxldCBpLCBqLCBvbGRWTm9kZSwgbmV3RG9tLCBzaWJEb20sIGZpcnN0Q2hpbGREb20sIHJlZnM7XG5cblx0Ly8gVGhpcyBpcyBhIGNvbXByZXNzaW9uIG9mIG9sZFBhcmVudFZOb2RlIT1udWxsICYmIG9sZFBhcmVudFZOb2RlICE9IEVNUFRZX09CSiAmJiBvbGRQYXJlbnRWTm9kZS5fY2hpbGRyZW4gfHwgRU1QVFlfQVJSXG5cdC8vIGFzIEVNUFRZX09CSi5fY2hpbGRyZW4gc2hvdWxkIGJlIGB1bmRlZmluZWRgLlxuXHRsZXQgb2xkQ2hpbGRyZW4gPSAob2xkUGFyZW50Vk5vZGUgJiYgb2xkUGFyZW50Vk5vZGUuX2NoaWxkcmVuKSB8fCBFTVBUWV9BUlI7XG5cblx0bGV0IG9sZENoaWxkcmVuTGVuZ3RoID0gb2xkQ2hpbGRyZW4ubGVuZ3RoO1xuXG5cdC8vIE9ubHkgaW4gdmVyeSBzcGVjaWZpYyBwbGFjZXMgc2hvdWxkIHRoaXMgbG9naWMgYmUgaW52b2tlZCAodG9wIGxldmVsIGByZW5kZXJgIGFuZCBgZGlmZkVsZW1lbnROb2Rlc2ApLlxuXHQvLyBJJ20gdXNpbmcgYEVNUFRZX09CSmAgdG8gc2lnbmFsIHdoZW4gYGRpZmZDaGlsZHJlbmAgaXMgaW52b2tlZCBpbiB0aGVzZSBzaXR1YXRpb25zLiBJIGNhbid0IHVzZSBgbnVsbGBcblx0Ly8gZm9yIHRoaXMgcHVycG9zZSwgYmVjYXVzZSBgbnVsbGAgaXMgYSB2YWxpZCB2YWx1ZSBmb3IgYG9sZERvbWAgd2hpY2ggY2FuIG1lYW4gdG8gc2tpcCB0byB0aGlzIGxvZ2ljXG5cdC8vIChlLmcuIGlmIG1vdW50aW5nIGEgbmV3IHRyZWUgaW4gd2hpY2ggdGhlIG9sZCBET00gc2hvdWxkIGJlIGlnbm9yZWQgKHVzdWFsbHkgZm9yIEZyYWdtZW50cykuXG5cdGlmIChvbGREb20gPT0gRU1QVFlfT0JKKSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdG9sZERvbSA9IGV4Y2Vzc0RvbUNoaWxkcmVuWzBdO1xuXHRcdH0gZWxzZSBpZiAob2xkQ2hpbGRyZW5MZW5ndGgpIHtcblx0XHRcdG9sZERvbSA9IGdldERvbVNpYmxpbmcob2xkUGFyZW50Vk5vZGUsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvbGREb20gPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGkgPSAwO1xuXHRuZXdQYXJlbnRWTm9kZS5fY2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoXG5cdFx0bmV3UGFyZW50Vk5vZGUuX2NoaWxkcmVuLFxuXHRcdGNoaWxkVk5vZGUgPT4ge1xuXHRcdFx0aWYgKGNoaWxkVk5vZGUgIT0gbnVsbCkge1xuXHRcdFx0XHRjaGlsZFZOb2RlLl9wYXJlbnQgPSBuZXdQYXJlbnRWTm9kZTtcblx0XHRcdFx0Y2hpbGRWTm9kZS5fZGVwdGggPSBuZXdQYXJlbnRWTm9kZS5fZGVwdGggKyAxO1xuXG5cdFx0XHRcdC8vIENoZWNrIGlmIHdlIGZpbmQgYSBjb3JyZXNwb25kaW5nIGVsZW1lbnQgaW4gb2xkQ2hpbGRyZW4uXG5cdFx0XHRcdC8vIElmIGZvdW5kLCBkZWxldGUgdGhlIGFycmF5IGl0ZW0gYnkgc2V0dGluZyB0byBgdW5kZWZpbmVkYC5cblx0XHRcdFx0Ly8gV2UgdXNlIGB1bmRlZmluZWRgLCBhcyBgbnVsbGAgaXMgcmVzZXJ2ZWQgZm9yIGVtcHR5IHBsYWNlaG9sZGVyc1xuXHRcdFx0XHQvLyAoaG9sZXMpLlxuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRvbGRWTm9kZSA9PT0gbnVsbCB8fFxuXHRcdFx0XHRcdChvbGRWTm9kZSAmJlxuXHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdFx0XHRjaGlsZFZOb2RlLnR5cGUgPT09IG9sZFZOb2RlLnR5cGUpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdG9sZENoaWxkcmVuW2ldID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEVpdGhlciBvbGRWTm9kZSA9PT0gdW5kZWZpbmVkIG9yIG9sZENoaWxkcmVuTGVuZ3RoID4gMCxcblx0XHRcdFx0XHQvLyBzbyBhZnRlciB0aGlzIGxvb3Agb2xkVk5vZGUgPT0gbnVsbCBvciBvbGRWTm9kZSBpcyBhIHZhbGlkIHZhbHVlLlxuXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBvbGRDaGlsZHJlbkxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2pdO1xuXHRcdFx0XHRcdFx0Ly8gSWYgY2hpbGRWTm9kZSBpcyB1bmtleWVkLCB3ZSBvbmx5IG1hdGNoIHNpbWlsYXJseSB1bmtleWVkIG5vZGVzLCBvdGhlcndpc2Ugd2UgbWF0Y2ggYnkga2V5LlxuXHRcdFx0XHRcdFx0Ly8gV2UgYWx3YXlzIG1hdGNoIGJ5IHR5cGUgKGluIGVpdGhlciBjYXNlKS5cblx0XHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdFx0b2xkVk5vZGUgJiZcblx0XHRcdFx0XHRcdFx0Y2hpbGRWTm9kZS5rZXkgPT0gb2xkVk5vZGUua2V5ICYmXG5cdFx0XHRcdFx0XHRcdGNoaWxkVk5vZGUudHlwZSA9PT0gb2xkVk5vZGUudHlwZVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdG9sZENoaWxkcmVuW2pdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9sZFZOb2RlID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvbGRWTm9kZSA9IG9sZFZOb2RlIHx8IEVNUFRZX09CSjtcblxuXHRcdFx0XHQvLyBNb3JwaCB0aGUgb2xkIGVsZW1lbnQgaW50byB0aGUgbmV3IG9uZSwgYnV0IGRvbid0IGFwcGVuZCBpdCB0byB0aGUgZG9tIHlldFxuXHRcdFx0XHRuZXdEb20gPSBkaWZmKFxuXHRcdFx0XHRcdHBhcmVudERvbSxcblx0XHRcdFx0XHRjaGlsZFZOb2RlLFxuXHRcdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdFx0ZXhjZXNzRG9tQ2hpbGRyZW4sXG5cdFx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdFx0b2xkRG9tLFxuXHRcdFx0XHRcdGlzSHlkcmF0aW5nXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKChqID0gY2hpbGRWTm9kZS5yZWYpICYmIG9sZFZOb2RlLnJlZiAhPSBqKSB7XG5cdFx0XHRcdFx0aWYgKCFyZWZzKSByZWZzID0gW107XG5cdFx0XHRcdFx0aWYgKG9sZFZOb2RlLnJlZikgcmVmcy5wdXNoKG9sZFZOb2RlLnJlZiwgbnVsbCwgY2hpbGRWTm9kZSk7XG5cdFx0XHRcdFx0cmVmcy5wdXNoKGosIGNoaWxkVk5vZGUuX2NvbXBvbmVudCB8fCBuZXdEb20sIGNoaWxkVk5vZGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT25seSBwcm9jZWVkIGlmIHRoZSB2bm9kZSBoYXMgbm90IGJlZW4gdW5tb3VudGVkIGJ5IGBkaWZmKClgIGFib3ZlLlxuXHRcdFx0XHRpZiAobmV3RG9tICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAoZmlyc3RDaGlsZERvbSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRmaXJzdENoaWxkRG9tID0gbmV3RG9tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0Ly8gT25seSBGcmFnbWVudHMgb3IgY29tcG9uZW50cyB0aGF0IHJldHVybiBGcmFnbWVudCBsaWtlIFZOb2RlcyB3aWxsXG5cdFx0XHRcdFx0XHQvLyBoYXZlIGEgbm9uLW51bGwgX2xhc3REb21DaGlsZC4gQ29udGludWUgdGhlIGRpZmYgZnJvbSB0aGUgZW5kIG9mXG5cdFx0XHRcdFx0XHQvLyB0aGlzIEZyYWdtZW50J3MgRE9NIHRyZWUuXG5cdFx0XHRcdFx0XHRuZXdEb20gPSBjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQ7XG5cblx0XHRcdFx0XHRcdC8vIEVhZ2VybHkgY2xlYW51cCBfbGFzdERvbUNoaWxkLiBXZSBkb24ndCBuZWVkIHRvIHBlcnNpc3QgdGhlIHZhbHVlIGJlY2F1c2Vcblx0XHRcdFx0XHRcdC8vIGl0IGlzIG9ubHkgdXNlZCBieSBgZGlmZkNoaWxkcmVuYCB0byBkZXRlcm1pbmUgd2hlcmUgdG8gcmVzdW1lIHRoZSBkaWZmIGFmdGVyXG5cdFx0XHRcdFx0XHQvLyBkaWZmaW5nIENvbXBvbmVudHMgYW5kIEZyYWdtZW50cy5cblx0XHRcdFx0XHRcdGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCA9IG51bGw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID09IG9sZFZOb2RlIHx8XG5cdFx0XHRcdFx0XHRuZXdEb20gIT0gb2xkRG9tIHx8XG5cdFx0XHRcdFx0XHRuZXdEb20ucGFyZW50Tm9kZSA9PSBudWxsXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHQvLyBOT1RFOiBleGNlc3NEb21DaGlsZHJlbj09b2xkVk5vZGUgYWJvdmU6XG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgY29tcHJlc3Npb24gb2YgZXhjZXNzRG9tQ2hpbGRyZW49PW51bGwgJiYgb2xkVk5vZGU9PW51bGwhXG5cdFx0XHRcdFx0XHQvLyBUaGUgdmFsdWVzIG9ubHkgaGF2ZSB0aGUgc2FtZSB0eXBlIHdoZW4gYG51bGxgLlxuXG5cdFx0XHRcdFx0XHRvdXRlcjogaWYgKG9sZERvbSA9PSBudWxsIHx8IG9sZERvbS5wYXJlbnROb2RlICE9PSBwYXJlbnREb20pIHtcblx0XHRcdFx0XHRcdFx0cGFyZW50RG9tLmFwcGVuZENoaWxkKG5ld0RvbSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBgajxvbGRDaGlsZHJlbkxlbmd0aDsgais9MmAgaXMgYW4gYWx0ZXJuYXRpdmUgdG8gYGorKzxvbGRDaGlsZHJlbkxlbmd0aC8yYFxuXHRcdFx0XHRcdFx0XHRmb3IgKFxuXHRcdFx0XHRcdFx0XHRcdHNpYkRvbSA9IG9sZERvbSwgaiA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0KHNpYkRvbSA9IHNpYkRvbS5uZXh0U2libGluZykgJiYgaiA8IG9sZENoaWxkcmVuTGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdGogKz0gMlxuXHRcdFx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc2liRG9tID09IG5ld0RvbSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWsgb3V0ZXI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHBhcmVudERvbS5pbnNlcnRCZWZvcmUobmV3RG9tLCBvbGREb20pO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBCcm93c2VycyB3aWxsIGluZmVyIGFuIG9wdGlvbidzIGB2YWx1ZWAgZnJvbSBgdGV4dENvbnRlbnRgIHdoZW5cblx0XHRcdFx0XHRcdC8vIG5vIHZhbHVlIGlzIHByZXNlbnQuIFRoaXMgZXNzZW50aWFsbHkgYnlwYXNzZXMgb3VyIGNvZGUgdG8gc2V0IGl0XG5cdFx0XHRcdFx0XHQvLyBsYXRlciBpbiBgZGlmZigpYC4gSXQgd29ya3MgZmluZSBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IGZvciBJRTExXG5cdFx0XHRcdFx0XHQvLyB3aGVyZSBpdCBicmVha3Mgc2V0dGluZyBgc2VsZWN0LnZhbHVlYC4gVGhlcmUgaXQgd2lsbCBiZSBhbHdheXMgc2V0XG5cdFx0XHRcdFx0XHQvLyB0byBhbiBlbXB0eSBzdHJpbmcuIFJlLWFwcGx5aW5nIGFuIG9wdGlvbnMgdmFsdWUgd2lsbCBmaXggdGhhdCwgc29cblx0XHRcdFx0XHRcdC8vIHRoZXJlIGFyZSBwcm9iYWJseSBzb21lIGludGVybmFsIGRhdGEgc3RydWN0dXJlcyB0aGF0IGFyZW4ndFxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlZCBwcm9wZXJseS5cblx0XHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0XHQvLyBUbyBmaXggaXQgd2UgbWFrZSBzdXJlIHRvIHJlc2V0IHRoZSBpbmZlcnJlZCB2YWx1ZSwgc28gdGhhdCBvdXIgb3duXG5cdFx0XHRcdFx0XHQvLyB2YWx1ZSBjaGVjayBpbiBgZGlmZigpYCB3b24ndCBiZSBza2lwcGVkLlxuXHRcdFx0XHRcdFx0aWYgKG5ld1BhcmVudFZOb2RlLnR5cGUgPT0gJ29wdGlvbicpIHtcblx0XHRcdFx0XHRcdFx0cGFyZW50RG9tLnZhbHVlID0gJyc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b2xkRG9tID0gbmV3RG9tLm5leHRTaWJsaW5nO1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBuZXdQYXJlbnRWTm9kZS50eXBlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGlmIGNoaWxkVk5vZGUuX2xhc3REb21DaGlsZCBleGlzdGVkLCB0aGVuXG5cdFx0XHRcdFx0XHQvLyBuZXdEb20gPSBjaGlsZFZOb2RlLl9sYXN0RG9tQ2hpbGQgcGVyIGxpbmUgMTAxLiBFbHNlIGl0IGlzXG5cdFx0XHRcdFx0XHQvLyB0aGUgc2FtZSBhcyBjaGlsZFZOb2RlLl9kb20sIG1lYW5pbmcgdGhpcyBjb21wb25lbnQgcmV0dXJuZWRcblx0XHRcdFx0XHRcdC8vIG9ubHkgYSBzaW5nbGUgRE9NIG5vZGVcblx0XHRcdFx0XHRcdG5ld1BhcmVudFZOb2RlLl9sYXN0RG9tQ2hpbGQgPSBuZXdEb207XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkrKztcblx0XHRcdHJldHVybiBjaGlsZFZOb2RlO1xuXHRcdH1cblx0KTtcblxuXHRuZXdQYXJlbnRWTm9kZS5fZG9tID0gZmlyc3RDaGlsZERvbTtcblxuXHQvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm90IHBhcnQgb2YgYW55IHZub2RlLlxuXHRpZiAoZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCAmJiB0eXBlb2YgbmV3UGFyZW50Vk5vZGUudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdGZvciAoaSA9IGV4Y2Vzc0RvbUNoaWxkcmVuLmxlbmd0aDsgaS0tOyApIHtcblx0XHRcdGlmIChleGNlc3NEb21DaGlsZHJlbltpXSAhPSBudWxsKSByZW1vdmVOb2RlKGV4Y2Vzc0RvbUNoaWxkcmVuW2ldKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgcmVtYWluaW5nIG9sZENoaWxkcmVuIGlmIHRoZXJlIGFyZSBhbnkuXG5cdGZvciAoaSA9IG9sZENoaWxkcmVuTGVuZ3RoOyBpLS07ICkge1xuXHRcdGlmIChvbGRDaGlsZHJlbltpXSAhPSBudWxsKSB1bm1vdW50KG9sZENoaWxkcmVuW2ldLCBvbGRDaGlsZHJlbltpXSk7XG5cdH1cblxuXHQvLyBTZXQgcmVmcyBvbmx5IGFmdGVyIHVubW91bnRcblx0aWYgKHJlZnMpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcmVmcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0YXBwbHlSZWYocmVmc1tpXSwgcmVmc1srK2ldLCByZWZzWysraV0pO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEZsYXR0ZW4gYW5kIGxvb3AgdGhyb3VnaCB0aGUgY2hpbGRyZW4gb2YgYSB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbmRleCcpLkNvbXBvbmVudENoaWxkcmVufSBjaGlsZHJlbiBUaGUgdW5mbGF0dGVuZWRcbiAqIGNoaWxkcmVuIG9mIGEgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0geyh2bm9kZTogaW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlKSA9PiBpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IFtjYWxsYmFja11cbiAqIEEgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGNoaWxkIGJlZm9yZSBpdCBpcyBhZGRlZCB0byB0aGUgZmxhdHRlbmVkIGxpc3QuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZSB8IHN0cmluZyB8IG51bWJlcj59IFtmbGF0dGVuZWRdIEFuIGZsYXQgYXJyYXkgb2YgY2hpbGRyZW4gdG8gbW9kaWZ5XG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0NoaWxkQXJyYXkoY2hpbGRyZW4sIGNhbGxiYWNrLCBmbGF0dGVuZWQpIHtcblx0aWYgKGZsYXR0ZW5lZCA9PSBudWxsKSBmbGF0dGVuZWQgPSBbXTtcblxuXHRpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGRyZW4gPT09ICdib29sZWFuJykge1xuXHRcdGlmIChjYWxsYmFjaykgZmxhdHRlbmVkLnB1c2goY2FsbGJhY2sobnVsbCkpO1xuXHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dG9DaGlsZEFycmF5KGNoaWxkcmVuW2ldLCBjYWxsYmFjaywgZmxhdHRlbmVkKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIWNhbGxiYWNrKSB7XG5cdFx0ZmxhdHRlbmVkLnB1c2goY2hpbGRyZW4pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNoaWxkcmVuID09PSAnbnVtYmVyJykge1xuXHRcdGZsYXR0ZW5lZC5wdXNoKGNhbGxiYWNrKGNyZWF0ZVZOb2RlKG51bGwsIGNoaWxkcmVuLCBudWxsLCBudWxsKSkpO1xuXHR9IGVsc2UgaWYgKGNoaWxkcmVuLl9kb20gIT0gbnVsbCB8fCBjaGlsZHJlbi5fY29tcG9uZW50ICE9IG51bGwpIHtcblx0XHRmbGF0dGVuZWQucHVzaChcblx0XHRcdGNhbGxiYWNrKGNyZWF0ZVZOb2RlKGNoaWxkcmVuLnR5cGUsIGNoaWxkcmVuLnByb3BzLCBjaGlsZHJlbi5rZXksIG51bGwpKVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0ZmxhdHRlbmVkLnB1c2goY2FsbGJhY2soY2hpbGRyZW4pKTtcblx0fVxuXG5cdHJldHVybiBmbGF0dGVuZWQ7XG59XG4iLCJpbXBvcnQgeyBJU19OT05fRElNRU5TSU9OQUwgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5cbi8qKlxuICogRGlmZiB0aGUgb2xkIGFuZCBuZXcgcHJvcGVydGllcyBvZiBhIFZOb2RlIGFuZCBhcHBseSBjaGFuZ2VzIHRvIHRoZSBET00gbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH0gZG9tIFRoZSBET00gbm9kZSB0byBhcHBseVxuICogY2hhbmdlcyB0b1xuICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFRoZSBuZXcgcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBUaGUgb2xkIHByb3BzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgbm9kZSBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtib29sZWFufSBoeWRyYXRlIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb24gbW9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZlByb3BzKGRvbSwgbmV3UHJvcHMsIG9sZFByb3BzLCBpc1N2ZywgaHlkcmF0ZSkge1xuXHRsZXQgaTtcblxuXHRmb3IgKGkgaW4gb2xkUHJvcHMpIHtcblx0XHRpZiAoIShpIGluIG5ld1Byb3BzKSkge1xuXHRcdFx0c2V0UHJvcGVydHkoZG9tLCBpLCBudWxsLCBvbGRQcm9wc1tpXSwgaXNTdmcpO1xuXHRcdH1cblx0fVxuXG5cdGZvciAoaSBpbiBuZXdQcm9wcykge1xuXHRcdGlmIChcblx0XHRcdCghaHlkcmF0ZSB8fCB0eXBlb2YgbmV3UHJvcHNbaV0gPT0gJ2Z1bmN0aW9uJykgJiZcblx0XHRcdGkgIT09ICd2YWx1ZScgJiZcblx0XHRcdGkgIT09ICdjaGVja2VkJyAmJlxuXHRcdFx0b2xkUHJvcHNbaV0gIT09IG5ld1Byb3BzW2ldXG5cdFx0KSB7XG5cdFx0XHRzZXRQcm9wZXJ0eShkb20sIGksIG5ld1Byb3BzW2ldLCBvbGRQcm9wc1tpXSwgaXNTdmcpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwga2V5LCB2YWx1ZSkge1xuXHRpZiAoa2V5WzBdID09PSAnLScpIHtcblx0XHRzdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcblx0fSBlbHNlIGlmIChcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmXG5cdFx0SVNfTk9OX0RJTUVOU0lPTkFMLnRlc3Qoa2V5KSA9PT0gZmFsc2Vcblx0KSB7XG5cdFx0c3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jztcblx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0c3R5bGVba2V5XSA9ICcnO1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlW2tleV0gPSB2YWx1ZTtcblx0fVxufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IHZhbHVlIG9uIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIG5vZGUgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgdGhlIHByb3BlcnR5IHRvXG4gKiBAcGFyYW0geyp9IG9sZFZhbHVlIFRoZSBvbGQgdmFsdWUgdGhlIHByb3BlcnR5IGhhZFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlIG9yIG5vdFxuICovXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShkb20sIG5hbWUsIHZhbHVlLCBvbGRWYWx1ZSwgaXNTdmcpIHtcblx0aWYgKGlzU3ZnKSB7XG5cdFx0aWYgKG5hbWUgPT09ICdjbGFzc05hbWUnKSB7XG5cdFx0XHRuYW1lID0gJ2NsYXNzJztcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsYXNzJykge1xuXHRcdG5hbWUgPSAnY2xhc3NOYW1lJztcblx0fVxuXG5cdGlmIChuYW1lID09PSAna2V5JyB8fCBuYW1lID09PSAnY2hpbGRyZW4nKSB7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuXHRcdGNvbnN0IHMgPSBkb20uc3R5bGU7XG5cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0cy5jc3NUZXh0ID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2Ygb2xkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHMuY3NzVGV4dCA9ICcnO1xuXHRcdFx0XHRvbGRWYWx1ZSA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvbGRWYWx1ZSkge1xuXHRcdFx0XHRmb3IgKGxldCBpIGluIG9sZFZhbHVlKSB7XG5cdFx0XHRcdFx0aWYgKCEodmFsdWUgJiYgaSBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHNldFN0eWxlKHMsIGksICcnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdGZvciAobGV0IGkgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRpZiAoIW9sZFZhbHVlIHx8IHZhbHVlW2ldICE9PSBvbGRWYWx1ZVtpXSkge1xuXHRcdFx0XHRcdFx0c2V0U3R5bGUocywgaSwgdmFsdWVbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBCZW5jaG1hcmsgZm9yIGNvbXBhcmlzb246IGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNTc0Yzk1NGJkYjk2NWI5YTAwOTY1YWM2XG5cdGVsc2UgaWYgKG5hbWVbMF0gPT09ICdvJyAmJiBuYW1lWzFdID09PSAnbicpIHtcblx0XHRsZXQgdXNlQ2FwdHVyZSA9IG5hbWUgIT09IChuYW1lID0gbmFtZS5yZXBsYWNlKC9DYXB0dXJlJC8sICcnKSk7XG5cdFx0bGV0IG5hbWVMb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRuYW1lID0gKG5hbWVMb3dlciBpbiBkb20gPyBuYW1lTG93ZXIgOiBuYW1lKS5zbGljZSgyKTtcblxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0aWYgKCFvbGRWYWx1ZSkgZG9tLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZXZlbnRQcm94eSwgdXNlQ2FwdHVyZSk7XG5cdFx0XHQoZG9tLl9saXN0ZW5lcnMgfHwgKGRvbS5fbGlzdGVuZXJzID0ge30pKVtuYW1lXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudFByb3h5LCB1c2VDYXB0dXJlKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoXG5cdFx0bmFtZSAhPT0gJ2xpc3QnICYmXG5cdFx0bmFtZSAhPT0gJ3RhZ05hbWUnICYmXG5cdFx0Ly8gSFRNTEJ1dHRvbkVsZW1lbnQuZm9ybSBhbmQgSFRNTElucHV0RWxlbWVudC5mb3JtIGFyZSByZWFkLW9ubHkgYnV0IGNhbiBiZSBzZXQgdXNpbmdcblx0XHQvLyBzZXRBdHRyaWJ1dGVcblx0XHRuYW1lICE9PSAnZm9ybScgJiZcblx0XHRuYW1lICE9PSAndHlwZScgJiZcblx0XHQhaXNTdmcgJiZcblx0XHRuYW1lIGluIGRvbVxuXHQpIHtcblx0XHRkb21bbmFtZV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcblx0fSBlbHNlIGlmIChcblx0XHR0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiZcblx0XHRuYW1lICE9PSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnXG5cdCkge1xuXHRcdGlmIChuYW1lICE9PSAobmFtZSA9IG5hbWUucmVwbGFjZSgvXnhsaW5rOj8vLCAnJykpKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZU5TKFxuXHRcdFx0XHRcdCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKClcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvbS5zZXRBdHRyaWJ1dGVOUyhcblx0XHRcdFx0XHQnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsXG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdHZhbHVlXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0ZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9tLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogUHJveHkgYW4gZXZlbnQgdG8gaG9va2VkIGV2ZW50IGhhbmRsZXJzXG4gKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBldmVudCBvYmplY3QgZnJvbSB0aGUgYnJvd3NlclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXZlbnRQcm94eShlKSB7XG5cdHRoaXMuX2xpc3RlbmVyc1tlLnR5cGVdKG9wdGlvbnMuZXZlbnQgPyBvcHRpb25zLmV2ZW50KGUpIDogZSk7XG59XG4iLCJpbXBvcnQgeyBFTVBUWV9PQkosIEVNUFRZX0FSUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICcuLi9jcmVhdGUtZWxlbWVudCc7XG5pbXBvcnQgeyBkaWZmQ2hpbGRyZW4sIHRvQ2hpbGRBcnJheSB9IGZyb20gJy4vY2hpbGRyZW4nO1xuaW1wb3J0IHsgZGlmZlByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XG5pbXBvcnQgeyBhc3NpZ24sIHJlbW92ZU5vZGUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4uL29wdGlvbnMnO1xuXG4vKipcbiAqIERpZmYgdHdvIHZpcnR1YWwgbm9kZXMgYW5kIGFwcGx5IHByb3BlciBjaGFuZ2VzIHRvIHRoZSBET01cbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IHBhcmVudERvbSBUaGUgcGFyZW50IG9mIHRoZSBET00gZWxlbWVudFxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG5ld1ZOb2RlIFRoZSBuZXcgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gb2xkVk5vZGUgVGhlIG9sZCB2aXJ0dWFsIG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBjdXJyZW50IGNvbnRleHQgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU3ZnIFdoZXRoZXIgb3Igbm90IHRoaXMgZWxlbWVudCBpcyBhbiBTVkcgbm9kZVxuICogQHBhcmFtIHtBcnJheTxpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudD59IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge0VsZW1lbnQgfCBUZXh0fSBvbGREb20gVGhlIGN1cnJlbnQgYXR0YWNoZWQgRE9NXG4gKiBlbGVtZW50IGFueSBuZXcgZG9tIGVsZW1lbnRzIHNob3VsZCBiZSBwbGFjZWQgYXJvdW5kLiBMaWtlbHkgYG51bGxgIG9uIGZpcnN0XG4gKiByZW5kZXIgKGV4Y2VwdCB3aGVuIGh5ZHJhdGluZykuIENhbiBiZSBhIHNpYmxpbmcgRE9NIGVsZW1lbnQgd2hlbiBkaWZmaW5nXG4gKiBGcmFnbWVudHMgdGhhdCBoYXZlIHNpYmxpbmdzLiBJbiBtb3N0IGNhc2VzLCBpdCBzdGFydHMgb3V0IGFzIGBvbGRDaGlsZHJlblswXS5fZG9tYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzSHlkcmF0aW5nXSBXaGV0aGVyIG9yIG5vdCB3ZSBhcmUgaW4gaHlkcmF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmKFxuXHRwYXJlbnREb20sXG5cdG5ld1ZOb2RlLFxuXHRvbGRWTm9kZSxcblx0Y29udGV4dCxcblx0aXNTdmcsXG5cdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRjb21taXRRdWV1ZSxcblx0b2xkRG9tLFxuXHRpc0h5ZHJhdGluZ1xuKSB7XG5cdGxldCB0bXAsXG5cdFx0bmV3VHlwZSA9IG5ld1ZOb2RlLnR5cGU7XG5cblx0Ly8gV2hlbiBwYXNzaW5nIHRocm91Z2ggY3JlYXRlRWxlbWVudCBpdCBhc3NpZ25zIHRoZSBvYmplY3Rcblx0Ly8gY29uc3RydWN0b3IgYXMgdW5kZWZpbmVkLiBUaGlzIHRvIHByZXZlbnQgSlNPTi1pbmplY3Rpb24uXG5cdGlmIChuZXdWTm9kZS5jb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcblxuXHRpZiAoKHRtcCA9IG9wdGlvbnMuX2RpZmYpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdHRyeSB7XG5cdFx0b3V0ZXI6IGlmICh0eXBlb2YgbmV3VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0bGV0IGMsIGlzTmV3LCBvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90LCBjbGVhclByb2Nlc3NpbmdFeGNlcHRpb247XG5cdFx0XHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblxuXHRcdFx0Ly8gTmVjZXNzYXJ5IGZvciBjcmVhdGVDb250ZXh0IGFwaS4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHdpbGwgcGFzc1xuXHRcdFx0Ly8gdGhlIGNvbnRleHQgdmFsdWUgYXMgYHRoaXMuY29udGV4dGAganVzdCBmb3IgdGhpcyBjb21wb25lbnQuXG5cdFx0XHR0bXAgPSBuZXdUeXBlLmNvbnRleHRUeXBlO1xuXHRcdFx0bGV0IHByb3ZpZGVyID0gdG1wICYmIGNvbnRleHRbdG1wLl9pZF07XG5cdFx0XHRsZXQgY2N0eCA9IHRtcFxuXHRcdFx0XHQ/IHByb3ZpZGVyXG5cdFx0XHRcdFx0PyBwcm92aWRlci5wcm9wcy52YWx1ZVxuXHRcdFx0XHRcdDogdG1wLl9kZWZhdWx0VmFsdWVcblx0XHRcdFx0OiBjb250ZXh0O1xuXG5cdFx0XHQvLyBHZXQgY29tcG9uZW50IGFuZCBzZXQgaXQgdG8gYGNgXG5cdFx0XHRpZiAob2xkVk5vZGUuX2NvbXBvbmVudCkge1xuXHRcdFx0XHRjID0gbmV3Vk5vZGUuX2NvbXBvbmVudCA9IG9sZFZOb2RlLl9jb21wb25lbnQ7XG5cdFx0XHRcdGNsZWFyUHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IGMuX3Byb2Nlc3NpbmdFeGNlcHRpb24gPSBjLl9wZW5kaW5nRXJyb3I7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJbnN0YW50aWF0ZSB0aGUgbmV3IGNvbXBvbmVudFxuXHRcdFx0XHRpZiAoJ3Byb3RvdHlwZScgaW4gbmV3VHlwZSAmJiBuZXdUeXBlLnByb3RvdHlwZS5yZW5kZXIpIHtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY29tcG9uZW50ID0gYyA9IG5ldyBuZXdUeXBlKG5ld1Byb3BzLCBjY3R4KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV3Vk5vZGUuX2NvbXBvbmVudCA9IGMgPSBuZXcgQ29tcG9uZW50KG5ld1Byb3BzLCBjY3R4KTtcblx0XHRcdFx0XHRjLmNvbnN0cnVjdG9yID0gbmV3VHlwZTtcblx0XHRcdFx0XHRjLnJlbmRlciA9IGRvUmVuZGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcm92aWRlcikgcHJvdmlkZXIuc3ViKGMpO1xuXG5cdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0aWYgKCFjLnN0YXRlKSBjLnN0YXRlID0ge307XG5cdFx0XHRcdGMuY29udGV4dCA9IGNjdHg7XG5cdFx0XHRcdGMuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRpc05ldyA9IGMuX2RpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcblx0XHRcdGlmIChjLl9uZXh0U3RhdGUgPT0gbnVsbCkge1xuXHRcdFx0XHRjLl9uZXh0U3RhdGUgPSBjLnN0YXRlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKGMuX25leHRTdGF0ZSA9PSBjLnN0YXRlKSB7XG5cdFx0XHRcdFx0Yy5fbmV4dFN0YXRlID0gYXNzaWduKHt9LCBjLl9uZXh0U3RhdGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXNzaWduKFxuXHRcdFx0XHRcdGMuX25leHRTdGF0ZSxcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXdQcm9wcywgYy5fbmV4dFN0YXRlKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRvbGRQcm9wcyA9IGMucHJvcHM7XG5cdFx0XHRvbGRTdGF0ZSA9IGMuc3RhdGU7XG5cblx0XHRcdC8vIEludm9rZSBwcmUtcmVuZGVyIGxpZmVjeWNsZSBtZXRob2RzXG5cdFx0XHRpZiAoaXNOZXcpIHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdG5ld1R5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09IG51bGwgJiZcblx0XHRcdFx0XHRjLmNvbXBvbmVudFdpbGxNb3VudCAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYy5jb21wb25lbnREaWRNb3VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goYy5jb21wb25lbnREaWRNb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRuZXdUeXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PSBudWxsICYmXG5cdFx0XHRcdFx0bmV3UHJvcHMgIT09IG9sZFByb3BzICYmXG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICE9IG51bGxcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBjY3R4KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHQhYy5fZm9yY2UgJiZcblx0XHRcdFx0XHRjLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPSBudWxsICYmXG5cdFx0XHRcdFx0Yy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIGMuX25leHRTdGF0ZSwgY2N0eCkgPT09IGZhbHNlXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGMucHJvcHMgPSBuZXdQcm9wcztcblx0XHRcdFx0XHRjLnN0YXRlID0gYy5fbmV4dFN0YXRlO1xuXHRcdFx0XHRcdGMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdFx0XHRuZXdWTm9kZS5fZG9tID0gb2xkVk5vZGUuX2RvbTtcblx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBvbGRWTm9kZS5fY2hpbGRyZW47XG5cdFx0XHRcdFx0aWYgKGMuX3JlbmRlckNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZvciAodG1wID0gMDsgdG1wIDwgbmV3Vk5vZGUuX2NoaWxkcmVuLmxlbmd0aDsgdG1wKyspIHtcblx0XHRcdFx0XHRcdGlmIChuZXdWTm9kZS5fY2hpbGRyZW5bdG1wXSkge1xuXHRcdFx0XHRcdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW5bdG1wXS5fcGFyZW50ID0gbmV3Vk5vZGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrIG91dGVyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50V2lsbFVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0Yy5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBjLl9uZXh0U3RhdGUsIGNjdHgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGMuY29tcG9uZW50RGlkVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0XHRjLl9yZW5kZXJDYWxsYmFja3MucHVzaCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRjLmNvbXBvbmVudERpZFVwZGF0ZShvbGRQcm9wcywgb2xkU3RhdGUsIHNuYXBzaG90KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjLmNvbnRleHQgPSBjY3R4O1xuXHRcdFx0Yy5wcm9wcyA9IG5ld1Byb3BzO1xuXHRcdFx0Yy5zdGF0ZSA9IGMuX25leHRTdGF0ZTtcblxuXHRcdFx0aWYgKCh0bXAgPSBvcHRpb25zLl9yZW5kZXIpKSB0bXAobmV3Vk5vZGUpO1xuXG5cdFx0XHRjLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0Yy5fdm5vZGUgPSBuZXdWTm9kZTtcblx0XHRcdGMuX3BhcmVudERvbSA9IHBhcmVudERvbTtcblxuXHRcdFx0dG1wID0gYy5yZW5kZXIoYy5wcm9wcywgYy5zdGF0ZSwgYy5jb250ZXh0KTtcblx0XHRcdGxldCBpc1RvcExldmVsRnJhZ21lbnQgPVxuXHRcdFx0XHR0bXAgIT0gbnVsbCAmJiB0bXAudHlwZSA9PSBGcmFnbWVudCAmJiB0bXAua2V5ID09IG51bGw7XG5cdFx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoXG5cdFx0XHRcdGlzVG9wTGV2ZWxGcmFnbWVudCA/IHRtcC5wcm9wcy5jaGlsZHJlbiA6IHRtcFxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKGMuZ2V0Q2hpbGRDb250ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0Y29udGV4dCA9IGFzc2lnbihhc3NpZ24oe30sIGNvbnRleHQpLCBjLmdldENoaWxkQ29udGV4dCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpc05ldyAmJiBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9IG51bGwpIHtcblx0XHRcdFx0c25hcHNob3QgPSBjLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKG9sZFByb3BzLCBvbGRTdGF0ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGRpZmZDaGlsZHJlbihcblx0XHRcdFx0cGFyZW50RG9tLFxuXHRcdFx0XHRuZXdWTm9kZSxcblx0XHRcdFx0b2xkVk5vZGUsXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdG9sZERvbSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cblx0XHRcdGMuYmFzZSA9IG5ld1ZOb2RlLl9kb207XG5cblx0XHRcdGlmIChjLl9yZW5kZXJDYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbW1pdFF1ZXVlLnB1c2goYyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjbGVhclByb2Nlc3NpbmdFeGNlcHRpb24pIHtcblx0XHRcdFx0Yy5fcGVuZGluZ0Vycm9yID0gYy5fcHJvY2Vzc2luZ0V4Y2VwdGlvbiA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGMuX2ZvcmNlID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3Vk5vZGUuX2RvbSA9IGRpZmZFbGVtZW50Tm9kZXMoXG5cdFx0XHRcdG9sZFZOb2RlLl9kb20sXG5cdFx0XHRcdG5ld1ZOb2RlLFxuXHRcdFx0XHRvbGRWTm9kZSxcblx0XHRcdFx0Y29udGV4dCxcblx0XHRcdFx0aXNTdmcsXG5cdFx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuLFxuXHRcdFx0XHRjb21taXRRdWV1ZSxcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCh0bXAgPSBvcHRpb25zLmRpZmZlZCkpIHRtcChuZXdWTm9kZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIG5ld1ZOb2RlLCBvbGRWTm9kZSk7XG5cdH1cblxuXHRyZXR1cm4gbmV3Vk5vZGUuX2RvbTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gcm9vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWl0Um9vdChjb21taXRRdWV1ZSwgcm9vdCkge1xuXHRpZiAob3B0aW9ucy5fY29tbWl0KSBvcHRpb25zLl9jb21taXQocm9vdCwgY29tbWl0UXVldWUpO1xuXG5cdGNvbW1pdFF1ZXVlLnNvbWUoYyA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbW1pdFF1ZXVlID0gYy5fcmVuZGVyQ2FsbGJhY2tzO1xuXHRcdFx0Yy5fcmVuZGVyQ2FsbGJhY2tzID0gW107XG5cdFx0XHRjb21taXRRdWV1ZS5zb21lKGNiID0+IHtcblx0XHRcdFx0Y2IuY2FsbChjKTtcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG9wdGlvbnMuX2NhdGNoRXJyb3IoZSwgYy5fdm5vZGUpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogRGlmZiB0d28gdmlydHVhbCBub2RlcyByZXByZXNlbnRpbmcgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlByZWFjdEVsZW1lbnR9IGRvbSBUaGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nXG4gKiB0aGUgdmlydHVhbCBub2RlcyBiZWluZyBkaWZmZWRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBuZXdWTm9kZSBUaGUgbmV3IHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uL2ludGVybmFsJykuVk5vZGV9IG9sZFZOb2RlIFRoZSBvbGQgdmlydHVhbCBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBUaGUgY3VycmVudCBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBpc1N2ZyBXaGV0aGVyIG9yIG5vdCB0aGlzIERPTSBub2RlIGlzIGFuIFNWRyBub2RlXG4gKiBAcGFyYW0geyp9IGV4Y2Vzc0RvbUNoaWxkcmVuXG4gKiBAcGFyYW0ge0FycmF5PGltcG9ydCgnLi4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSBjb21taXRRdWV1ZSBMaXN0IG9mIGNvbXBvbmVudHNcbiAqIHdoaWNoIGhhdmUgY2FsbGJhY2tzIHRvIGludm9rZSBpbiBjb21taXRSb290XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzSHlkcmF0aW5nIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBpbiBoeWRyYXRpb25cbiAqIEByZXR1cm5zIHtpbXBvcnQoJy4uL2ludGVybmFsJykuUHJlYWN0RWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZGlmZkVsZW1lbnROb2Rlcyhcblx0ZG9tLFxuXHRuZXdWTm9kZSxcblx0b2xkVk5vZGUsXG5cdGNvbnRleHQsXG5cdGlzU3ZnLFxuXHRleGNlc3NEb21DaGlsZHJlbixcblx0Y29tbWl0UXVldWUsXG5cdGlzSHlkcmF0aW5nXG4pIHtcblx0bGV0IGk7XG5cdGxldCBvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzO1xuXHRsZXQgbmV3UHJvcHMgPSBuZXdWTm9kZS5wcm9wcztcblxuXHQvLyBUcmFja3MgZW50ZXJpbmcgYW5kIGV4aXRpbmcgU1ZHIG5hbWVzcGFjZSB3aGVuIGRlc2NlbmRpbmcgdGhyb3VnaCB0aGUgdHJlZS5cblx0aXNTdmcgPSBuZXdWTm9kZS50eXBlID09PSAnc3ZnJyB8fCBpc1N2ZztcblxuXHRpZiAoZG9tID09IG51bGwgJiYgZXhjZXNzRG9tQ2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdGZvciAoaSA9IDA7IGkgPCBleGNlc3NEb21DaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY2hpbGQgPSBleGNlc3NEb21DaGlsZHJlbltpXTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRjaGlsZCAhPSBudWxsICYmXG5cdFx0XHRcdChuZXdWTm9kZS50eXBlID09PSBudWxsXG5cdFx0XHRcdFx0PyBjaGlsZC5ub2RlVHlwZSA9PT0gM1xuXHRcdFx0XHRcdDogY2hpbGQubG9jYWxOYW1lID09PSBuZXdWTm9kZS50eXBlKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbSA9IGNoaWxkO1xuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbltpXSA9IG51bGw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gPT0gbnVsbCkge1xuXHRcdGlmIChuZXdWTm9kZS50eXBlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3UHJvcHMpO1xuXHRcdH1cblx0XHRkb20gPSBpc1N2Z1xuXHRcdFx0PyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmV3Vk5vZGUudHlwZSlcblx0XHRcdDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuZXdWTm9kZS50eXBlKTtcblx0XHQvLyB3ZSBjcmVhdGVkIGEgbmV3IHBhcmVudCwgc28gbm9uZSBvZiB0aGUgcHJldmlvdXNseSBhdHRhY2hlZCBjaGlsZHJlbiBjYW4gYmUgcmV1c2VkOlxuXHRcdGV4Y2Vzc0RvbUNoaWxkcmVuID0gbnVsbDtcblx0fVxuXG5cdGlmIChuZXdWTm9kZS50eXBlID09PSBudWxsKSB7XG5cdFx0aWYgKGV4Y2Vzc0RvbUNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdGV4Y2Vzc0RvbUNoaWxkcmVuW2V4Y2Vzc0RvbUNoaWxkcmVuLmluZGV4T2YoZG9tKV0gPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgZG9tLmRhdGEgIT0gbmV3UHJvcHMpIHtcblx0XHRcdGRvbS5kYXRhID0gbmV3UHJvcHM7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5ld1ZOb2RlICE9PSBvbGRWTm9kZSkge1xuXHRcdGlmIChleGNlc3NEb21DaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRleGNlc3NEb21DaGlsZHJlbiA9IEVNUFRZX0FSUi5zbGljZS5jYWxsKGRvbS5jaGlsZE5vZGVzKTtcblx0XHR9XG5cblx0XHRvbGRQcm9wcyA9IG9sZFZOb2RlLnByb3BzIHx8IEVNUFRZX09CSjtcblxuXHRcdGxldCBvbGRIdG1sID0gb2xkUHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG5cdFx0bGV0IG5ld0h0bWwgPSBuZXdQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcblxuXHRcdC8vIER1cmluZyBoeWRyYXRpb24sIHByb3BzIGFyZSBub3QgZGlmZmVkIGF0IGFsbCAoaW5jbHVkaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKVxuXHRcdC8vIEBUT0RPIHdlIHNob3VsZCB3YXJuIGluIGRlYnVnIG1vZGUgd2hlbiBwcm9wcyBkb24ndCBtYXRjaCBoZXJlLlxuXHRcdGlmICghaXNIeWRyYXRpbmcpIHtcblx0XHRcdGlmIChvbGRQcm9wcyA9PT0gRU1QVFlfT0JKKSB7XG5cdFx0XHRcdG9sZFByb3BzID0ge307XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvbGRQcm9wc1tkb20uYXR0cmlidXRlc1tpXS5uYW1lXSA9IGRvbS5hdHRyaWJ1dGVzW2ldLnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZXdIdG1sIHx8IG9sZEh0bWwpIHtcblx0XHRcdFx0Ly8gQXZvaWQgcmUtYXBwbHlpbmcgdGhlIHNhbWUgJ19faHRtbCcgaWYgaXQgZGlkIG5vdCBjaGFuZ2VkIGJldHdlZW4gcmUtcmVuZGVyXG5cdFx0XHRcdGlmICghbmV3SHRtbCB8fCAhb2xkSHRtbCB8fCBuZXdIdG1sLl9faHRtbCAhPSBvbGRIdG1sLl9faHRtbCkge1xuXHRcdFx0XHRcdGRvbS5pbm5lckhUTUwgPSAobmV3SHRtbCAmJiBuZXdIdG1sLl9faHRtbCkgfHwgJyc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRkaWZmUHJvcHMoZG9tLCBuZXdQcm9wcywgb2xkUHJvcHMsIGlzU3ZnLCBpc0h5ZHJhdGluZyk7XG5cblx0XHRuZXdWTm9kZS5fY2hpbGRyZW4gPSBuZXdWTm9kZS5wcm9wcy5jaGlsZHJlbjtcblxuXHRcdC8vIElmIHRoZSBuZXcgdm5vZGUgZGlkbid0IGhhdmUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIGRpZmYgaXRzIGNoaWxkcmVuXG5cdFx0aWYgKCFuZXdIdG1sKSB7XG5cdFx0XHRkaWZmQ2hpbGRyZW4oXG5cdFx0XHRcdGRvbSxcblx0XHRcdFx0bmV3Vk5vZGUsXG5cdFx0XHRcdG9sZFZOb2RlLFxuXHRcdFx0XHRjb250ZXh0LFxuXHRcdFx0XHRuZXdWTm9kZS50eXBlID09PSAnZm9yZWlnbk9iamVjdCcgPyBmYWxzZSA6IGlzU3ZnLFxuXHRcdFx0XHRleGNlc3NEb21DaGlsZHJlbixcblx0XHRcdFx0Y29tbWl0UXVldWUsXG5cdFx0XHRcdEVNUFRZX09CSixcblx0XHRcdFx0aXNIeWRyYXRpbmdcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gKGFzIGFib3ZlLCBkb24ndCBkaWZmIHByb3BzIGR1cmluZyBoeWRyYXRpb24pXG5cdFx0aWYgKCFpc0h5ZHJhdGluZykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQndmFsdWUnIGluIG5ld1Byb3BzICYmXG5cdFx0XHRcdG5ld1Byb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0bmV3UHJvcHMudmFsdWUgIT09IGRvbS52YWx1ZVxuXHRcdFx0KSB7XG5cdFx0XHRcdGRvbS52YWx1ZSA9IG5ld1Byb3BzLnZhbHVlID09IG51bGwgPyAnJyA6IG5ld1Byb3BzLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKFxuXHRcdFx0XHQnY2hlY2tlZCcgaW4gbmV3UHJvcHMgJiZcblx0XHRcdFx0bmV3UHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdG5ld1Byb3BzLmNoZWNrZWQgIT09IGRvbS5jaGVja2VkXG5cdFx0XHQpIHtcblx0XHRcdFx0ZG9tLmNoZWNrZWQgPSBuZXdQcm9wcy5jaGVja2VkO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkb207XG59XG5cbi8qKlxuICogSW52b2tlIG9yIHVwZGF0ZSBhIHJlZiwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaXMgYSBmdW5jdGlvbiBvciBvYmplY3QgcmVmLlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHJlZlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UmVmKHJlZiwgdmFsdWUsIHZub2RlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKHR5cGVvZiByZWYgPT0gJ2Z1bmN0aW9uJykgcmVmKHZhbHVlKTtcblx0XHRlbHNlIHJlZi5jdXJyZW50ID0gdmFsdWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHZub2RlKTtcblx0fVxufVxuXG4vKipcbiAqIFVubW91bnQgYSB2aXJ0dWFsIG5vZGUgZnJvbSB0aGUgdHJlZSBhbmQgYXBwbHkgRE9NIGNoYW5nZXNcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSB2bm9kZSBUaGUgdmlydHVhbCBub2RlIHRvIHVubW91bnRcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLlZOb2RlfSBwYXJlbnRWTm9kZSBUaGUgcGFyZW50IG9mIHRoZSBWTm9kZSB0aGF0XG4gKiBpbml0aWF0ZWQgdGhlIHVubW91bnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3NraXBSZW1vdmVdIEZsYWcgdGhhdCBpbmRpY2F0ZXMgdGhhdCBhIHBhcmVudCBub2RlIG9mIHRoZVxuICogY3VycmVudCBlbGVtZW50IGlzIGFscmVhZHkgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpIHtcblx0bGV0IHI7XG5cdGlmIChvcHRpb25zLnVubW91bnQpIG9wdGlvbnMudW5tb3VudCh2bm9kZSk7XG5cblx0aWYgKChyID0gdm5vZGUucmVmKSkge1xuXHRcdGlmICghci5jdXJyZW50IHx8IHIuY3VycmVudCA9PT0gdm5vZGUuX2RvbSkgYXBwbHlSZWYociwgbnVsbCwgcGFyZW50Vk5vZGUpO1xuXHR9XG5cblx0bGV0IGRvbTtcblx0aWYgKCFza2lwUmVtb3ZlICYmIHR5cGVvZiB2bm9kZS50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0c2tpcFJlbW92ZSA9IChkb20gPSB2bm9kZS5fZG9tKSAhPSBudWxsO1xuXHR9XG5cblx0dm5vZGUuX2RvbSA9IHZub2RlLl9sYXN0RG9tQ2hpbGQgPSBudWxsO1xuXG5cdGlmICgociA9IHZub2RlLl9jb21wb25lbnQpICE9IG51bGwpIHtcblx0XHRpZiAoci5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRvcHRpb25zLl9jYXRjaEVycm9yKGUsIHBhcmVudFZOb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyLmJhc2UgPSByLl9wYXJlbnREb20gPSBudWxsO1xuXHR9XG5cblx0aWYgKChyID0gdm5vZGUuX2NoaWxkcmVuKSkge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgci5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHJbaV0pIHVubW91bnQocltpXSwgcGFyZW50Vk5vZGUsIHNraXBSZW1vdmUpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChkb20gIT0gbnVsbCkgcmVtb3ZlTm9kZShkb20pO1xufVxuXG4vKiogVGhlIGAucmVuZGVyKClgIG1ldGhvZCBmb3IgYSBQRkMgYmFja2luZyBpbnN0YW5jZS4gKi9cbmZ1bmN0aW9uIGRvUmVuZGVyKHByb3BzLCBzdGF0ZSwgY29udGV4dCkge1xuXHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCk7XG59XG4iLCJpbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgRU1QVFlfQVJSIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgY3JlYXRlVk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1lbGVtZW50JztcblxuLyoqXG4gKiBDbG9uZXMgdGhlIGdpdmVuIFZOb2RlLCBvcHRpb25hbGx5IGFkZGluZyBhdHRyaWJ1dGVzL3Byb3BzIGFuZCByZXBsYWNpbmcgaXRzIGNoaWxkcmVuLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZpcnR1YWwgRE9NIGVsZW1lbnQgdG8gY2xvbmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBBdHRyaWJ1dGVzL3Byb3BzIHRvIGFkZCB3aGVuIGNsb25pbmdcbiAqIEBwYXJhbSB7QXJyYXk8aW1wb3J0KCcuL2luZGV4JykuQ29tcG9uZW50Q2hpbGRyZW4+fSByZXN0IEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIHVzZWQgYXMgcmVwbGFjZW1lbnQgY2hpbGRyZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUVsZW1lbnQodm5vZGUsIHByb3BzKSB7XG5cdHByb3BzID0gYXNzaWduKGFzc2lnbih7fSwgdm5vZGUucHJvcHMpLCBwcm9wcyk7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikgcHJvcHMuY2hpbGRyZW4gPSBFTVBUWV9BUlIuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRyZXR1cm4gY3JlYXRlVk5vZGUoXG5cdFx0dm5vZGUudHlwZSxcblx0XHRwcm9wcyxcblx0XHRwcm9wcy5rZXkgfHwgdm5vZGUua2V5LFxuXHRcdHByb3BzLnJlZiB8fCB2bm9kZS5yZWZcblx0KTtcbn1cbiIsImltcG9ydCB7IGVucXVldWVSZW5kZXIgfSBmcm9tICcuLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIEZpbmQgdGhlIGNsb3Nlc3QgZXJyb3IgYm91bmRhcnkgdG8gYSB0aHJvd24gZXJyb3IgYW5kIGNhbGwgaXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBlcnJvciBUaGUgdGhyb3duIHZhbHVlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vaW50ZXJuYWwnKS5WTm9kZX0gdm5vZGUgVGhlIHZub2RlIHRoYXQgdGhyZXdcbiAqIHRoZSBlcnJvciB0aGF0IHdhcyBjYXVnaHQgKGV4Y2VwdCBmb3IgdW5tb3VudGluZyB3aGVuIHRoaXMgcGFyYW1ldGVyXG4gKiBpcyB0aGUgaGlnaGVzdCBwYXJlbnQgdGhhdCB3YXMgYmVpbmcgdW5tb3VudGVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoRXJyb3IoZXJyb3IsIHZub2RlKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuLi9pbnRlcm5hbCcpLkNvbXBvbmVudH0gKi9cblx0bGV0IGNvbXBvbmVudCwgaGFzQ2F1Z2h0O1xuXG5cdGZvciAoOyAodm5vZGUgPSB2bm9kZS5fcGFyZW50KTsgKSB7XG5cdFx0aWYgKChjb21wb25lbnQgPSB2bm9kZS5fY29tcG9uZW50KSAmJiAhY29tcG9uZW50Ll9wcm9jZXNzaW5nRXhjZXB0aW9uKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yICYmXG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAhPSBudWxsXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGhhc0NhdWdodCA9IHRydWU7XG5cdFx0XHRcdFx0Y29tcG9uZW50LnNldFN0YXRlKFxuXHRcdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcilcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aGFzQ2F1Z2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRjb21wb25lbnQuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhhc0NhdWdodClcblx0XHRcdFx0XHRyZXR1cm4gZW5xdWV1ZVJlbmRlcigoY29tcG9uZW50Ll9wZW5kaW5nRXJyb3IgPSBjb21wb25lbnQpKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0ZXJyb3IgPSBlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IGVycm9yO1xufVxuIiwiaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gJ3ByZWFjdCc7XG5cbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xubGV0IGN1cnJlbnRJbmRleDtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnR9ICovXG5sZXQgY3VycmVudENvbXBvbmVudDtcblxuLyoqIEB0eXBlIHtBcnJheTxpbXBvcnQoJy4vaW50ZXJuYWwnKS5Db21wb25lbnQ+fSAqL1xubGV0IGFmdGVyUGFpbnRFZmZlY3RzID0gW107XG5cbmxldCBvbGRCZWZvcmVSZW5kZXIgPSBvcHRpb25zLl9yZW5kZXI7XG5sZXQgb2xkQWZ0ZXJEaWZmID0gb3B0aW9ucy5kaWZmZWQ7XG5sZXQgb2xkQ29tbWl0ID0gb3B0aW9ucy5fY29tbWl0O1xubGV0IG9sZEJlZm9yZVVubW91bnQgPSBvcHRpb25zLnVubW91bnQ7XG5cbmNvbnN0IFJBRl9USU1FT1VUID0gMTAwO1xubGV0IHByZXZSYWY7XG5cbm9wdGlvbnMuX3JlbmRlciA9IHZub2RlID0+IHtcblx0aWYgKG9sZEJlZm9yZVJlbmRlcikgb2xkQmVmb3JlUmVuZGVyKHZub2RlKTtcblxuXHRjdXJyZW50Q29tcG9uZW50ID0gdm5vZGUuX2NvbXBvbmVudDtcblx0Y3VycmVudEluZGV4ID0gMDtcblxuXHRpZiAoY3VycmVudENvbXBvbmVudC5fX2hvb2tzKSB7XG5cdFx0Y3VycmVudENvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUNsZWFudXApO1xuXHRcdGN1cnJlbnRDb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMuZm9yRWFjaChpbnZva2VFZmZlY3QpO1xuXHRcdGN1cnJlbnRDb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMgPSBbXTtcblx0fVxufTtcblxub3B0aW9ucy5kaWZmZWQgPSB2bm9kZSA9PiB7XG5cdGlmIChvbGRBZnRlckRpZmYpIG9sZEFmdGVyRGlmZih2bm9kZSk7XG5cblx0Y29uc3QgYyA9IHZub2RlLl9jb21wb25lbnQ7XG5cdGlmICghYykgcmV0dXJuO1xuXG5cdGNvbnN0IGhvb2tzID0gYy5fX2hvb2tzO1xuXHRpZiAoaG9va3MpIHtcblx0XHRpZiAoaG9va3MuX3BlbmRpbmdFZmZlY3RzLmxlbmd0aCkge1xuXHRcdFx0YWZ0ZXJQYWludChhZnRlclBhaW50RWZmZWN0cy5wdXNoKGMpKTtcblx0XHR9XG5cdH1cbn07XG5cbm9wdGlvbnMuX2NvbW1pdCA9ICh2bm9kZSwgY29tbWl0UXVldWUpID0+IHtcblx0Y29tbWl0UXVldWUuc29tZShjb21wb25lbnQgPT4ge1xuXHRcdGNvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goaW52b2tlQ2xlYW51cCk7XG5cdFx0Y29tcG9uZW50Ll9yZW5kZXJDYWxsYmFja3MgPSBjb21wb25lbnQuX3JlbmRlckNhbGxiYWNrcy5maWx0ZXIoY2IgPT5cblx0XHRcdGNiLl92YWx1ZSA/IGludm9rZUVmZmVjdChjYikgOiB0cnVlXG5cdFx0KTtcblx0fSk7XG5cblx0aWYgKG9sZENvbW1pdCkgb2xkQ29tbWl0KHZub2RlLCBjb21taXRRdWV1ZSk7XG59O1xuXG5vcHRpb25zLnVubW91bnQgPSB2bm9kZSA9PiB7XG5cdGlmIChvbGRCZWZvcmVVbm1vdW50KSBvbGRCZWZvcmVVbm1vdW50KHZub2RlKTtcblxuXHRjb25zdCBjID0gdm5vZGUuX2NvbXBvbmVudDtcblx0aWYgKCFjKSByZXR1cm47XG5cblx0Y29uc3QgaG9va3MgPSBjLl9faG9va3M7XG5cdGlmIChob29rcykge1xuXHRcdGhvb2tzLl9saXN0LmZvckVhY2goaG9vayA9PiBob29rLl9jbGVhbnVwICYmIGhvb2suX2NsZWFudXAoKSk7XG5cdH1cbn07XG5cbi8qKlxuICogR2V0IGEgaG9vaydzIHN0YXRlIGZyb20gdGhlIGN1cnJlbnRDb21wb25lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGhvb2sgdG8gZ2V0XG4gKiBAcmV0dXJucyB7aW1wb3J0KCcuL2ludGVybmFsJykuSG9va1N0YXRlfVxuICovXG5mdW5jdGlvbiBnZXRIb29rU3RhdGUoaW5kZXgpIHtcblx0aWYgKG9wdGlvbnMuX2hvb2spIG9wdGlvbnMuX2hvb2soY3VycmVudENvbXBvbmVudCk7XG5cdC8vIExhcmdlbHkgaW5zcGlyZWQgYnk6XG5cdC8vICogaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWwta2xlaW4vZnVuY3kuanMvYmxvYi9mNmJlNzM0NjhlNmVjNDZiMGZmNWFhM2NjNGM5YmFmNzJhMjkwMjVhL3NyYy9ob29rcy9jb3JlX2hvb2tzLm1qc1xuXHQvLyAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNoYWVsLWtsZWluL2Z1bmN5LmpzL2Jsb2IvNjUwYmVhYTU4YzQzYzMzYTc0ODIwYTNjOThiM2M3MDc5Y2YyZTMzMy9zcmMvcmVuZGVyZXIubWpzXG5cdC8vIE90aGVyIGltcGxlbWVudGF0aW9ucyB0byBsb29rIGF0OlxuXHQvLyAqIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9tbm94MDVxcDhcblx0Y29uc3QgaG9va3MgPVxuXHRcdGN1cnJlbnRDb21wb25lbnQuX19ob29rcyB8fFxuXHRcdChjdXJyZW50Q29tcG9uZW50Ll9faG9va3MgPSB7IF9saXN0OiBbXSwgX3BlbmRpbmdFZmZlY3RzOiBbXSB9KTtcblxuXHRpZiAoaW5kZXggPj0gaG9va3MuX2xpc3QubGVuZ3RoKSB7XG5cdFx0aG9va3MuX2xpc3QucHVzaCh7fSk7XG5cdH1cblx0cmV0dXJuIGhvb2tzLl9saXN0W2luZGV4XTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLlN0YXRlVXBkYXRlcjxhbnk+fSBpbml0aWFsU3RhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YXRlKGluaXRpYWxTdGF0ZSkge1xuXHRyZXR1cm4gdXNlUmVkdWNlcihpbnZva2VPclJldHVybiwgaW5pdGlhbFN0YXRlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLlJlZHVjZXI8YW55LCBhbnk+fSByZWR1Y2VyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbmRleCcpLlN0YXRlVXBkYXRlcjxhbnk+fSBpbml0aWFsU3RhdGVcbiAqIEBwYXJhbSB7KGluaXRpYWxTdGF0ZTogYW55KSA9PiB2b2lkfSBbaW5pdF1cbiAqIEByZXR1cm5zIHtbIGFueSwgKHN0YXRlOiBhbnkpID0+IHZvaWQgXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbFN0YXRlLCBpbml0KSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuUmVkdWNlckhvb2tTdGF0ZX0gKi9cblx0Y29uc3QgaG9va1N0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrKTtcblx0aWYgKCFob29rU3RhdGUuX2NvbXBvbmVudCkge1xuXHRcdGhvb2tTdGF0ZS5fY29tcG9uZW50ID0gY3VycmVudENvbXBvbmVudDtcblxuXHRcdGhvb2tTdGF0ZS5fdmFsdWUgPSBbXG5cdFx0XHQhaW5pdCA/IGludm9rZU9yUmV0dXJuKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlKSA6IGluaXQoaW5pdGlhbFN0YXRlKSxcblxuXHRcdFx0YWN0aW9uID0+IHtcblx0XHRcdFx0Y29uc3QgbmV4dFZhbHVlID0gcmVkdWNlcihob29rU3RhdGUuX3ZhbHVlWzBdLCBhY3Rpb24pO1xuXHRcdFx0XHRpZiAoaG9va1N0YXRlLl92YWx1ZVswXSAhPT0gbmV4dFZhbHVlKSB7XG5cdFx0XHRcdFx0aG9va1N0YXRlLl92YWx1ZVswXSA9IG5leHRWYWx1ZTtcblx0XHRcdFx0XHRob29rU3RhdGUuX2NvbXBvbmVudC5zZXRTdGF0ZSh7fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdO1xuXHR9XG5cblx0cmV0dXJuIGhvb2tTdGF0ZS5fdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3R9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFZmZlY3QoY2FsbGJhY2ssIGFyZ3MpIHtcblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW50ZXJuYWwnKS5FZmZlY3RIb29rU3RhdGV9ICovXG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrKTtcblx0aWYgKGFyZ3NDaGFuZ2VkKHN0YXRlLl9hcmdzLCBhcmdzKSkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IGNhbGxiYWNrO1xuXHRcdHN0YXRlLl9hcmdzID0gYXJncztcblxuXHRcdGN1cnJlbnRDb21wb25lbnQuX19ob29rcy5fcGVuZGluZ0VmZmVjdHMucHVzaChzdGF0ZSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdH0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxheW91dEVmZmVjdChjYWxsYmFjaywgYXJncykge1xuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbnRlcm5hbCcpLkVmZmVjdEhvb2tTdGF0ZX0gKi9cblx0Y29uc3Qgc3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyspO1xuXHRpZiAoYXJnc0NoYW5nZWQoc3RhdGUuX2FyZ3MsIGFyZ3MpKSB7XG5cdFx0c3RhdGUuX3ZhbHVlID0gY2FsbGJhY2s7XG5cdFx0c3RhdGUuX2FyZ3MgPSBhcmdzO1xuXG5cdFx0Y3VycmVudENvbXBvbmVudC5fcmVuZGVyQ2FsbGJhY2tzLnB1c2goc3RhdGUpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWYoaW5pdGlhbFZhbHVlKSB7XG5cdHJldHVybiB1c2VNZW1vKCgpID0+ICh7IGN1cnJlbnQ6IGluaXRpYWxWYWx1ZSB9KSwgW10pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7KCkgPT4gb2JqZWN0fSBjcmVhdGVIYW5kbGVcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGVIYW5kbGUsIGFyZ3MpIHtcblx0dXNlTGF5b3V0RWZmZWN0KFxuXHRcdCgpID0+IHtcblx0XHRcdGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSByZWYoY3JlYXRlSGFuZGxlKCkpO1xuXHRcdFx0ZWxzZSBpZiAocmVmKSByZWYuY3VycmVudCA9IGNyZWF0ZUhhbmRsZSgpO1xuXHRcdH0sXG5cdFx0YXJncyA9PSBudWxsID8gYXJncyA6IGFyZ3MuY29uY2F0KHJlZilcblx0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IGFueX0gZmFjdG9yeVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVtbyhmYWN0b3J5LCBhcmdzKSB7XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2ludGVybmFsJykuTWVtb0hvb2tTdGF0ZX0gKi9cblx0Y29uc3Qgc3RhdGUgPSBnZXRIb29rU3RhdGUoY3VycmVudEluZGV4KyspO1xuXHRpZiAoYXJnc0NoYW5nZWQoc3RhdGUuX2FyZ3MsIGFyZ3MpKSB7XG5cdFx0c3RhdGUuX2FyZ3MgPSBhcmdzO1xuXHRcdHN0YXRlLl9mYWN0b3J5ID0gZmFjdG9yeTtcblx0XHRyZXR1cm4gKHN0YXRlLl92YWx1ZSA9IGZhY3RvcnkoKSk7XG5cdH1cblxuXHRyZXR1cm4gc3RhdGUuX3ZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7YW55W119IGFyZ3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhbGxiYWNrKGNhbGxiYWNrLCBhcmdzKSB7XG5cdHJldHVybiB1c2VNZW1vKCgpID0+IGNhbGxiYWNrLCBhcmdzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9pbnRlcm5hbCcpLlByZWFjdENvbnRleHR9IGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnRleHQoY29udGV4dCkge1xuXHRjb25zdCBwcm92aWRlciA9IGN1cnJlbnRDb21wb25lbnQuY29udGV4dFtjb250ZXh0Ll9pZF07XG5cdGlmICghcHJvdmlkZXIpIHJldHVybiBjb250ZXh0Ll9kZWZhdWx0VmFsdWU7XG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrKTtcblx0Ly8gVGhpcyBpcyBwcm9iYWJseSBub3Qgc2FmZSB0byBjb252ZXJ0IHRvIFwiIVwiXG5cdGlmIChzdGF0ZS5fdmFsdWUgPT0gbnVsbCkge1xuXHRcdHN0YXRlLl92YWx1ZSA9IHRydWU7XG5cdFx0cHJvdmlkZXIuc3ViKGN1cnJlbnRDb21wb25lbnQpO1xuXHR9XG5cdHJldHVybiBwcm92aWRlci5wcm9wcy52YWx1ZTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IGEgY3VzdG9tIGxhYmVsIGZvciBhIGN1c3RvbSBob29rIGZvciB0aGUgZGV2dG9vbHMgcGFuZWxcbiAqIEB0eXBlIHs8VD4odmFsdWU6IFQsIGNiPzogKHZhbHVlOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXIpIHtcblx0aWYgKG9wdGlvbnMudXNlRGVidWdWYWx1ZSkge1xuXHRcdG9wdGlvbnMudXNlRGVidWdWYWx1ZShmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIodmFsdWUpIDogdmFsdWUpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFcnJvckJvdW5kYXJ5KGNiKSB7XG5cdGNvbnN0IHN0YXRlID0gZ2V0SG9va1N0YXRlKGN1cnJlbnRJbmRleCsrKTtcblx0Y29uc3QgZXJyU3RhdGUgPSB1c2VTdGF0ZSgpO1xuXHRzdGF0ZS5fdmFsdWUgPSBjYjtcblx0aWYgKCFjdXJyZW50Q29tcG9uZW50LmNvbXBvbmVudERpZENhdGNoKSB7XG5cdFx0Y3VycmVudENvbXBvbmVudC5jb21wb25lbnREaWRDYXRjaCA9IGVyciA9PiB7XG5cdFx0XHRpZiAoc3RhdGUuX3ZhbHVlKSBzdGF0ZS5fdmFsdWUoZXJyKTtcblx0XHRcdGVyclN0YXRlWzFdKGVycik7XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gW1xuXHRcdGVyclN0YXRlWzBdLFxuXHRcdCgpID0+IHtcblx0XHRcdGVyclN0YXRlWzFdKHVuZGVmaW5lZCk7XG5cdFx0fVxuXHRdO1xufVxuXG4vKipcbiAqIEFmdGVyIHBhaW50IGVmZmVjdHMgY29uc3VtZXIuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoQWZ0ZXJQYWludEVmZmVjdHMoKSB7XG5cdGFmdGVyUGFpbnRFZmZlY3RzLnNvbWUoY29tcG9uZW50ID0+IHtcblx0XHRpZiAoY29tcG9uZW50Ll9wYXJlbnREb20pIHtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cy5mb3JFYWNoKGludm9rZUNsZWFudXApO1xuXHRcdFx0Y29tcG9uZW50Ll9faG9va3MuX3BlbmRpbmdFZmZlY3RzLmZvckVhY2goaW52b2tlRWZmZWN0KTtcblx0XHRcdGNvbXBvbmVudC5fX2hvb2tzLl9wZW5kaW5nRWZmZWN0cyA9IFtdO1xuXHRcdH1cblx0fSk7XG5cdGFmdGVyUGFpbnRFZmZlY3RzID0gW107XG59XG5cbi8qKlxuICogU2NoZWR1bGUgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIGFmdGVyIHRoZSBicm93c2VyIGhhcyBhIGNoYW5jZSB0byBwYWludCBhIG5ldyBmcmFtZS5cbiAqIERvIHRoaXMgYnkgY29tYmluaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZSAockFGKSArIHNldFRpbWVvdXQgdG8gaW52b2tlIGEgY2FsbGJhY2sgYWZ0ZXJcbiAqIHRoZSBuZXh0IGJyb3dzZXIgZnJhbWUuXG4gKlxuICogQWxzbywgc2NoZWR1bGUgYSB0aW1lb3V0IGluIHBhcmFsbGVsIHRvIHRoZSB0aGUgckFGIHRvIGVuc3VyZSB0aGUgY2FsbGJhY2sgaXMgaW52b2tlZFxuICogZXZlbiBpZiBSQUYgZG9lc24ndCBmaXJlIChmb3IgZXhhbXBsZSBpZiB0aGUgYnJvd3NlciB0YWIgaXMgbm90IHZpc2libGUpXG4gKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBhZnRlck5leHRGcmFtZShjYWxsYmFjaykge1xuXHRjb25zdCBkb25lID0gKCkgPT4ge1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuXHRcdHNldFRpbWVvdXQoY2FsbGJhY2spO1xuXHR9O1xuXHRjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChkb25lLCBSQUZfVElNRU9VVCk7XG5cblx0bGV0IHJhZjtcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRvbmUpO1xuXHR9XG59XG5cbi8vIE5vdGU6IGlmIHNvbWVvbmUgdXNlZCBvcHRpb25zLmRlYm91bmNlUmVuZGVyaW5nID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuLy8gdGhlbiBlZmZlY3RzIHdpbGwgQUxXQVlTIHJ1biBvbiB0aGUgTkVYVCBmcmFtZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IG9uZSwgaW5jdXJyaW5nIGEgfjE2bXMgZGVsYXkuXG4vLyBQZXJoYXBzIHRoaXMgaXMgbm90IHN1Y2ggYSBiaWcgZGVhbC5cbi8qKlxuICogU2NoZWR1bGUgYWZ0ZXJQYWludEVmZmVjdHMgZmx1c2ggYWZ0ZXIgdGhlIGJyb3dzZXIgcGFpbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3UXVldWVMZW5ndGhcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJQYWludChuZXdRdWV1ZUxlbmd0aCkge1xuXHRpZiAobmV3UXVldWVMZW5ndGggPT09IDEgfHwgcHJldlJhZiAhPT0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRwcmV2UmFmID0gb3B0aW9ucy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cblx0XHQvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXHRcdChwcmV2UmFmIHx8IGFmdGVyTmV4dEZyYW1lKShmbHVzaEFmdGVyUGFpbnRFZmZlY3RzKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuRWZmZWN0SG9va1N0YXRlfSBob29rXG4gKi9cbmZ1bmN0aW9uIGludm9rZUNsZWFudXAoaG9vaykge1xuXHRpZiAoaG9vay5fY2xlYW51cCkgaG9vay5fY2xlYW51cCgpO1xufVxuXG4vKipcbiAqIEludm9rZSBhIEhvb2sncyBlZmZlY3RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2ludGVybmFsJykuRWZmZWN0SG9va1N0YXRlfSBob29rXG4gKi9cbmZ1bmN0aW9uIGludm9rZUVmZmVjdChob29rKSB7XG5cdGNvbnN0IHJlc3VsdCA9IGhvb2suX3ZhbHVlKCk7XG5cdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnZnVuY3Rpb24nKSBob29rLl9jbGVhbnVwID0gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IG9sZEFyZ3NcbiAqIEBwYXJhbSB7YW55W119IG5ld0FyZ3NcbiAqL1xuZnVuY3Rpb24gYXJnc0NoYW5nZWQob2xkQXJncywgbmV3QXJncykge1xuXHRyZXR1cm4gIW9sZEFyZ3MgfHwgbmV3QXJncy5zb21lKChhcmcsIGluZGV4KSA9PiBhcmcgIT09IG9sZEFyZ3NbaW5kZXhdKTtcbn1cblxuZnVuY3Rpb24gaW52b2tlT3JSZXR1cm4oYXJnLCBmKSB7XG5cdHJldHVybiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJyA/IGYoYXJnKSA6IGY7XG59XG4iLCJcbmNvbnN0IENvbG9ycyA9IHtcblxuICAkRDEwOiAnIzE2MkQzRCcsIC8vIE1haW4gaW5wdXQgdGV4dCwgdGl0bGVzXG4gICREMjA6ICcjMzI1MzZBJywgLy8gVGl0bGVzLCB0ZXh0c1xuICAkRDMwOiAnIzU3NzA4MycsIC8vIFRleHRzXG4gICRENDA6ICcjN0E5MkE1JywgLy8gRGl2aWRlcnMsIHRleHRzLCBQbGFjZWhvbGRlclxuICAkRDUwOiAnI0I2QzFDRCcsIC8vIERpdmlkZXJzLCB0ZXh0c1xuICAkRDU1OiAnI0NCRDNEQycsIC8vIERpc2FibGVkIGJ1dHRvbiAtIG5ldyB2ZXJzaW9uIC0gbmFtaW5nIG5vdCBmaW5hbFxuICAkRDYwOiAnI0RGRTVFQicsIC8vIERpdmlkZXJzXG4gICRENzA6ICcjRjBGNEY3JywgLy8gUGFnZSBiYWNrZ3JvdW5kLCBkaXZpZGVyc1xuICAkRDgwOiAnI0ZGRkZGRicsIC8vIENvbnRlbnQgYm94IGJhY2tncm91bmRcblxuICAkQjAwOiAnIzJCODFDQicsIC8vIEJ1dHRvbnNcbiAgJEIwNTogJyMzMDhEREQnLCAvLyBDVEFcbiAgJEIxMDogJyMzODk5RUMnLCAvLyBNYWluIGFjdGlvbiBjb2xvciwgYWN0aXZlLCBidXR0b25zXG4gICRCMjA6ICcjNEVCN0Y1JywgLy8gSG92ZXIgZm9yIGVsZW1lbnRzIHdpdGggQjEwLCBidXR0b25zXG4gICRCMjU6ICcjQTFEN0ZCJyxcbiAgJEIyNzogJyNCM0UwRkInLFxuICAkQjMwOiAnI0MxRTRGRScsIC8vIE5vdGlmaWNhdGlvbnNcbiAgJEI0MDogJyNEQUVGRkUnLCAvLyBEaXZpZGVycywgdGFibGUgc2VsZWN0ZWQsIHRhYmxlIGhlYWRlcnNcbiAgJEI1MDogJyNFQUY3RkYnLCAvLyBEaXZpZGVyc1xuICAkQjYwOiAnI0Y0RkFGRScsIC8vIFRhYmxlIGhvdmVyXG5cblxufTtcblxuY29uc3QgVGhlbWUgPSB7XG4gIENvbG9ycyxcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGhlbWU7XG4iLCJ2YXIgcj17ZGF0YTpcIlwifSx0PWZ1bmN0aW9uKHQpe3RyeXt2YXIgZT10P3QucXVlcnlTZWxlY3RvcihcIiNfZ29vYmVyXCIpOnNlbGYuX2dvb2JlcjtyZXR1cm4gZXx8KChlPSh0fHxkb2N1bWVudC5oZWFkKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikpKS5pbm5lckhUTUw9XCIgXCIsZS5pZD1cIl9nb29iZXJcIiksZS5maXJzdENoaWxkfWNhdGNoKHIpe31yZXR1cm4gcn0sZT1mdW5jdGlvbihyKXt2YXIgZT10KHIpLG49ZS5kYXRhO3JldHVybiBlLmRhdGE9XCJcIixufSxuPS8oPzooW2EtejAtOS0lQF0rKSAqOj8gKihbXns7XSs/KTt8KFteO317XSo/KSAreyl8KH0pL2dpLGE9L1xcL1xcKi4qP1xcKlxcL3xcXHN7Mix9fFxcbi9nbSxvPWZ1bmN0aW9uKHIsdCxlKXt2YXIgbj1cIlwiLGE9XCJcIixjPVwiXCI7Zm9yKHZhciBpIGluIHIpe3ZhciB1PXJbaV07aWYoXCJvYmplY3RcIj09dHlwZW9mIHUpe3ZhciBzPXQrXCIgXCIraTsvJi9nLnRlc3QoaSkmJihzPWkucmVwbGFjZSgvJi9nLHQpKSxcIkBcIj09aVswXSYmKHM9dCxcImZcIj09aVsxXSYmKHM9aSkpLC9Aay8udGVzdChpKT9hKz1pK1wie1wiK28odSxcIlwiLFwiXCIpK1wifVwiOmErPW8odSxzLHM9PXQ/aTplfHxcIlwiKX1lbHNlL15AaS8udGVzdChpKT9jPWkrXCIgXCIrdStcIjtcIjpuKz1pLnJlcGxhY2UoL1tBLVpdL2csXCItJCZcIikudG9Mb3dlckNhc2UoKStcIjpcIit1K1wiO1wifWlmKG4uY2hhckNvZGVBdCgwKSl7dmFyIGY9dCtcIntcIituK1wifVwiO3JldHVybiBlP2ErZStcIntcIitmK1wifVwiOmMrZithfXJldHVybiBjK2F9LGM9e30saT1mdW5jdGlvbihyLHQsZSxpKXt2YXIgdT1KU09OLnN0cmluZ2lmeShyKSxzPWNbdV18fChjW3VdPWU/XCJcIjpcIi5nb1wiK3Uuc3BsaXQoXCJcIikucmVkdWNlKGZ1bmN0aW9uKHIsdCl7cmV0dXJuIDEwMSpyK3QuY2hhckNvZGVBdCgwKT4+PjB9LDExKSk7cmV0dXJuIGZ1bmN0aW9uKHIsdCxlKXt0LmRhdGEuaW5kZXhPZihyKTwwJiYodC5kYXRhPWU/cit0LmRhdGE6dC5kYXRhK3IpfShjW3NdfHwoY1tzXT1vKHJbMF0/ZnVuY3Rpb24ocil7Zm9yKHZhciB0LGU9W3t9XTt0PW4uZXhlYyhyLnJlcGxhY2UoYSxcIlwiKSk7KXRbNF0mJmUuc2hpZnQoKSx0WzNdP2UudW5zaGlmdChlWzBdW3RbM11dPXt9KTp0WzRdfHwoZVswXVt0WzFdXT10WzJdKTtyZXR1cm4gZVswXX0ocik6cixzKSksdCxpKSxzLnNsaWNlKDEpfSx1PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm4gci5yZWR1Y2UoZnVuY3Rpb24ocixuLGEpe3ZhciBvPXRbYV07aWYobyYmby5jYWxsKXt2YXIgYz1vKGUpLGk9YyYmYy5wcm9wcyYmYy5wcm9wcy5jbGFzc05hbWV8fC9eZ28vLnRlc3QoYykmJmM7bz1pP1wiLlwiK2k6YyYmYy5wcm9wcz9cIlwiOmN9cmV0dXJuIHIrbisob3x8XCJcIil9LFwiXCIpfTtmdW5jdGlvbiBzKHIpe3ZhciBlPXRoaXN8fHt9LG49ci5jYWxsP3IoZS5wKTpyO3JldHVybiBpKG4ubWFwP3UobixbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxlLnApOm4sdChlLnRhcmdldCksZS5nLGUubyl9dmFyIGYsbD1zLmJpbmQoe2c6MX0pLGQ9ZnVuY3Rpb24ocil7cmV0dXJuIGY9cn07ZnVuY3Rpb24gcChyKXt2YXIgdD10aGlzfHx7fTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHM7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciBhPXQucD1PYmplY3QuYXNzaWduKHt9LG4pLG89YS5jbGFzc05hbWU7cmV0dXJuIHQubz0vXFxzKmdvWzAtOV0rL2cudGVzdChvKSxhLmNsYXNzTmFtZT1zLmFwcGx5KHQsZSkrKG8/XCIgXCIrbzpcIlwiKSxmKHIsYSl9fX1leHBvcnR7cCBhcyBzdHlsZWQsZCBhcyBzZXRQcmFnbWEsZSBhcyBleHRyYWN0Q3NzLHMgYXMgY3NzLGwgYXMgZ2xvYn07XG4iLCJpbXBvcnQgeyBoLCBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3ByZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdwcmVhY3QvaG9va3MnO1xuaW1wb3J0IHsgc3R5bGVkLCBzZXRQcmFnbWEgfSBmcm9tICdnb29iZXInO1xuaW1wb3J0IHJlZ2lzdGVyIGZyb20gJ3ByZWFjdC1jdXN0b20tZWxlbWVudCc7XG4vLyBpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzL2JpbmQnO1xuaW1wb3J0IFRoZW1lIGZyb20gJy4uLy4uL3V0aWxzL2dsb2JhbFN0eWxlcyc7XG4vLyBpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbi8vIGltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuc2V0UHJhZ21hKGgpO1xuXG5jb25zdCBUYWIgPSAoeyBpdGVtLCBpc0FjdGl2ZSwgY2xpY2tIYW5kbGVyIH0pID0+IChcbiAgPFN0eWxlZExpIGlzQWN0aXZlPXtpc0FjdGl2ZX0+XG4gICAgPGJ1dHRvblxuICAgICAgb25DbGljaz17KCkgPT4gY2xpY2tIYW5kbGVyKGl0ZW0pfVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgPlxuICAgICAge2l0ZW0ubGFiZWx9XG4gICAgPC9idXR0b24+XG4gIDwvU3R5bGVkTGk+XG4pO1xuXG5pbnRlcmZhY2UgQnV0dG9uUHJvcHMge1xuICBpc0FjdGl2ZT86IGJvb2xlYW47XG59XG5cblxudHlwZSBUYWIgPSB7XG4gIGxhYmVsOiBzdHJpbmcsXG4gIGlkPzogc3RyaW5nXG59O1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgZGF0YTogc3RyaW5nLFxuICBhY3RpdmV0YWI6IFN0cmluZ1xufVxuXG5jb25zdCBUYWJzOiBGdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBkYXRhLCBhY3RpdmV0YWIgfSkgPT4ge1xuICBjb25zdCBbZGF0YVN0YXRlLCBzZXREYXRhXSA9IHVzZVN0YXRlPFRhYltdIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFthY3RpdmUsIHNldEFjdGl2ZV0gPSB1c2VTdGF0ZTxhbnk+KHt9KTtcblxuICBjb25zdCBjb21wb25lbnRSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBzZXREYXRhKHBhcnNlZERhdGEubWFwKCh0YWIpID0+ICh7IGxhYmVsOiB0YWIsIGlkOiB0YWIudG9Mb3dlckNhc2UoKSB9KSkpO1xuICAgIH1cbiAgfSwgW2RhdGFdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY3RpdmV0YWIgJiYgZGF0YVN0YXRlKSB7XG4gICAgICBzZXRBY3RpdmUoZGF0YVN0YXRlLmZpbHRlcigodGFiKSA9PiB0YWIuaWQgPT09IGFjdGl2ZXRhYi50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY29uc3QgZmxhdHRlbiA9IGFjYy5jb25jYXQoaXRlbSk7XG4gICAgICAgICAgcmV0dXJuIGZsYXR0ZW47XG4gICAgICAgIH0pKTtcbiAgICB9XG4gIH0sIFtkYXRhU3RhdGVdKTtcblxuXG4gIGNvbnN0IGNsaWNrRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3RhYkl0ZW1DbGlja2VkJywge1xuICAgIGRldGFpbDogYWN0aXZlLFxuICAgIGJ1YmJsZXM6IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IGNsaWNrSGFuZGxlciA9IChpdGVtKSA9PiB7XG4gICAgc2V0QWN0aXZlKGl0ZW0pO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNvbXBvbmVudFJlZi5jdXJyZW50KSBjb21wb25lbnRSZWYuY3VycmVudC5kaXNwYXRjaEV2ZW50KGNsaWNrRXZlbnQpO1xuICB9LCBbYWN0aXZlXSk7XG5cbiAgaWYgKCFkYXRhU3RhdGUpIHJldHVybiBudWxsO1xuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtjb21wb25lbnRSZWZ9PlxuXG4gICAgICA8U3R5bGVkVWw+XG4gICAgICAgIHtkYXRhU3RhdGUubWFwKCh0YWIpID0+IChcbiAgICAgICAgICA8VGFiXG4gICAgICAgICAgICBpdGVtPXt0YWJ9XG4gICAgICAgICAgICBjbGlja0hhbmRsZXI9e2NsaWNrSGFuZGxlcn1cbiAgICAgICAgICAgIGlzQWN0aXZlPXthY3RpdmUuaWQgPT09IHRhYi5pZH1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvU3R5bGVkVWw+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBTdHlsZWRVbCA9IHN0eWxlZCgndWwnKWBcbmxpc3Qtc3R5bGU6IG5vbmU7XG5kaXNwbGF5OiBmbGV4O1xuZmxleC1kaXJlY3Rpb246IHJvdztcbnBhZGRpbmc6IDA7XG5tYXJnaW46IDA7XG5oZWlnaHQ6IDYwcHg7XG5wb3NpdGlvbjogcmVsYXRpdmU7XG5mb250LWZhbWlseTogJEZvbnRSb21hbjtcbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5gO1xuXG5cbmNvbnN0IFN0eWxlZExpID0gc3R5bGVkPHsgaXNBY3RpdmU6IGJvb2xlYW4gfT4oJ2xpJylgIFxuaGVpZ2h0OiAxMDAlO1xuZGlzcGxheTogZmxleDtcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xubWFyZ2luOiAwIDE4cHggMCAwO1xuXG4gICY6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luOiAwO1xuICB9XG5cbiYgYnV0dG9uIHtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBmb250LXNpemU6IDE0cHg7XG4gIHBhZGRpbmc6IDA7XG4gIGNvbG9yOiAkQjEwO1xuICBjb2xvcjogJHsocHJvcHMpID0+IChwcm9wcy5pc0FjdGl2ZSA/IFRoZW1lLkNvbG9ycy4kQjEwIDogVGhlbWUuQ29sb3JzLiREMTApfTtcbiAgYm94LXNoYWRvdzogJHsocHJvcHMpID0+IChwcm9wcy5pc0FjdGl2ZSA/IGBpbnNldCAwIC0ycHggMCAwICR7VGhlbWUuQ29sb3JzLiRCMTB9YCA6ICdpbnNldCAwIDBweCAwIDAgYmx1ZScpfTtcbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAke1RoZW1lLkNvbG9ycy4kQjEwfTsgXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxufVxuYDtcblxuXG5yZWdpc3RlcihUYWJzLCAneC10YWJzJywgWydkYXRhJywgJ2FjdGl2ZXRhYiddKTtcblxuZXhwb3J0IGRlZmF1bHQgVGFicztcbiIsImZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShzdHJpbmdzLCByYXcpIHtcbiAgaWYgKCFyYXcpIHtcbiAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuICB9XG5cbiAgc3RyaW5ncy5yYXcgPSByYXc7XG4gIHJldHVybiBzdHJpbmdzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZTsiLCIhZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcmVhY3RcIikpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXCJwcmVhY3RcIl0sdCk7ZWxzZXt2YXIgbj10KFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP3JlcXVpcmUoXCJwcmVhY3RcIik6ZS5wcmVhY3QpO2Zvcih2YXIgbyBpbiBuKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW29dPW5bb119fSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG8pe2lmKG5bb10pcmV0dXJuIG5bb10uZXhwb3J0czt2YXIgcj1uW29dPXtleHBvcnRzOnt9LGlkOm8sbG9hZGVkOiExfTtyZXR1cm4gZVtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyx0KSxyLmxvYWRlZD0hMCxyLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gcihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyhcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOmEodCkpKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfWZ1bmN0aW9uIHUoZSx0LG4pe3ZhciB1PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIHUoKXtvKHRoaXMsdSk7dmFyIHQ9UmVmbGVjdC5jb25zdHJ1Y3QoSFRNTEVsZW1lbnQsW10sdSk7cmV0dXJuIHQuX3Zkb21Db21wb25lbnQ9ZSx0fXJldHVybiByKHUsdCkscyh1LFt7a2V5OlwiY29ubmVjdGVkQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe2kuYXBwbHkodGhpcyl9fSx7a2V5OlwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsdmFsdWU6ZnVuY3Rpb24oKXtpLmFwcGx5KHRoaXMpfX0se2tleTpcImRldGFjaGVkQ2FsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbigpe2YuYXBwbHkodGhpcyl9fV0sW3trZXk6XCJvYnNlcnZlZEF0dHJpYnV0ZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn19XSksdX0oSFRNTEVsZW1lbnQpO3JldHVybiB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKHR8fGUuZGlzcGxheU5hbWV8fGUubmFtZSx1KX1mdW5jdGlvbiBpKCl7dGhpcy5fcm9vdD0oMCxsLnJlbmRlcikoYyh0aGlzLHRoaXMuX3Zkb21Db21wb25lbnQpLHRoaXMsdGhpcy5fcm9vdCl9ZnVuY3Rpb24gZigpeygwLGwucmVuZGVyKSgoMCxsLmgpKHApLHRoaXMsdGhpcy5fcm9vdCl9ZnVuY3Rpb24gYyhlLHQpe2lmKDM9PT1lLm5vZGVUeXBlKXJldHVybiBlLm5vZGVWYWx1ZTtpZigxIT09ZS5ub2RlVHlwZSlyZXR1cm4gbnVsbDt2YXIgbj1bXSxvPXt9LHI9MCx1PWUuYXR0cmlidXRlcyxpPWUuY2hpbGROb2Rlcztmb3Iocj11Lmxlbmd0aDtyLS07KW9bdVtyXS5uYW1lXT11W3JdLnZhbHVlO2ZvcihyPWkubGVuZ3RoO3ItLTspbltyXT1jKGlbcl0pO3JldHVybigwLGwuaCkodHx8ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLG8sbil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07dFtcImRlZmF1bHRcIl09dTt2YXIgbD1uKDEpLHA9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfV0pfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==